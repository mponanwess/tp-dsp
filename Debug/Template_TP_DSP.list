
Template_TP_DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa60  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f3c  0800ac28  0800ac28  0000bc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb64  0800fb64  0001105c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb64  0800fb64  00010b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb6c  0800fb6c  0001105c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb6c  0800fb6c  00010b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb70  0800fb70  00010b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800fb74  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004624  2000005c  0800fbd0  0001105c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004680  0800fbd0  00011680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001105c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de10  00000000  00000000  0001108c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041cd  00000000  00000000  0002ee9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b38  00000000  00000000  00033070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014fb  00000000  00000000  00034ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029061  00000000  00000000  000360a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022bc5  00000000  00000000  0005f104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f72be  00000000  00000000  00081cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00178f87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007320  00000000  00000000  00178fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001802ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800ac10 	.word	0x0800ac10

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	0800ac10 	.word	0x0800ac10

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	@ 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2iz>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007dc:	d215      	bcs.n	800080a <__aeabi_d2iz+0x36>
 80007de:	d511      	bpl.n	8000804 <__aeabi_d2iz+0x30>
 80007e0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e8:	d912      	bls.n	8000810 <__aeabi_d2iz+0x3c>
 80007ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007fa:	fa23 f002 	lsr.w	r0, r3, r2
 80007fe:	bf18      	it	ne
 8000800:	4240      	negne	r0, r0
 8000802:	4770      	bx	lr
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	4770      	bx	lr
 800080a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800080e:	d105      	bne.n	800081c <__aeabi_d2iz+0x48>
 8000810:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000814:	bf08      	it	eq
 8000816:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop

08000824 <__aeabi_uldivmod>:
 8000824:	b953      	cbnz	r3, 800083c <__aeabi_uldivmod+0x18>
 8000826:	b94a      	cbnz	r2, 800083c <__aeabi_uldivmod+0x18>
 8000828:	2900      	cmp	r1, #0
 800082a:	bf08      	it	eq
 800082c:	2800      	cmpeq	r0, #0
 800082e:	bf1c      	itt	ne
 8000830:	f04f 31ff 	movne.w	r1, #4294967295
 8000834:	f04f 30ff 	movne.w	r0, #4294967295
 8000838:	f000 b988 	b.w	8000b4c <__aeabi_idiv0>
 800083c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000840:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000844:	f000 f806 	bl	8000854 <__udivmoddi4>
 8000848:	f8dd e004 	ldr.w	lr, [sp, #4]
 800084c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000850:	b004      	add	sp, #16
 8000852:	4770      	bx	lr

08000854 <__udivmoddi4>:
 8000854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000858:	9d08      	ldr	r5, [sp, #32]
 800085a:	468e      	mov	lr, r1
 800085c:	4604      	mov	r4, r0
 800085e:	4688      	mov	r8, r1
 8000860:	2b00      	cmp	r3, #0
 8000862:	d14a      	bne.n	80008fa <__udivmoddi4+0xa6>
 8000864:	428a      	cmp	r2, r1
 8000866:	4617      	mov	r7, r2
 8000868:	d962      	bls.n	8000930 <__udivmoddi4+0xdc>
 800086a:	fab2 f682 	clz	r6, r2
 800086e:	b14e      	cbz	r6, 8000884 <__udivmoddi4+0x30>
 8000870:	f1c6 0320 	rsb	r3, r6, #32
 8000874:	fa01 f806 	lsl.w	r8, r1, r6
 8000878:	fa20 f303 	lsr.w	r3, r0, r3
 800087c:	40b7      	lsls	r7, r6
 800087e:	ea43 0808 	orr.w	r8, r3, r8
 8000882:	40b4      	lsls	r4, r6
 8000884:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000888:	fa1f fc87 	uxth.w	ip, r7
 800088c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000890:	0c23      	lsrs	r3, r4, #16
 8000892:	fb0e 8811 	mls	r8, lr, r1, r8
 8000896:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800089a:	fb01 f20c 	mul.w	r2, r1, ip
 800089e:	429a      	cmp	r2, r3
 80008a0:	d909      	bls.n	80008b6 <__udivmoddi4+0x62>
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	f101 30ff 	add.w	r0, r1, #4294967295
 80008a8:	f080 80ea 	bcs.w	8000a80 <__udivmoddi4+0x22c>
 80008ac:	429a      	cmp	r2, r3
 80008ae:	f240 80e7 	bls.w	8000a80 <__udivmoddi4+0x22c>
 80008b2:	3902      	subs	r1, #2
 80008b4:	443b      	add	r3, r7
 80008b6:	1a9a      	subs	r2, r3, r2
 80008b8:	b2a3      	uxth	r3, r4
 80008ba:	fbb2 f0fe 	udiv	r0, r2, lr
 80008be:	fb0e 2210 	mls	r2, lr, r0, r2
 80008c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008c6:	fb00 fc0c 	mul.w	ip, r0, ip
 80008ca:	459c      	cmp	ip, r3
 80008cc:	d909      	bls.n	80008e2 <__udivmoddi4+0x8e>
 80008ce:	18fb      	adds	r3, r7, r3
 80008d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80008d4:	f080 80d6 	bcs.w	8000a84 <__udivmoddi4+0x230>
 80008d8:	459c      	cmp	ip, r3
 80008da:	f240 80d3 	bls.w	8000a84 <__udivmoddi4+0x230>
 80008de:	443b      	add	r3, r7
 80008e0:	3802      	subs	r0, #2
 80008e2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008e6:	eba3 030c 	sub.w	r3, r3, ip
 80008ea:	2100      	movs	r1, #0
 80008ec:	b11d      	cbz	r5, 80008f6 <__udivmoddi4+0xa2>
 80008ee:	40f3      	lsrs	r3, r6
 80008f0:	2200      	movs	r2, #0
 80008f2:	e9c5 3200 	strd	r3, r2, [r5]
 80008f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d905      	bls.n	800090a <__udivmoddi4+0xb6>
 80008fe:	b10d      	cbz	r5, 8000904 <__udivmoddi4+0xb0>
 8000900:	e9c5 0100 	strd	r0, r1, [r5]
 8000904:	2100      	movs	r1, #0
 8000906:	4608      	mov	r0, r1
 8000908:	e7f5      	b.n	80008f6 <__udivmoddi4+0xa2>
 800090a:	fab3 f183 	clz	r1, r3
 800090e:	2900      	cmp	r1, #0
 8000910:	d146      	bne.n	80009a0 <__udivmoddi4+0x14c>
 8000912:	4573      	cmp	r3, lr
 8000914:	d302      	bcc.n	800091c <__udivmoddi4+0xc8>
 8000916:	4282      	cmp	r2, r0
 8000918:	f200 8105 	bhi.w	8000b26 <__udivmoddi4+0x2d2>
 800091c:	1a84      	subs	r4, r0, r2
 800091e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000922:	2001      	movs	r0, #1
 8000924:	4690      	mov	r8, r2
 8000926:	2d00      	cmp	r5, #0
 8000928:	d0e5      	beq.n	80008f6 <__udivmoddi4+0xa2>
 800092a:	e9c5 4800 	strd	r4, r8, [r5]
 800092e:	e7e2      	b.n	80008f6 <__udivmoddi4+0xa2>
 8000930:	2a00      	cmp	r2, #0
 8000932:	f000 8090 	beq.w	8000a56 <__udivmoddi4+0x202>
 8000936:	fab2 f682 	clz	r6, r2
 800093a:	2e00      	cmp	r6, #0
 800093c:	f040 80a4 	bne.w	8000a88 <__udivmoddi4+0x234>
 8000940:	1a8a      	subs	r2, r1, r2
 8000942:	0c03      	lsrs	r3, r0, #16
 8000944:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000948:	b280      	uxth	r0, r0
 800094a:	b2bc      	uxth	r4, r7
 800094c:	2101      	movs	r1, #1
 800094e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000952:	fb0e 221c 	mls	r2, lr, ip, r2
 8000956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800095a:	fb04 f20c 	mul.w	r2, r4, ip
 800095e:	429a      	cmp	r2, r3
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x11e>
 8000962:	18fb      	adds	r3, r7, r3
 8000964:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000968:	d202      	bcs.n	8000970 <__udivmoddi4+0x11c>
 800096a:	429a      	cmp	r2, r3
 800096c:	f200 80e0 	bhi.w	8000b30 <__udivmoddi4+0x2dc>
 8000970:	46c4      	mov	ip, r8
 8000972:	1a9b      	subs	r3, r3, r2
 8000974:	fbb3 f2fe 	udiv	r2, r3, lr
 8000978:	fb0e 3312 	mls	r3, lr, r2, r3
 800097c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000980:	fb02 f404 	mul.w	r4, r2, r4
 8000984:	429c      	cmp	r4, r3
 8000986:	d907      	bls.n	8000998 <__udivmoddi4+0x144>
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	f102 30ff 	add.w	r0, r2, #4294967295
 800098e:	d202      	bcs.n	8000996 <__udivmoddi4+0x142>
 8000990:	429c      	cmp	r4, r3
 8000992:	f200 80ca 	bhi.w	8000b2a <__udivmoddi4+0x2d6>
 8000996:	4602      	mov	r2, r0
 8000998:	1b1b      	subs	r3, r3, r4
 800099a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800099e:	e7a5      	b.n	80008ec <__udivmoddi4+0x98>
 80009a0:	f1c1 0620 	rsb	r6, r1, #32
 80009a4:	408b      	lsls	r3, r1
 80009a6:	fa22 f706 	lsr.w	r7, r2, r6
 80009aa:	431f      	orrs	r7, r3
 80009ac:	fa0e f401 	lsl.w	r4, lr, r1
 80009b0:	fa20 f306 	lsr.w	r3, r0, r6
 80009b4:	fa2e fe06 	lsr.w	lr, lr, r6
 80009b8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80009bc:	4323      	orrs	r3, r4
 80009be:	fa00 f801 	lsl.w	r8, r0, r1
 80009c2:	fa1f fc87 	uxth.w	ip, r7
 80009c6:	fbbe f0f9 	udiv	r0, lr, r9
 80009ca:	0c1c      	lsrs	r4, r3, #16
 80009cc:	fb09 ee10 	mls	lr, r9, r0, lr
 80009d0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009d4:	fb00 fe0c 	mul.w	lr, r0, ip
 80009d8:	45a6      	cmp	lr, r4
 80009da:	fa02 f201 	lsl.w	r2, r2, r1
 80009de:	d909      	bls.n	80009f4 <__udivmoddi4+0x1a0>
 80009e0:	193c      	adds	r4, r7, r4
 80009e2:	f100 3aff 	add.w	sl, r0, #4294967295
 80009e6:	f080 809c 	bcs.w	8000b22 <__udivmoddi4+0x2ce>
 80009ea:	45a6      	cmp	lr, r4
 80009ec:	f240 8099 	bls.w	8000b22 <__udivmoddi4+0x2ce>
 80009f0:	3802      	subs	r0, #2
 80009f2:	443c      	add	r4, r7
 80009f4:	eba4 040e 	sub.w	r4, r4, lr
 80009f8:	fa1f fe83 	uxth.w	lr, r3
 80009fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a00:	fb09 4413 	mls	r4, r9, r3, r4
 8000a04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a0c:	45a4      	cmp	ip, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x1ce>
 8000a10:	193c      	adds	r4, r7, r4
 8000a12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a16:	f080 8082 	bcs.w	8000b1e <__udivmoddi4+0x2ca>
 8000a1a:	45a4      	cmp	ip, r4
 8000a1c:	d97f      	bls.n	8000b1e <__udivmoddi4+0x2ca>
 8000a1e:	3b02      	subs	r3, #2
 8000a20:	443c      	add	r4, r7
 8000a22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a26:	eba4 040c 	sub.w	r4, r4, ip
 8000a2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a2e:	4564      	cmp	r4, ip
 8000a30:	4673      	mov	r3, lr
 8000a32:	46e1      	mov	r9, ip
 8000a34:	d362      	bcc.n	8000afc <__udivmoddi4+0x2a8>
 8000a36:	d05f      	beq.n	8000af8 <__udivmoddi4+0x2a4>
 8000a38:	b15d      	cbz	r5, 8000a52 <__udivmoddi4+0x1fe>
 8000a3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000a3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000a42:	fa04 f606 	lsl.w	r6, r4, r6
 8000a46:	fa22 f301 	lsr.w	r3, r2, r1
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	40cc      	lsrs	r4, r1
 8000a4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000a52:	2100      	movs	r1, #0
 8000a54:	e74f      	b.n	80008f6 <__udivmoddi4+0xa2>
 8000a56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a5a:	0c01      	lsrs	r1, r0, #16
 8000a5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a60:	b280      	uxth	r0, r0
 8000a62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a66:	463b      	mov	r3, r7
 8000a68:	4638      	mov	r0, r7
 8000a6a:	463c      	mov	r4, r7
 8000a6c:	46b8      	mov	r8, r7
 8000a6e:	46be      	mov	lr, r7
 8000a70:	2620      	movs	r6, #32
 8000a72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a76:	eba2 0208 	sub.w	r2, r2, r8
 8000a7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a7e:	e766      	b.n	800094e <__udivmoddi4+0xfa>
 8000a80:	4601      	mov	r1, r0
 8000a82:	e718      	b.n	80008b6 <__udivmoddi4+0x62>
 8000a84:	4610      	mov	r0, r2
 8000a86:	e72c      	b.n	80008e2 <__udivmoddi4+0x8e>
 8000a88:	f1c6 0220 	rsb	r2, r6, #32
 8000a8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000a90:	40b7      	lsls	r7, r6
 8000a92:	40b1      	lsls	r1, r6
 8000a94:	fa20 f202 	lsr.w	r2, r0, r2
 8000a98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000aa2:	b2bc      	uxth	r4, r7
 8000aa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000aa8:	0c11      	lsrs	r1, r2, #16
 8000aaa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aae:	fb08 f904 	mul.w	r9, r8, r4
 8000ab2:	40b0      	lsls	r0, r6
 8000ab4:	4589      	cmp	r9, r1
 8000ab6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000aba:	b280      	uxth	r0, r0
 8000abc:	d93e      	bls.n	8000b3c <__udivmoddi4+0x2e8>
 8000abe:	1879      	adds	r1, r7, r1
 8000ac0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ac4:	d201      	bcs.n	8000aca <__udivmoddi4+0x276>
 8000ac6:	4589      	cmp	r9, r1
 8000ac8:	d81f      	bhi.n	8000b0a <__udivmoddi4+0x2b6>
 8000aca:	eba1 0109 	sub.w	r1, r1, r9
 8000ace:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ad2:	fb09 f804 	mul.w	r8, r9, r4
 8000ad6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ada:	b292      	uxth	r2, r2
 8000adc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ae0:	4542      	cmp	r2, r8
 8000ae2:	d229      	bcs.n	8000b38 <__udivmoddi4+0x2e4>
 8000ae4:	18ba      	adds	r2, r7, r2
 8000ae6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000aea:	d2c4      	bcs.n	8000a76 <__udivmoddi4+0x222>
 8000aec:	4542      	cmp	r2, r8
 8000aee:	d2c2      	bcs.n	8000a76 <__udivmoddi4+0x222>
 8000af0:	f1a9 0102 	sub.w	r1, r9, #2
 8000af4:	443a      	add	r2, r7
 8000af6:	e7be      	b.n	8000a76 <__udivmoddi4+0x222>
 8000af8:	45f0      	cmp	r8, lr
 8000afa:	d29d      	bcs.n	8000a38 <__udivmoddi4+0x1e4>
 8000afc:	ebbe 0302 	subs.w	r3, lr, r2
 8000b00:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b04:	3801      	subs	r0, #1
 8000b06:	46e1      	mov	r9, ip
 8000b08:	e796      	b.n	8000a38 <__udivmoddi4+0x1e4>
 8000b0a:	eba7 0909 	sub.w	r9, r7, r9
 8000b0e:	4449      	add	r1, r9
 8000b10:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b14:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b18:	fb09 f804 	mul.w	r8, r9, r4
 8000b1c:	e7db      	b.n	8000ad6 <__udivmoddi4+0x282>
 8000b1e:	4673      	mov	r3, lr
 8000b20:	e77f      	b.n	8000a22 <__udivmoddi4+0x1ce>
 8000b22:	4650      	mov	r0, sl
 8000b24:	e766      	b.n	80009f4 <__udivmoddi4+0x1a0>
 8000b26:	4608      	mov	r0, r1
 8000b28:	e6fd      	b.n	8000926 <__udivmoddi4+0xd2>
 8000b2a:	443b      	add	r3, r7
 8000b2c:	3a02      	subs	r2, #2
 8000b2e:	e733      	b.n	8000998 <__udivmoddi4+0x144>
 8000b30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b34:	443b      	add	r3, r7
 8000b36:	e71c      	b.n	8000972 <__udivmoddi4+0x11e>
 8000b38:	4649      	mov	r1, r9
 8000b3a:	e79c      	b.n	8000a76 <__udivmoddi4+0x222>
 8000b3c:	eba1 0109 	sub.w	r1, r1, r9
 8000b40:	46c4      	mov	ip, r8
 8000b42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b46:	fb09 f804 	mul.w	r8, r9, r4
 8000b4a:	e7c4      	b.n	8000ad6 <__udivmoddi4+0x282>

08000b4c <__aeabi_idiv0>:
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	81fb      	strh	r3, [r7, #14]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	81bb      	strh	r3, [r7, #12]
 8000b60:	4613      	mov	r3, r2
 8000b62:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8000b68:	89bb      	ldrh	r3, [r7, #12]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000b6e:	89bb      	ldrh	r3, [r7, #12]
 8000b70:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000b74:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8000b7a:	f001 fc71 	bl	8002460 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000b7e:	89fb      	ldrh	r3, [r7, #14]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2203      	movs	r2, #3
 8000b84:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 fafb 	bl	8002184 <CODEC_IO_Write>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	461a      	mov	r2, r3
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	4413      	add	r3, r2
 8000b96:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8000b98:	89fb      	ldrh	r3, [r7, #14]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f640 0117 	movw	r1, #2071	@ 0x817
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 faee 	bl	8002184 <CODEC_IO_Write>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	4413      	add	r3, r2
 8000bb0:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8000bb2:	89fb      	ldrh	r3, [r7, #14]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f001 fae1 	bl	8002184 <CODEC_IO_Write>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	4413      	add	r3, r2
 8000bca:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8000bcc:	89fb      	ldrh	r3, [r7, #14]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	226c      	movs	r2, #108	@ 0x6c
 8000bd2:	2139      	movs	r1, #57	@ 0x39
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 fad5 	bl	8002184 <CODEC_IO_Write>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	461a      	mov	r2, r3
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	4413      	add	r3, r2
 8000be2:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8000be4:	8afb      	ldrh	r3, [r7, #22]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00c      	beq.n	8000c04 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8000bea:	89fb      	ldrh	r3, [r7, #14]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2213      	movs	r2, #19
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 fac6 	bl	8002184 <CODEC_IO_Write>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	4413      	add	r3, r2
 8000c00:	61fb      	str	r3, [r7, #28]
 8000c02:	e00b      	b.n	8000c1c <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8000c04:	89fb      	ldrh	r3, [r7, #14]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2203      	movs	r2, #3
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fab9 	bl	8002184 <CODEC_IO_Write>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	4413      	add	r3, r2
 8000c1a:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8000c1c:	2032      	movs	r0, #50	@ 0x32
 8000c1e:	f001 fc87 	bl	8002530 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8000c22:	8b3b      	ldrh	r3, [r7, #24]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	f000 815f 	beq.w	8000ee8 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8000c2a:	4bae      	ldr	r3, [pc, #696]	@ (8000ee4 <wm8994_Init+0x394>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8000c30:	8b3b      	ldrh	r3, [r7, #24]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	f000 808c 	beq.w	8000d50 <wm8994_Init+0x200>
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	f300 8111 	bgt.w	8000e60 <wm8994_Init+0x310>
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d002      	beq.n	8000c48 <wm8994_Init+0xf8>
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d042      	beq.n	8000ccc <wm8994_Init+0x17c>
 8000c46:	e10b      	b.n	8000e60 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000c48:	89fb      	ldrh	r3, [r7, #14]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8000c50:	2105      	movs	r1, #5
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 fa96 	bl	8002184 <CODEC_IO_Write>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	4413      	add	r3, r2
 8000c60:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000c62:	89fb      	ldrh	r3, [r7, #14]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2200      	movs	r2, #0
 8000c68:	f240 6101 	movw	r1, #1537	@ 0x601
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 fa89 	bl	8002184 <CODEC_IO_Write>
 8000c72:	4603      	mov	r3, r0
 8000c74:	461a      	mov	r2, r3
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	4413      	add	r3, r2
 8000c7a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000c7c:	89fb      	ldrh	r3, [r7, #14]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	f240 6102 	movw	r1, #1538	@ 0x602
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 fa7c 	bl	8002184 <CODEC_IO_Write>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	4413      	add	r3, r2
 8000c94:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000c96:	89fb      	ldrh	r3, [r7, #14]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	f240 6104 	movw	r1, #1540	@ 0x604
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fa6f 	bl	8002184 <CODEC_IO_Write>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	461a      	mov	r2, r3
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	4413      	add	r3, r2
 8000cae:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000cb0:	89fb      	ldrh	r3, [r7, #14]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	f240 6105 	movw	r1, #1541	@ 0x605
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fa62 	bl	8002184 <CODEC_IO_Write>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	61fb      	str	r3, [r7, #28]
      break;
 8000cca:	e110      	b.n	8000eee <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000ccc:	89fb      	ldrh	r3, [r7, #14]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	f240 3203 	movw	r2, #771	@ 0x303
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 fa54 	bl	8002184 <CODEC_IO_Write>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000ce6:	89fb      	ldrh	r3, [r7, #14]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2201      	movs	r2, #1
 8000cec:	f240 6101 	movw	r1, #1537	@ 0x601
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f001 fa47 	bl	8002184 <CODEC_IO_Write>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000d00:	89fb      	ldrh	r3, [r7, #14]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2201      	movs	r2, #1
 8000d06:	f240 6102 	movw	r1, #1538	@ 0x602
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 fa3a 	bl	8002184 <CODEC_IO_Write>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	4413      	add	r3, r2
 8000d18:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000d1a:	89fb      	ldrh	r3, [r7, #14]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f240 6104 	movw	r1, #1540	@ 0x604
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 fa2d 	bl	8002184 <CODEC_IO_Write>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	4413      	add	r3, r2
 8000d32:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000d34:	89fb      	ldrh	r3, [r7, #14]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f240 6105 	movw	r1, #1541	@ 0x605
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fa20 	bl	8002184 <CODEC_IO_Write>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	61fb      	str	r3, [r7, #28]
      break;
 8000d4e:	e0ce      	b.n	8000eee <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000d50:	8afb      	ldrh	r3, [r7, #22]
 8000d52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000d56:	d141      	bne.n	8000ddc <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000d58:	89fb      	ldrh	r3, [r7, #14]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8000d60:	2105      	movs	r1, #5
 8000d62:	4618      	mov	r0, r3
 8000d64:	f001 fa0e 	bl	8002184 <CODEC_IO_Write>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	4413      	add	r3, r2
 8000d70:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8000d72:	89fb      	ldrh	r3, [r7, #14]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2203      	movs	r2, #3
 8000d78:	f240 6101 	movw	r1, #1537	@ 0x601
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 fa01 	bl	8002184 <CODEC_IO_Write>
 8000d82:	4603      	mov	r3, r0
 8000d84:	461a      	mov	r2, r3
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	4413      	add	r3, r2
 8000d8a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8000d8c:	89fb      	ldrh	r3, [r7, #14]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2203      	movs	r2, #3
 8000d92:	f240 6102 	movw	r1, #1538	@ 0x602
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 f9f4 	bl	8002184 <CODEC_IO_Write>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	4413      	add	r3, r2
 8000da4:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8000da6:	89fb      	ldrh	r3, [r7, #14]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2203      	movs	r2, #3
 8000dac:	f240 6104 	movw	r1, #1540	@ 0x604
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 f9e7 	bl	8002184 <CODEC_IO_Write>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8000dc0:	89fb      	ldrh	r3, [r7, #14]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	f240 6105 	movw	r1, #1541	@ 0x605
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 f9da 	bl	8002184 <CODEC_IO_Write>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8000dda:	e088      	b.n	8000eee <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000ddc:	89fb      	ldrh	r3, [r7, #14]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8000de4:	2105      	movs	r1, #5
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 f9cc 	bl	8002184 <CODEC_IO_Write>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	4413      	add	r3, r2
 8000df4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000df6:	89fb      	ldrh	r3, [r7, #14]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f240 6101 	movw	r1, #1537	@ 0x601
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 f9bf 	bl	8002184 <CODEC_IO_Write>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000e10:	89fb      	ldrh	r3, [r7, #14]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2201      	movs	r2, #1
 8000e16:	f240 6102 	movw	r1, #1538	@ 0x602
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 f9b2 	bl	8002184 <CODEC_IO_Write>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	4413      	add	r3, r2
 8000e28:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000e2a:	89fb      	ldrh	r3, [r7, #14]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2202      	movs	r2, #2
 8000e30:	f240 6104 	movw	r1, #1540	@ 0x604
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 f9a5 	bl	8002184 <CODEC_IO_Write>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	4413      	add	r3, r2
 8000e42:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8000e44:	89fb      	ldrh	r3, [r7, #14]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2202      	movs	r2, #2
 8000e4a:	f240 6105 	movw	r1, #1541	@ 0x605
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 f998 	bl	8002184 <CODEC_IO_Write>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	61fb      	str	r3, [r7, #28]
      break;
 8000e5e:	e046      	b.n	8000eee <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	f240 3203 	movw	r2, #771	@ 0x303
 8000e68:	2105      	movs	r1, #5
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 f98a 	bl	8002184 <CODEC_IO_Write>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	4413      	add	r3, r2
 8000e78:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000e7a:	89fb      	ldrh	r3, [r7, #14]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f240 6101 	movw	r1, #1537	@ 0x601
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 f97d 	bl	8002184 <CODEC_IO_Write>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	4413      	add	r3, r2
 8000e92:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000e94:	89fb      	ldrh	r3, [r7, #14]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f240 6102 	movw	r1, #1538	@ 0x602
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f001 f970 	bl	8002184 <CODEC_IO_Write>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	4413      	add	r3, r2
 8000eac:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f240 6104 	movw	r1, #1540	@ 0x604
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 f963 	bl	8002184 <CODEC_IO_Write>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f240 6105 	movw	r1, #1541	@ 0x605
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 f956 	bl	8002184 <CODEC_IO_Write>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	4413      	add	r3, r2
 8000ee0:	61fb      	str	r3, [r7, #28]
      break;
 8000ee2:	e004      	b.n	8000eee <wm8994_Init+0x39e>
 8000ee4:	20000078 	.word	0x20000078
    }
  }
  else
  {
    outputEnabled = 0;
 8000ee8:	4b99      	ldr	r3, [pc, #612]	@ (8001150 <wm8994_Init+0x600>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8000eee:	8afb      	ldrh	r3, [r7, #22]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 81ab 	beq.w	800124c <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8000ef6:	4b97      	ldr	r3, [pc, #604]	@ (8001154 <wm8994_Init+0x604>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8000efc:	8afb      	ldrh	r3, [r7, #22]
 8000efe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f02:	f000 8129 	beq.w	8001158 <wm8994_Init+0x608>
 8000f06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f0a:	f300 819b 	bgt.w	8001244 <wm8994_Init+0x6f4>
 8000f0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000f12:	d05a      	beq.n	8000fca <wm8994_Init+0x47a>
 8000f14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000f18:	f300 8194 	bgt.w	8001244 <wm8994_Init+0x6f4>
 8000f1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f20:	f000 80c6 	beq.w	80010b0 <wm8994_Init+0x560>
 8000f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f28:	f040 818c 	bne.w	8001244 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8000f2c:	89fb      	ldrh	r3, [r7, #14]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8000f34:	2104      	movs	r1, #4
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 f924 	bl	8002184 <CODEC_IO_Write>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	4413      	add	r3, r2
 8000f44:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	22db      	movs	r2, #219	@ 0xdb
 8000f4c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 f917 	bl	8002184 <CODEC_IO_Write>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8000f60:	89fb      	ldrh	r3, [r7, #14]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 f90a 	bl	8002184 <CODEC_IO_Write>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	4413      	add	r3, r2
 8000f78:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8000f7a:	89fb      	ldrh	r3, [r7, #14]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2202      	movs	r2, #2
 8000f80:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 f8fd 	bl	8002184 <CODEC_IO_Write>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	4413      	add	r3, r2
 8000f92:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8000f94:	89fb      	ldrh	r3, [r7, #14]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2202      	movs	r2, #2
 8000f9a:	f240 6109 	movw	r1, #1545	@ 0x609
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 f8f0 	bl	8002184 <CODEC_IO_Write>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	4413      	add	r3, r2
 8000fac:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	220e      	movs	r2, #14
 8000fb4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 f8e3 	bl	8002184 <CODEC_IO_Write>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	61fb      	str	r3, [r7, #28]
      break;
 8000fc8:	e143      	b.n	8001252 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2211      	movs	r2, #17
 8000fd0:	2128      	movs	r1, #40	@ 0x28
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 f8d6 	bl	8002184 <CODEC_IO_Write>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	4413      	add	r3, r2
 8000fe0:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8000fe2:	89fb      	ldrh	r3, [r7, #14]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2235      	movs	r2, #53	@ 0x35
 8000fe8:	2129      	movs	r1, #41	@ 0x29
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 f8ca 	bl	8002184 <CODEC_IO_Write>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8000ffa:	89fb      	ldrh	r3, [r7, #14]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2235      	movs	r2, #53	@ 0x35
 8001000:	212a      	movs	r1, #42	@ 0x2a
 8001002:	4618      	mov	r0, r3
 8001004:	f001 f8be 	bl	8002184 <CODEC_IO_Write>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	4413      	add	r3, r2
 8001010:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8001012:	89fb      	ldrh	r3, [r7, #14]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	f240 3203 	movw	r2, #771	@ 0x303
 800101a:	2104      	movs	r1, #4
 800101c:	4618      	mov	r0, r3
 800101e:	f001 f8b1 	bl	8002184 <CODEC_IO_Write>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	4413      	add	r3, r2
 800102a:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800102c:	89fb      	ldrh	r3, [r7, #14]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	22db      	movs	r2, #219	@ 0xdb
 8001032:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8001036:	4618      	mov	r0, r3
 8001038:	f001 f8a4 	bl	8002184 <CODEC_IO_Write>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	4413      	add	r3, r2
 8001044:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f246 3250 	movw	r2, #25424	@ 0x6350
 800104e:	2102      	movs	r1, #2
 8001050:	4618      	mov	r0, r3
 8001052:	f001 f897 	bl	8002184 <CODEC_IO_Write>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	4413      	add	r3, r2
 800105e:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001060:	89fb      	ldrh	r3, [r7, #14]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2202      	movs	r2, #2
 8001066:	f240 6106 	movw	r1, #1542	@ 0x606
 800106a:	4618      	mov	r0, r3
 800106c:	f001 f88a 	bl	8002184 <CODEC_IO_Write>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	4413      	add	r3, r2
 8001078:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2202      	movs	r2, #2
 8001080:	f240 6107 	movw	r1, #1543	@ 0x607
 8001084:	4618      	mov	r0, r3
 8001086:	f001 f87d 	bl	8002184 <CODEC_IO_Write>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	4413      	add	r3, r2
 8001092:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001094:	89fb      	ldrh	r3, [r7, #14]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	220d      	movs	r2, #13
 800109a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 f870 	bl	8002184 <CODEC_IO_Write>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	4413      	add	r3, r2
 80010ac:	61fb      	str	r3, [r7, #28]
      break;
 80010ae:	e0d0      	b.n	8001252 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80010b0:	89fb      	ldrh	r3, [r7, #14]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 80010b8:	2104      	movs	r1, #4
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 f862 	bl	8002184 <CODEC_IO_Write>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	4413      	add	r3, r2
 80010c8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80010ca:	89fb      	ldrh	r3, [r7, #14]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	22db      	movs	r2, #219	@ 0xdb
 80010d0:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 f855 	bl	8002184 <CODEC_IO_Write>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	4413      	add	r3, r2
 80010e2:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80010e4:	89fb      	ldrh	r3, [r7, #14]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f246 3250 	movw	r2, #25424	@ 0x6350
 80010ec:	2102      	movs	r1, #2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 f848 	bl	8002184 <CODEC_IO_Write>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	4413      	add	r3, r2
 80010fc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2202      	movs	r2, #2
 8001104:	f240 6106 	movw	r1, #1542	@ 0x606
 8001108:	4618      	mov	r0, r3
 800110a:	f001 f83b 	bl	8002184 <CODEC_IO_Write>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	4413      	add	r3, r2
 8001116:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001118:	89fb      	ldrh	r3, [r7, #14]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2202      	movs	r2, #2
 800111e:	f240 6107 	movw	r1, #1543	@ 0x607
 8001122:	4618      	mov	r0, r3
 8001124:	f001 f82e 	bl	8002184 <CODEC_IO_Write>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	4413      	add	r3, r2
 8001130:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001132:	89fb      	ldrh	r3, [r7, #14]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	220d      	movs	r2, #13
 8001138:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800113c:	4618      	mov	r0, r3
 800113e:	f001 f821 	bl	8002184 <CODEC_IO_Write>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	4413      	add	r3, r2
 800114a:	61fb      	str	r3, [r7, #28]
      break; 
 800114c:	e081      	b.n	8001252 <wm8994_Init+0x702>
 800114e:	bf00      	nop
 8001150:	20000078 	.word	0x20000078
 8001154:	2000007c 	.word	0x2000007c
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8001158:	89fb      	ldrh	r3, [r7, #14]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8001160:	2104      	movs	r1, #4
 8001162:	4618      	mov	r0, r3
 8001164:	f001 f80e 	bl	8002184 <CODEC_IO_Write>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	4413      	add	r3, r2
 8001170:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8001172:	89fb      	ldrh	r3, [r7, #14]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	22db      	movs	r2, #219	@ 0xdb
 8001178:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800117c:	4618      	mov	r0, r3
 800117e:	f001 f801 	bl	8002184 <CODEC_IO_Write>
 8001182:	4603      	mov	r3, r0
 8001184:	461a      	mov	r2, r3
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	4413      	add	r3, r2
 800118a:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800118c:	89fb      	ldrh	r3, [r7, #14]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	22db      	movs	r2, #219	@ 0xdb
 8001192:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fff4 	bl	8002184 <CODEC_IO_Write>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	4413      	add	r3, r2
 80011a4:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80011a6:	89fb      	ldrh	r3, [r7, #14]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80011ae:	2102      	movs	r1, #2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 ffe7 	bl	8002184 <CODEC_IO_Write>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	4413      	add	r3, r2
 80011be:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80011c0:	89fb      	ldrh	r3, [r7, #14]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2202      	movs	r2, #2
 80011c6:	f240 6106 	movw	r1, #1542	@ 0x606
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 ffda 	bl	8002184 <CODEC_IO_Write>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	4413      	add	r3, r2
 80011d8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80011da:	89fb      	ldrh	r3, [r7, #14]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2202      	movs	r2, #2
 80011e0:	f240 6107 	movw	r1, #1543	@ 0x607
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 ffcd 	bl	8002184 <CODEC_IO_Write>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	4413      	add	r3, r2
 80011f2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2202      	movs	r2, #2
 80011fa:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 ffc0 	bl	8002184 <CODEC_IO_Write>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	4413      	add	r3, r2
 800120c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800120e:	89fb      	ldrh	r3, [r7, #14]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2202      	movs	r2, #2
 8001214:	f240 6109 	movw	r1, #1545	@ 0x609
 8001218:	4618      	mov	r0, r3
 800121a:	f000 ffb3 	bl	8002184 <CODEC_IO_Write>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	4413      	add	r3, r2
 8001226:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001228:	89fb      	ldrh	r3, [r7, #14]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	220d      	movs	r2, #13
 800122e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001232:	4618      	mov	r0, r3
 8001234:	f000 ffa6 	bl	8002184 <CODEC_IO_Write>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	4413      	add	r3, r2
 8001240:	61fb      	str	r3, [r7, #28]
      break;    
 8001242:	e006      	b.n	8001252 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	3301      	adds	r3, #1
 8001248:	61fb      	str	r3, [r7, #28]
      break;
 800124a:	e002      	b.n	8001252 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 800124c:	4ba4      	ldr	r3, [pc, #656]	@ (80014e0 <wm8994_Init+0x990>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4aa3      	ldr	r2, [pc, #652]	@ (80014e4 <wm8994_Init+0x994>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d079      	beq.n	800134e <wm8994_Init+0x7fe>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4aa1      	ldr	r2, [pc, #644]	@ (80014e4 <wm8994_Init+0x994>)
 800125e:	4293      	cmp	r3, r2
 8001260:	f200 80ad 	bhi.w	80013be <wm8994_Init+0x86e>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800126a:	4293      	cmp	r3, r2
 800126c:	d061      	beq.n	8001332 <wm8994_Init+0x7e2>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001274:	4293      	cmp	r3, r2
 8001276:	f200 80a2 	bhi.w	80013be <wm8994_Init+0x86e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001280:	4293      	cmp	r3, r2
 8001282:	f000 808e 	beq.w	80013a2 <wm8994_Init+0x852>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800128c:	4293      	cmp	r3, r2
 800128e:	f200 8096 	bhi.w	80013be <wm8994_Init+0x86e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001298:	d03d      	beq.n	8001316 <wm8994_Init+0x7c6>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80012a0:	f200 808d 	bhi.w	80013be <wm8994_Init+0x86e>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f245 6222 	movw	r2, #22050	@ 0x5622
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d06b      	beq.n	8001386 <wm8994_Init+0x836>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f245 6222 	movw	r2, #22050	@ 0x5622
 80012b4:	4293      	cmp	r3, r2
 80012b6:	f200 8082 	bhi.w	80013be <wm8994_Init+0x86e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80012c0:	d01b      	beq.n	80012fa <wm8994_Init+0x7aa>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80012c8:	d879      	bhi.n	80013be <wm8994_Init+0x86e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80012d0:	d005      	beq.n	80012de <wm8994_Init+0x78e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80012d8:	4293      	cmp	r3, r2
 80012da:	d046      	beq.n	800136a <wm8994_Init+0x81a>
 80012dc:	e06f      	b.n	80013be <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80012de:	89fb      	ldrh	r3, [r7, #14]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2203      	movs	r2, #3
 80012e4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 ff4b 	bl	8002184 <CODEC_IO_Write>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	4413      	add	r3, r2
 80012f6:	61fb      	str	r3, [r7, #28]
    break;
 80012f8:	e06f      	b.n	80013da <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80012fa:	89fb      	ldrh	r3, [r7, #14]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2233      	movs	r2, #51	@ 0x33
 8001300:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001304:	4618      	mov	r0, r3
 8001306:	f000 ff3d 	bl	8002184 <CODEC_IO_Write>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	4413      	add	r3, r2
 8001312:	61fb      	str	r3, [r7, #28]
    break;
 8001314:	e061      	b.n	80013da <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2263      	movs	r2, #99	@ 0x63
 800131c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001320:	4618      	mov	r0, r3
 8001322:	f000 ff2f 	bl	8002184 <CODEC_IO_Write>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	4413      	add	r3, r2
 800132e:	61fb      	str	r3, [r7, #28]
    break;
 8001330:	e053      	b.n	80013da <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001332:	89fb      	ldrh	r3, [r7, #14]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2283      	movs	r2, #131	@ 0x83
 8001338:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800133c:	4618      	mov	r0, r3
 800133e:	f000 ff21 	bl	8002184 <CODEC_IO_Write>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	4413      	add	r3, r2
 800134a:	61fb      	str	r3, [r7, #28]
    break;
 800134c:	e045      	b.n	80013da <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	22a3      	movs	r2, #163	@ 0xa3
 8001354:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001358:	4618      	mov	r0, r3
 800135a:	f000 ff13 	bl	8002184 <CODEC_IO_Write>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	4413      	add	r3, r2
 8001366:	61fb      	str	r3, [r7, #28]
    break;
 8001368:	e037      	b.n	80013da <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2213      	movs	r2, #19
 8001370:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001374:	4618      	mov	r0, r3
 8001376:	f000 ff05 	bl	8002184 <CODEC_IO_Write>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	4413      	add	r3, r2
 8001382:	61fb      	str	r3, [r7, #28]
    break;
 8001384:	e029      	b.n	80013da <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2243      	movs	r2, #67	@ 0x43
 800138c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fef7 	bl	8002184 <CODEC_IO_Write>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	4413      	add	r3, r2
 800139e:	61fb      	str	r3, [r7, #28]
    break;
 80013a0:	e01b      	b.n	80013da <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80013a2:	89fb      	ldrh	r3, [r7, #14]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2273      	movs	r2, #115	@ 0x73
 80013a8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fee9 	bl	8002184 <CODEC_IO_Write>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	4413      	add	r3, r2
 80013ba:	61fb      	str	r3, [r7, #28]
    break; 
 80013bc:	e00d      	b.n	80013da <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80013be:	89fb      	ldrh	r3, [r7, #14]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2283      	movs	r2, #131	@ 0x83
 80013c4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fedb 	bl	8002184 <CODEC_IO_Write>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	4413      	add	r3, r2
 80013d6:	61fb      	str	r3, [r7, #28]
    break; 
 80013d8:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80013da:	8afb      	ldrh	r3, [r7, #22]
 80013dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80013e0:	d10e      	bne.n	8001400 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80013e2:	89fb      	ldrh	r3, [r7, #14]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	f244 0218 	movw	r2, #16408	@ 0x4018
 80013ea:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fec8 	bl	8002184 <CODEC_IO_Write>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	4413      	add	r3, r2
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	e00d      	b.n	800141c <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f244 0210 	movw	r2, #16400	@ 0x4010
 8001408:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800140c:	4618      	mov	r0, r3
 800140e:	f000 feb9 	bl	8002184 <CODEC_IO_Write>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	4413      	add	r3, r2
 800141a:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 800141c:	89fb      	ldrh	r3, [r7, #14]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2200      	movs	r2, #0
 8001422:	f240 3102 	movw	r1, #770	@ 0x302
 8001426:	4618      	mov	r0, r3
 8001428:	f000 feac 	bl	8002184 <CODEC_IO_Write>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	4413      	add	r3, r2
 8001434:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8001436:	89fb      	ldrh	r3, [r7, #14]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	220a      	movs	r2, #10
 800143c:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fe9f 	bl	8002184 <CODEC_IO_Write>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	4413      	add	r3, r2
 800144e:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8001450:	89fb      	ldrh	r3, [r7, #14]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fe92 	bl	8002184 <CODEC_IO_Write>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	4413      	add	r3, r2
 8001468:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800146a:	8b3b      	ldrh	r3, [r7, #24]
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 817b 	beq.w	8001768 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8001472:	8b3b      	ldrh	r3, [r7, #24]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d157      	bne.n	8001528 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8001478:	89fb      	ldrh	r3, [r7, #14]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001480:	212d      	movs	r1, #45	@ 0x2d
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fe7e 	bl	8002184 <CODEC_IO_Write>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	4413      	add	r3, r2
 8001490:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8001492:	89fb      	ldrh	r3, [r7, #14]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800149a:	212e      	movs	r1, #46	@ 0x2e
 800149c:	4618      	mov	r0, r3
 800149e:	f000 fe71 	bl	8002184 <CODEC_IO_Write>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	4413      	add	r3, r2
 80014aa:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 80014ac:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <wm8994_Init+0x998>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d01b      	beq.n	80014ec <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80014b4:	89fb      	ldrh	r3, [r7, #14]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 80014bc:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fe5f 	bl	8002184 <CODEC_IO_Write>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	4413      	add	r3, r2
 80014ce:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <wm8994_Init+0x998>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 80014d6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014da:	f001 f829 	bl	8002530 <AUDIO_IO_Delay>
 80014de:	e016      	b.n	800150e <wm8994_Init+0x9be>
 80014e0:	2000007c 	.word	0x2000007c
 80014e4:	00017700 	.word	0x00017700
 80014e8:	20000030 	.word	0x20000030
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80014ec:	89fb      	ldrh	r3, [r7, #14]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f248 1208 	movw	r2, #33032	@ 0x8108
 80014f4:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fe43 	bl	8002184 <CODEC_IO_Write>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	4413      	add	r3, r2
 8001506:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8001508:	2032      	movs	r0, #50	@ 0x32
 800150a:	f001 f811 	bl	8002530 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800150e:	89fb      	ldrh	r3, [r7, #14]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2200      	movs	r2, #0
 8001514:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001518:	4618      	mov	r0, r3
 800151a:	f000 fe33 	bl	8002184 <CODEC_IO_Write>
 800151e:	4603      	mov	r3, r0
 8001520:	461a      	mov	r2, r3
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	4413      	add	r3, r2
 8001526:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8001528:	89fb      	ldrh	r3, [r7, #14]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001530:	2103      	movs	r1, #3
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fe26 	bl	8002184 <CODEC_IO_Write>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	4413      	add	r3, r2
 8001540:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2200      	movs	r2, #0
 8001548:	2122      	movs	r1, #34	@ 0x22
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fe1a 	bl	8002184 <CODEC_IO_Write>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	4413      	add	r3, r2
 8001558:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2200      	movs	r2, #0
 8001560:	2123      	movs	r1, #35	@ 0x23
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fe0e 	bl	8002184 <CODEC_IO_Write>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	4413      	add	r3, r2
 8001570:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8001572:	89fb      	ldrh	r3, [r7, #14]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800157a:	2136      	movs	r1, #54	@ 0x36
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fe01 	bl	8002184 <CODEC_IO_Write>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	4413      	add	r3, r2
 800158a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 800158c:	89fb      	ldrh	r3, [r7, #14]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	f243 0203 	movw	r2, #12291	@ 0x3003
 8001594:	2101      	movs	r1, #1
 8001596:	4618      	mov	r0, r3
 8001598:	f000 fdf4 	bl	8002184 <CODEC_IO_Write>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	4413      	add	r3, r2
 80015a4:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80015a6:	8afb      	ldrh	r3, [r7, #22]
 80015a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80015ac:	d10d      	bne.n	80015ca <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80015ae:	89fb      	ldrh	r3, [r7, #14]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f240 2205 	movw	r2, #517	@ 0x205
 80015b6:	2151      	movs	r1, #81	@ 0x51
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fde3 	bl	8002184 <CODEC_IO_Write>
 80015be:	4603      	mov	r3, r0
 80015c0:	461a      	mov	r2, r3
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	4413      	add	r3, r2
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	e00b      	b.n	80015e2 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 80015ca:	89fb      	ldrh	r3, [r7, #14]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2205      	movs	r2, #5
 80015d0:	2151      	movs	r1, #81	@ 0x51
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fdd6 	bl	8002184 <CODEC_IO_Write>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	4413      	add	r3, r2
 80015e0:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80015e2:	8b7b      	ldrh	r3, [r7, #26]
 80015e4:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 80015e8:	f043 0303 	orr.w	r3, r3, #3
 80015ec:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80015ee:	89fb      	ldrh	r3, [r7, #14]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	8b7a      	ldrh	r2, [r7, #26]
 80015f4:	2101      	movs	r1, #1
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 fdc4 	bl	8002184 <CODEC_IO_Write>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	4413      	add	r3, r2
 8001604:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2222      	movs	r2, #34	@ 0x22
 800160c:	2160      	movs	r1, #96	@ 0x60
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fdb8 	bl	8002184 <CODEC_IO_Write>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4413      	add	r3, r2
 800161c:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 800161e:	89fb      	ldrh	r3, [r7, #14]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8001626:	214c      	movs	r1, #76	@ 0x4c
 8001628:	4618      	mov	r0, r3
 800162a:	f000 fdab 	bl	8002184 <CODEC_IO_Write>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	4413      	add	r3, r2
 8001636:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8001638:	200f      	movs	r0, #15
 800163a:	f000 ff79 	bl	8002530 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 800163e:	89fb      	ldrh	r3, [r7, #14]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2201      	movs	r2, #1
 8001644:	212d      	movs	r1, #45	@ 0x2d
 8001646:	4618      	mov	r0, r3
 8001648:	f000 fd9c 	bl	8002184 <CODEC_IO_Write>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	4413      	add	r3, r2
 8001654:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2201      	movs	r2, #1
 800165c:	212e      	movs	r1, #46	@ 0x2e
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fd90 	bl	8002184 <CODEC_IO_Write>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	4413      	add	r3, r2
 800166c:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 800166e:	89fb      	ldrh	r3, [r7, #14]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8001676:	2103      	movs	r1, #3
 8001678:	4618      	mov	r0, r3
 800167a:	f000 fd83 	bl	8002184 <CODEC_IO_Write>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	4413      	add	r3, r2
 8001686:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8001688:	89fb      	ldrh	r3, [r7, #14]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2233      	movs	r2, #51	@ 0x33
 800168e:	2154      	movs	r1, #84	@ 0x54
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fd77 	bl	8002184 <CODEC_IO_Write>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	4413      	add	r3, r2
 800169e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 80016a0:	f240 1001 	movw	r0, #257	@ 0x101
 80016a4:	f000 ff44 	bl	8002530 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80016a8:	89fb      	ldrh	r3, [r7, #14]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	22ee      	movs	r2, #238	@ 0xee
 80016ae:	2160      	movs	r1, #96	@ 0x60
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fd67 	bl	8002184 <CODEC_IO_Write>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4413      	add	r3, r2
 80016be:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80016c0:	89fb      	ldrh	r3, [r7, #14]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	22c0      	movs	r2, #192	@ 0xc0
 80016c6:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fd5a 	bl	8002184 <CODEC_IO_Write>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	4413      	add	r3, r2
 80016d8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80016da:	89fb      	ldrh	r3, [r7, #14]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	22c0      	movs	r2, #192	@ 0xc0
 80016e0:	f240 6111 	movw	r1, #1553	@ 0x611
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fd4d 	bl	8002184 <CODEC_IO_Write>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	4413      	add	r3, r2
 80016f2:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80016f4:	89fb      	ldrh	r3, [r7, #14]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2210      	movs	r2, #16
 80016fa:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fd40 	bl	8002184 <CODEC_IO_Write>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	4413      	add	r3, r2
 800170c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 800170e:	89fb      	ldrh	r3, [r7, #14]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	22c0      	movs	r2, #192	@ 0xc0
 8001714:	f240 6112 	movw	r1, #1554	@ 0x612
 8001718:	4618      	mov	r0, r3
 800171a:	f000 fd33 	bl	8002184 <CODEC_IO_Write>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	4413      	add	r3, r2
 8001726:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8001728:	89fb      	ldrh	r3, [r7, #14]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	22c0      	movs	r2, #192	@ 0xc0
 800172e:	f240 6113 	movw	r1, #1555	@ 0x613
 8001732:	4618      	mov	r0, r3
 8001734:	f000 fd26 	bl	8002184 <CODEC_IO_Write>
 8001738:	4603      	mov	r3, r0
 800173a:	461a      	mov	r2, r3
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	4413      	add	r3, r2
 8001740:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8001742:	89fb      	ldrh	r3, [r7, #14]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2210      	movs	r2, #16
 8001748:	f240 4122 	movw	r1, #1058	@ 0x422
 800174c:	4618      	mov	r0, r3
 800174e:	f000 fd19 	bl	8002184 <CODEC_IO_Write>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	4413      	add	r3, r2
 800175a:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 800175c:	7afa      	ldrb	r2, [r7, #11]
 800175e:	89fb      	ldrh	r3, [r7, #14]
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f000 f984 	bl	8001a70 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8001768:	8afb      	ldrh	r3, [r7, #22]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 80a6 	beq.w	80018bc <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8001770:	8afb      	ldrh	r3, [r7, #22]
 8001772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001776:	d003      	beq.n	8001780 <wm8994_Init+0xc30>
 8001778:	8afb      	ldrh	r3, [r7, #22]
 800177a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800177e:	d12b      	bne.n	80017d8 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8001780:	8b7b      	ldrh	r3, [r7, #26]
 8001782:	f043 0313 	orr.w	r3, r3, #19
 8001786:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001788:	89fb      	ldrh	r3, [r7, #14]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	8b7a      	ldrh	r2, [r7, #26]
 800178e:	2101      	movs	r1, #1
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fcf7 	bl	8002184 <CODEC_IO_Write>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	4413      	add	r3, r2
 800179e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80017a0:	89fb      	ldrh	r3, [r7, #14]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2202      	movs	r2, #2
 80017a6:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fcea 	bl	8002184 <CODEC_IO_Write>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	4413      	add	r3, r2
 80017b8:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80017ba:	89fb      	ldrh	r3, [r7, #14]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80017c2:	f240 4111 	movw	r1, #1041	@ 0x411
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fcdc 	bl	8002184 <CODEC_IO_Write>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	4413      	add	r3, r2
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	e06b      	b.n	80018b0 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80017d8:	8afb      	ldrh	r3, [r7, #22]
 80017da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017de:	d139      	bne.n	8001854 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80017e0:	8b7b      	ldrh	r3, [r7, #26]
 80017e2:	f043 0313 	orr.w	r3, r3, #19
 80017e6:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80017e8:	89fb      	ldrh	r3, [r7, #14]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	8b7a      	ldrh	r2, [r7, #26]
 80017ee:	2101      	movs	r1, #1
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fcc7 	bl	8002184 <CODEC_IO_Write>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001800:	89fb      	ldrh	r3, [r7, #14]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2202      	movs	r2, #2
 8001806:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fcba 	bl	8002184 <CODEC_IO_Write>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	4413      	add	r3, r2
 8001818:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800181a:	89fb      	ldrh	r3, [r7, #14]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001822:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fcac 	bl	8002184 <CODEC_IO_Write>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	4413      	add	r3, r2
 8001834:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8001836:	89fb      	ldrh	r3, [r7, #14]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800183e:	f240 4111 	movw	r1, #1041	@ 0x411
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fc9e 	bl	8002184 <CODEC_IO_Write>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	4413      	add	r3, r2
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	e02d      	b.n	80018b0 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8001854:	8afb      	ldrh	r3, [r7, #22]
 8001856:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800185a:	d003      	beq.n	8001864 <wm8994_Init+0xd14>
 800185c:	8afb      	ldrh	r3, [r7, #22]
 800185e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001862:	d125      	bne.n	80018b0 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8001864:	89fb      	ldrh	r3, [r7, #14]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	220b      	movs	r2, #11
 800186a:	2118      	movs	r1, #24
 800186c:	4618      	mov	r0, r3
 800186e:	f000 fc89 	bl	8002184 <CODEC_IO_Write>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	4413      	add	r3, r2
 800187a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	220b      	movs	r2, #11
 8001882:	211a      	movs	r1, #26
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fc7d 	bl	8002184 <CODEC_IO_Write>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001894:	89fb      	ldrh	r3, [r7, #14]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800189c:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fc6f 	bl	8002184 <CODEC_IO_Write>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	4413      	add	r3, r2
 80018ae:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80018b0:	7afa      	ldrb	r2, [r7, #11]
 80018b2:	89fb      	ldrh	r3, [r7, #14]
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f8da 	bl	8001a70 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 80018bc:	69fb      	ldr	r3, [r7, #28]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3720      	adds	r7, #32
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop

080018c8 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80018cc:	f000 fdd2 	bl	8002474 <AUDIO_IO_DeInit>
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80018de:	f000 fdbf 	bl	8002460 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fdf5 	bl	80024d8 <AUDIO_IO_Read>
 80018ee:	4603      	mov	r3, r0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	80fb      	strh	r3, [r7, #6]
 8001904:	4613      	mov	r3, r2
 8001906:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f000 f9d1 	bl	8001cb8 <wm8994_SetMute>
 8001916:	4602      	mov	r2, r0
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	2101      	movs	r1, #1
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f9bc 	bl	8001cb8 <wm8994_SetMute>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4413      	add	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2201      	movs	r2, #1
 800194e:	2102      	movs	r1, #2
 8001950:	4618      	mov	r0, r3
 8001952:	f000 fc17 	bl	8002184 <CODEC_IO_Write>
 8001956:	4603      	mov	r3, r0
 8001958:	461a      	mov	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4413      	add	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001960:	68fb      	ldr	r3, [r7, #12]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f000 f99b 	bl	8001cb8 <wm8994_SetMute>
 8001982:	4602      	mov	r2, r0
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800198a:	68fb      	ldr	r3, [r7, #12]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 80019a4:	4b31      	ldr	r3, [pc, #196]	@ (8001a6c <wm8994_Stop+0xd8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d05a      	beq.n	8001a62 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	2101      	movs	r1, #1
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f981 	bl	8001cb8 <wm8994_SetMute>
 80019b6:	4602      	mov	r2, r0
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d04e      	beq.n	8001a62 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019cc:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 fbd7 	bl	8002184 <CODEC_IO_Write>
 80019d6:	4603      	mov	r3, r0
 80019d8:	461a      	mov	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4413      	add	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e8:	f240 4122 	movw	r1, #1058	@ 0x422
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fbc9 	bl	8002184 <CODEC_IO_Write>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4413      	add	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2200      	movs	r2, #0
 8001a02:	212d      	movs	r1, #45	@ 0x2d
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fbbd 	bl	8002184 <CODEC_IO_Write>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2200      	movs	r2, #0
 8001a1a:	212e      	movs	r1, #46	@ 0x2e
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fbb1 	bl	8002184 <CODEC_IO_Write>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4413      	add	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2200      	movs	r2, #0
 8001a32:	2105      	movs	r1, #5
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 fba5 	bl	8002184 <CODEC_IO_Write>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4413      	add	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 fb99 	bl	8002184 <CODEC_IO_Write>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4413      	add	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	@ (8001a6c <wm8994_Stop+0xd8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000078 	.word	0x20000078

08001a70 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	460a      	mov	r2, r1
 8001a7a:	80fb      	strh	r3, [r7, #6]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001a84:	797b      	ldrb	r3, [r7, #5]
 8001a86:	2b64      	cmp	r3, #100	@ 0x64
 8001a88:	d80b      	bhi.n	8001aa2 <wm8994_SetVolume+0x32>
 8001a8a:	797a      	ldrb	r2, [r7, #5]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	019b      	lsls	r3, r3, #6
 8001a90:	1a9b      	subs	r3, r3, r2
 8001a92:	4a86      	ldr	r2, [pc, #536]	@ (8001cac <wm8994_SetVolume+0x23c>)
 8001a94:	fb82 1203 	smull	r1, r2, r2, r3
 8001a98:	1152      	asrs	r2, r2, #5
 8001a9a:	17db      	asrs	r3, r3, #31
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	e000      	b.n	8001aa4 <wm8994_SetVolume+0x34>
 8001aa2:	2364      	movs	r3, #100	@ 0x64
 8001aa4:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8001aa6:	4b82      	ldr	r3, [pc, #520]	@ (8001cb0 <wm8994_SetVolume+0x240>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 809b 	beq.w	8001be6 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8001ab0:	7afb      	ldrb	r3, [r7, #11]
 8001ab2:	2b3e      	cmp	r3, #62	@ 0x3e
 8001ab4:	d93d      	bls.n	8001b32 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f8fc 	bl	8001cb8 <wm8994_SetMute>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f240 127f 	movw	r2, #383	@ 0x17f
 8001ad0:	211c      	movs	r1, #28
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fb56 	bl	8002184 <CODEC_IO_Write>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f240 127f 	movw	r2, #383	@ 0x17f
 8001aea:	211d      	movs	r1, #29
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 fb49 	bl	8002184 <CODEC_IO_Write>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4413      	add	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f240 127f 	movw	r2, #383	@ 0x17f
 8001b04:	2126      	movs	r1, #38	@ 0x26
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fb3c 	bl	8002184 <CODEC_IO_Write>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	f240 127f 	movw	r2, #383	@ 0x17f
 8001b1e:	2127      	movs	r1, #39	@ 0x27
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 fb2f 	bl	8002184 <CODEC_IO_Write>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	e059      	b.n	8001be6 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8001b32:	797b      	ldrb	r3, [r7, #5]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d109      	bne.n	8001b4c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f8bb 	bl	8001cb8 <wm8994_SetMute>
 8001b42:	4602      	mov	r2, r0
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	e04c      	b.n	8001be6 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 f8b1 	bl	8001cb8 <wm8994_SetMute>
 8001b56:	4602      	mov	r2, r0
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	b2d8      	uxtb	r0, r3
 8001b62:	7afb      	ldrb	r3, [r7, #11]
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	211c      	movs	r1, #28
 8001b72:	f000 fb07 	bl	8002184 <CODEC_IO_Write>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	b2d8      	uxtb	r0, r3
 8001b84:	7afb      	ldrb	r3, [r7, #11]
 8001b86:	b21b      	sxth	r3, r3
 8001b88:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	211d      	movs	r1, #29
 8001b94:	f000 faf6 	bl	8002184 <CODEC_IO_Write>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	b2d8      	uxtb	r0, r3
 8001ba6:	7afb      	ldrb	r3, [r7, #11]
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2126      	movs	r1, #38	@ 0x26
 8001bb6:	f000 fae5 	bl	8002184 <CODEC_IO_Write>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	b2d8      	uxtb	r0, r3
 8001bc8:	7afb      	ldrb	r3, [r7, #11]
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	2127      	movs	r1, #39	@ 0x27
 8001bd8:	f000 fad4 	bl	8002184 <CODEC_IO_Write>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8001be6:	4b33      	ldr	r3, [pc, #204]	@ (8001cb4 <wm8994_SetVolume+0x244>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d059      	beq.n	8001ca2 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8001bee:	797b      	ldrb	r3, [r7, #5]
 8001bf0:	2b63      	cmp	r3, #99	@ 0x63
 8001bf2:	d80c      	bhi.n	8001c0e <wm8994_SetVolume+0x19e>
 8001bf4:	797a      	ldrb	r2, [r7, #5]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	4a2b      	ldr	r2, [pc, #172]	@ (8001cac <wm8994_SetVolume+0x23c>)
 8001c00:	fb82 1203 	smull	r1, r2, r2, r3
 8001c04:	1152      	asrs	r2, r2, #5
 8001c06:	17db      	asrs	r3, r3, #31
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	e000      	b.n	8001c10 <wm8994_SetVolume+0x1a0>
 8001c0e:	23ef      	movs	r3, #239	@ 0xef
 8001c10:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	b2d8      	uxtb	r0, r3
 8001c16:	7afb      	ldrb	r3, [r7, #11]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c28:	f000 faac 	bl	8002184 <CODEC_IO_Write>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	b2d8      	uxtb	r0, r3
 8001c3a:	7afb      	ldrb	r3, [r7, #11]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	f240 4101 	movw	r1, #1025	@ 0x401
 8001c4c:	f000 fa9a 	bl	8002184 <CODEC_IO_Write>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	b2d8      	uxtb	r0, r3
 8001c5e:	7afb      	ldrb	r3, [r7, #11]
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f240 4104 	movw	r1, #1028	@ 0x404
 8001c70:	f000 fa88 	bl	8002184 <CODEC_IO_Write>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	b2d8      	uxtb	r0, r3
 8001c82:	7afb      	ldrb	r3, [r7, #11]
 8001c84:	b21b      	sxth	r3, r3
 8001c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f240 4105 	movw	r1, #1029	@ 0x405
 8001c94:	f000 fa76 	bl	8002184 <CODEC_IO_Write>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	51eb851f 	.word	0x51eb851f
 8001cb0:	20000078 	.word	0x20000078
 8001cb4:	2000007c 	.word	0x2000007c

08001cb8 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8001cc8:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <wm8994_SetMute+0x98>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d039      	beq.n	8001d44 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d11c      	bne.n	8001d10 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cde:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 fa4e 	bl	8002184 <CODEC_IO_Write>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cfa:	f240 4122 	movw	r1, #1058	@ 0x422
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fa40 	bl	8002184 <CODEC_IO_Write>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	e019      	b.n	8001d44 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2210      	movs	r2, #16
 8001d16:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fa32 	bl	8002184 <CODEC_IO_Write>
 8001d20:	4603      	mov	r3, r0
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2210      	movs	r2, #16
 8001d30:	f240 4122 	movw	r1, #1058	@ 0x422
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 fa25 	bl	8002184 <CODEC_IO_Write>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4413      	add	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8001d44:	68fb      	ldr	r3, [r7, #12]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000078 	.word	0x20000078

08001d54 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	80fb      	strh	r3, [r7, #6]
 8001d60:	4613      	mov	r3, r2
 8001d62:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001d68:	797b      	ldrb	r3, [r7, #5]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	f000 808c 	beq.w	8001e88 <wm8994_SetOutputMode+0x134>
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	f300 80cb 	bgt.w	8001f0c <wm8994_SetOutputMode+0x1b8>
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d002      	beq.n	8001d80 <wm8994_SetOutputMode+0x2c>
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d042      	beq.n	8001e04 <wm8994_SetOutputMode+0xb0>
 8001d7e:	e0c5      	b.n	8001f0c <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8001d88:	2105      	movs	r1, #5
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f9fa 	bl	8002184 <CODEC_IO_Write>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461a      	mov	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f240 6101 	movw	r1, #1537	@ 0x601
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 f9ed 	bl	8002184 <CODEC_IO_Write>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4413      	add	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2200      	movs	r2, #0
 8001dba:	f240 6102 	movw	r1, #1538	@ 0x602
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f9e0 	bl	8002184 <CODEC_IO_Write>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f240 6104 	movw	r1, #1540	@ 0x604
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 f9d3 	bl	8002184 <CODEC_IO_Write>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461a      	mov	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4413      	add	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2202      	movs	r2, #2
 8001dee:	f240 6105 	movw	r1, #1541	@ 0x605
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 f9c6 	bl	8002184 <CODEC_IO_Write>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
    break;
 8001e02:	e0c5      	b.n	8001f90 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f240 3203 	movw	r2, #771	@ 0x303
 8001e0c:	2105      	movs	r1, #5
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f9b8 	bl	8002184 <CODEC_IO_Write>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2201      	movs	r2, #1
 8001e24:	f240 6101 	movw	r1, #1537	@ 0x601
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 f9ab 	bl	8002184 <CODEC_IO_Write>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461a      	mov	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4413      	add	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f240 6102 	movw	r1, #1538	@ 0x602
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f99e 	bl	8002184 <CODEC_IO_Write>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2200      	movs	r2, #0
 8001e58:	f240 6104 	movw	r1, #1540	@ 0x604
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 f991 	bl	8002184 <CODEC_IO_Write>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4413      	add	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2200      	movs	r2, #0
 8001e72:	f240 6105 	movw	r1, #1541	@ 0x605
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f984 	bl	8002184 <CODEC_IO_Write>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
    break;
 8001e86:	e083      	b.n	8001f90 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8001e90:	2105      	movs	r1, #5
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f976 	bl	8002184 <CODEC_IO_Write>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f240 6101 	movw	r1, #1537	@ 0x601
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 f969 	bl	8002184 <CODEC_IO_Write>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4413      	add	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f240 6102 	movw	r1, #1538	@ 0x602
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f95c 	bl	8002184 <CODEC_IO_Write>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2202      	movs	r2, #2
 8001edc:	f240 6104 	movw	r1, #1540	@ 0x604
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 f94f 	bl	8002184 <CODEC_IO_Write>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4413      	add	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f240 6105 	movw	r1, #1541	@ 0x605
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f942 	bl	8002184 <CODEC_IO_Write>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
    break;
 8001f0a:	e041      	b.n	8001f90 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f240 3203 	movw	r2, #771	@ 0x303
 8001f14:	2105      	movs	r1, #5
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f934 	bl	8002184 <CODEC_IO_Write>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f240 6101 	movw	r1, #1537	@ 0x601
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 f927 	bl	8002184 <CODEC_IO_Write>
 8001f36:	4603      	mov	r3, r0
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2201      	movs	r2, #1
 8001f46:	f240 6102 	movw	r1, #1538	@ 0x602
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f91a 	bl	8002184 <CODEC_IO_Write>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f240 6104 	movw	r1, #1540	@ 0x604
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f90d 	bl	8002184 <CODEC_IO_Write>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4413      	add	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f240 6105 	movw	r1, #1541	@ 0x605
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f900 	bl	8002184 <CODEC_IO_Write>
 8001f84:	4603      	mov	r3, r0
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
    break;    
 8001f8e:	bf00      	nop
  }  
  return counter;
 8001f90:	68fb      	ldr	r3, [r7, #12]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4a64      	ldr	r2, [pc, #400]	@ (8002140 <wm8994_SetFrequency+0x1a4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d079      	beq.n	80020a8 <wm8994_SetFrequency+0x10c>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4a62      	ldr	r2, [pc, #392]	@ (8002140 <wm8994_SetFrequency+0x1a4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	f200 80ad 	bhi.w	8002118 <wm8994_SetFrequency+0x17c>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d061      	beq.n	800208c <wm8994_SetFrequency+0xf0>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	f200 80a2 	bhi.w	8002118 <wm8994_SetFrequency+0x17c>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	f000 808e 	beq.w	80020fc <wm8994_SetFrequency+0x160>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	f200 8096 	bhi.w	8002118 <wm8994_SetFrequency+0x17c>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001ff2:	d03d      	beq.n	8002070 <wm8994_SetFrequency+0xd4>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001ffa:	f200 808d 	bhi.w	8002118 <wm8994_SetFrequency+0x17c>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002004:	4293      	cmp	r3, r2
 8002006:	d06b      	beq.n	80020e0 <wm8994_SetFrequency+0x144>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	f245 6222 	movw	r2, #22050	@ 0x5622
 800200e:	4293      	cmp	r3, r2
 8002010:	f200 8082 	bhi.w	8002118 <wm8994_SetFrequency+0x17c>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800201a:	d01b      	beq.n	8002054 <wm8994_SetFrequency+0xb8>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002022:	d879      	bhi.n	8002118 <wm8994_SetFrequency+0x17c>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800202a:	d005      	beq.n	8002038 <wm8994_SetFrequency+0x9c>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8002032:	4293      	cmp	r3, r2
 8002034:	d046      	beq.n	80020c4 <wm8994_SetFrequency+0x128>
 8002036:	e06f      	b.n	8002118 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2203      	movs	r2, #3
 800203e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002042:	4618      	mov	r0, r3
 8002044:	f000 f89e 	bl	8002184 <CODEC_IO_Write>
 8002048:	4603      	mov	r3, r0
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
    break;
 8002052:	e06f      	b.n	8002134 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2233      	movs	r2, #51	@ 0x33
 800205a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f890 	bl	8002184 <CODEC_IO_Write>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
    break;
 800206e:	e061      	b.n	8002134 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2263      	movs	r2, #99	@ 0x63
 8002076:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f882 	bl	8002184 <CODEC_IO_Write>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
    break;
 800208a:	e053      	b.n	8002134 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2283      	movs	r2, #131	@ 0x83
 8002092:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f874 	bl	8002184 <CODEC_IO_Write>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
    break;
 80020a6:	e045      	b.n	8002134 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	22a3      	movs	r2, #163	@ 0xa3
 80020ae:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f866 	bl	8002184 <CODEC_IO_Write>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
    break;
 80020c2:	e037      	b.n	8002134 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2213      	movs	r2, #19
 80020ca:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f858 	bl	8002184 <CODEC_IO_Write>
 80020d4:	4603      	mov	r3, r0
 80020d6:	461a      	mov	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
    break;
 80020de:	e029      	b.n	8002134 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2243      	movs	r2, #67	@ 0x43
 80020e6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f84a 	bl	8002184 <CODEC_IO_Write>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4413      	add	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
    break;
 80020fa:	e01b      	b.n	8002134 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2273      	movs	r2, #115	@ 0x73
 8002102:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f83c 	bl	8002184 <CODEC_IO_Write>
 800210c:	4603      	mov	r3, r0
 800210e:	461a      	mov	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
    break; 
 8002116:	e00d      	b.n	8002134 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2283      	movs	r2, #131	@ 0x83
 800211e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f82e 	bl	8002184 <CODEC_IO_Write>
 8002128:	4603      	mov	r3, r0
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
    break; 
 8002132:	bf00      	nop
  }
  return counter;
 8002134:	68fb      	ldr	r3, [r7, #12]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	00017700 	.word	0x00017700

08002144 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2200      	movs	r2, #0
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f812 	bl	8002184 <CODEC_IO_Write>
 8002160:	4603      	mov	r3, r0
 8002162:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8002164:	4b05      	ldr	r3, [pc, #20]	@ (800217c <wm8994_Reset+0x38>)
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800216a:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <wm8994_Reset+0x3c>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

  return counter;
 8002170:	68fb      	ldr	r3, [r7, #12]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000078 	.word	0x20000078
 8002180:	2000007c 	.word	0x2000007c

08002184 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
 800218e:	460b      	mov	r3, r1
 8002190:	80bb      	strh	r3, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	88b9      	ldrh	r1, [r7, #4]
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 f96f 	bl	8002484 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	b2db      	uxtb	r3, r3
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08c      	sub	sp, #48	@ 0x30
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a51      	ldr	r2, [pc, #324]	@ (8002304 <I2Cx_MspInit+0x150>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d14d      	bne.n	8002260 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80021c4:	4b50      	ldr	r3, [pc, #320]	@ (8002308 <I2Cx_MspInit+0x154>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002308 <I2Cx_MspInit+0x154>)
 80021ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002308 <I2Cx_MspInit+0x154>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d8:	61bb      	str	r3, [r7, #24]
 80021da:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80021e0:	2312      	movs	r3, #18
 80021e2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80021e8:	2302      	movs	r3, #2
 80021ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80021ec:	2304      	movs	r3, #4
 80021ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	4619      	mov	r1, r3
 80021f6:	4845      	ldr	r0, [pc, #276]	@ (800230c <I2Cx_MspInit+0x158>)
 80021f8:	f002 f89c 	bl	8004334 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80021fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4619      	mov	r1, r3
 8002208:	4840      	ldr	r0, [pc, #256]	@ (800230c <I2Cx_MspInit+0x158>)
 800220a:	f002 f893 	bl	8004334 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800220e:	4b3e      	ldr	r3, [pc, #248]	@ (8002308 <I2Cx_MspInit+0x154>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	4a3d      	ldr	r2, [pc, #244]	@ (8002308 <I2Cx_MspInit+0x154>)
 8002214:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002218:	6413      	str	r3, [r2, #64]	@ 0x40
 800221a:	4b3b      	ldr	r3, [pc, #236]	@ (8002308 <I2Cx_MspInit+0x154>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002226:	4b38      	ldr	r3, [pc, #224]	@ (8002308 <I2Cx_MspInit+0x154>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4a37      	ldr	r2, [pc, #220]	@ (8002308 <I2Cx_MspInit+0x154>)
 800222c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002230:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002232:	4b35      	ldr	r3, [pc, #212]	@ (8002308 <I2Cx_MspInit+0x154>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a34      	ldr	r2, [pc, #208]	@ (8002308 <I2Cx_MspInit+0x154>)
 8002238:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800223c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	210f      	movs	r1, #15
 8002242:	2048      	movs	r0, #72	@ 0x48
 8002244:	f001 fad7 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002248:	2048      	movs	r0, #72	@ 0x48
 800224a:	f001 faf0 	bl	800382e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	210f      	movs	r1, #15
 8002252:	2049      	movs	r0, #73	@ 0x49
 8002254:	f001 facf 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002258:	2049      	movs	r0, #73	@ 0x49
 800225a:	f001 fae8 	bl	800382e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800225e:	e04d      	b.n	80022fc <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002260:	4b29      	ldr	r3, [pc, #164]	@ (8002308 <I2Cx_MspInit+0x154>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002264:	4a28      	ldr	r2, [pc, #160]	@ (8002308 <I2Cx_MspInit+0x154>)
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	6313      	str	r3, [r2, #48]	@ 0x30
 800226c:	4b26      	ldr	r3, [pc, #152]	@ (8002308 <I2Cx_MspInit+0x154>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800227c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800227e:	2312      	movs	r3, #18
 8002280:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002286:	2302      	movs	r3, #2
 8002288:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800228a:	2304      	movs	r3, #4
 800228c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	4619      	mov	r1, r3
 8002294:	481e      	ldr	r0, [pc, #120]	@ (8002310 <I2Cx_MspInit+0x15c>)
 8002296:	f002 f84d 	bl	8004334 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800229a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800229e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	4619      	mov	r1, r3
 80022a6:	481a      	ldr	r0, [pc, #104]	@ (8002310 <I2Cx_MspInit+0x15c>)
 80022a8:	f002 f844 	bl	8004334 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80022ac:	4b16      	ldr	r3, [pc, #88]	@ (8002308 <I2Cx_MspInit+0x154>)
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	4a15      	ldr	r2, [pc, #84]	@ (8002308 <I2Cx_MspInit+0x154>)
 80022b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b8:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <I2Cx_MspInit+0x154>)
 80022ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80022c4:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <I2Cx_MspInit+0x154>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002308 <I2Cx_MspInit+0x154>)
 80022ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022ce:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80022d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <I2Cx_MspInit+0x154>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002308 <I2Cx_MspInit+0x154>)
 80022d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80022da:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	210f      	movs	r1, #15
 80022e0:	201f      	movs	r0, #31
 80022e2:	f001 fa88 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80022e6:	201f      	movs	r0, #31
 80022e8:	f001 faa1 	bl	800382e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80022ec:	2200      	movs	r2, #0
 80022ee:	210f      	movs	r1, #15
 80022f0:	2020      	movs	r0, #32
 80022f2:	f001 fa80 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80022f6:	2020      	movs	r0, #32
 80022f8:	f001 fa99 	bl	800382e <HAL_NVIC_EnableIRQ>
}
 80022fc:	bf00      	nop
 80022fe:	3730      	adds	r7, #48	@ 0x30
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000080 	.word	0x20000080
 8002308:	40023800 	.word	0x40023800
 800230c:	40021c00 	.word	0x40021c00
 8002310:	40020400 	.word	0x40020400

08002314 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f002 fde7 	bl	8004ef0 <HAL_I2C_GetState>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d125      	bne.n	8002374 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a14      	ldr	r2, [pc, #80]	@ (800237c <I2Cx_Init+0x68>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d103      	bne.n	8002338 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a13      	ldr	r2, [pc, #76]	@ (8002380 <I2Cx_Init+0x6c>)
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e002      	b.n	800233e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a12      	ldr	r2, [pc, #72]	@ (8002384 <I2Cx_Init+0x70>)
 800233c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a11      	ldr	r2, [pc, #68]	@ (8002388 <I2Cx_Init+0x74>)
 8002342:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff23 	bl	80021b4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f002 fab2 	bl	80048d8 <HAL_I2C_Init>
  }
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000080 	.word	0x20000080
 8002380:	40005c00 	.word	0x40005c00
 8002384:	40005400 	.word	0x40005400
 8002388:	40912732 	.word	0x40912732

0800238c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	@ 0x28
 8002390:	af04      	add	r7, sp, #16
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4603      	mov	r3, r0
 800239c:	72fb      	strb	r3, [r7, #11]
 800239e:	460b      	mov	r3, r1
 80023a0:	813b      	strh	r3, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80023aa:	7afb      	ldrb	r3, [r7, #11]
 80023ac:	b299      	uxth	r1, r3
 80023ae:	88f8      	ldrh	r0, [r7, #6]
 80023b0:	893a      	ldrh	r2, [r7, #8]
 80023b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023b6:	9302      	str	r3, [sp, #8]
 80023b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	4603      	mov	r3, r0
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f002 fc6e 	bl	8004ca4 <HAL_I2C_Mem_Read>
 80023c8:	4603      	mov	r3, r0
 80023ca:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d004      	beq.n	80023dc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80023d2:	7afb      	ldrb	r3, [r7, #11]
 80023d4:	4619      	mov	r1, r3
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f832 	bl	8002440 <I2Cx_Error>
  }
  return status;    
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b08a      	sub	sp, #40	@ 0x28
 80023ea:	af04      	add	r7, sp, #16
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	4608      	mov	r0, r1
 80023f0:	4611      	mov	r1, r2
 80023f2:	461a      	mov	r2, r3
 80023f4:	4603      	mov	r3, r0
 80023f6:	72fb      	strb	r3, [r7, #11]
 80023f8:	460b      	mov	r3, r1
 80023fa:	813b      	strh	r3, [r7, #8]
 80023fc:	4613      	mov	r3, r2
 80023fe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002404:	7afb      	ldrb	r3, [r7, #11]
 8002406:	b299      	uxth	r1, r3
 8002408:	88f8      	ldrh	r0, [r7, #6]
 800240a:	893a      	ldrh	r2, [r7, #8]
 800240c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002410:	9302      	str	r3, [sp, #8]
 8002412:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	4603      	mov	r3, r0
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f002 fb1b 	bl	8004a58 <HAL_I2C_Mem_Write>
 8002422:	4603      	mov	r3, r0
 8002424:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800242c:	7afb      	ldrb	r3, [r7, #11]
 800242e:	4619      	mov	r1, r3
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f805 	bl	8002440 <I2Cx_Error>
  }
  return status;
 8002436:	7dfb      	ldrb	r3, [r7, #23]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f002 fad3 	bl	80049f8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ff5e 	bl	8002314 <I2Cx_Init>
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002464:	4802      	ldr	r0, [pc, #8]	@ (8002470 <AUDIO_IO_Init+0x10>)
 8002466:	f7ff ff55 	bl	8002314 <I2Cx_Init>
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000080 	.word	0x20000080

08002474 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af02      	add	r7, sp, #8
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
 800248e:	460b      	mov	r3, r1
 8002490:	80bb      	strh	r3, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8002496:	887b      	ldrh	r3, [r7, #2]
 8002498:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800249a:	89fb      	ldrh	r3, [r7, #14]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	b29b      	uxth	r3, r3
 80024a0:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80024a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	b21a      	sxth	r2, r3
 80024aa:	887b      	ldrh	r3, [r7, #2]
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	4313      	orrs	r3, r2
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80024b6:	88ba      	ldrh	r2, [r7, #4]
 80024b8:	79f9      	ldrb	r1, [r7, #7]
 80024ba:	2302      	movs	r3, #2
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	1cbb      	adds	r3, r7, #2
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2302      	movs	r3, #2
 80024c4:	4803      	ldr	r0, [pc, #12]	@ (80024d4 <AUDIO_IO_Write+0x50>)
 80024c6:	f7ff ff8e 	bl	80023e6 <I2Cx_WriteMultiple>
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000080 	.word	0x20000080

080024d8 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af02      	add	r7, sp, #8
 80024de:	4603      	mov	r3, r0
 80024e0:	460a      	mov	r2, r1
 80024e2:	71fb      	strb	r3, [r7, #7]
 80024e4:	4613      	mov	r3, r2
 80024e6:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	81bb      	strh	r3, [r7, #12]
 80024ec:	2300      	movs	r3, #0
 80024ee:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80024f0:	88ba      	ldrh	r2, [r7, #4]
 80024f2:	79f9      	ldrb	r1, [r7, #7]
 80024f4:	2302      	movs	r3, #2
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2302      	movs	r3, #2
 8002500:	480a      	ldr	r0, [pc, #40]	@ (800252c <AUDIO_IO_Read+0x54>)
 8002502:	f7ff ff43 	bl	800238c <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8002506:	89bb      	ldrh	r3, [r7, #12]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 800250c:	89bb      	ldrh	r3, [r7, #12]
 800250e:	b21b      	sxth	r3, r3
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	b21a      	sxth	r2, r3
 8002514:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002518:	4313      	orrs	r3, r2
 800251a:	b21b      	sxth	r3, r3
 800251c:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 800251e:	89fb      	ldrh	r3, [r7, #14]
 8002520:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8002522:	89bb      	ldrh	r3, [r7, #12]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000080 	.word	0x20000080

08002530 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f001 f861 	bl	8003600 <HAL_Delay>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800254c:	4b31      	ldr	r3, [pc, #196]	@ (8002614 <BSP_LCD_Init+0xcc>)
 800254e:	2228      	movs	r2, #40	@ 0x28
 8002550:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002552:	4b30      	ldr	r3, [pc, #192]	@ (8002614 <BSP_LCD_Init+0xcc>)
 8002554:	2209      	movs	r2, #9
 8002556:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002558:	4b2e      	ldr	r3, [pc, #184]	@ (8002614 <BSP_LCD_Init+0xcc>)
 800255a:	2235      	movs	r2, #53	@ 0x35
 800255c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800255e:	4b2d      	ldr	r3, [pc, #180]	@ (8002614 <BSP_LCD_Init+0xcc>)
 8002560:	220b      	movs	r2, #11
 8002562:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002564:	4b2b      	ldr	r3, [pc, #172]	@ (8002614 <BSP_LCD_Init+0xcc>)
 8002566:	f240 121b 	movw	r2, #283	@ 0x11b
 800256a:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800256c:	4b29      	ldr	r3, [pc, #164]	@ (8002614 <BSP_LCD_Init+0xcc>)
 800256e:	f240 2215 	movw	r2, #533	@ 0x215
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002574:	4b27      	ldr	r3, [pc, #156]	@ (8002614 <BSP_LCD_Init+0xcc>)
 8002576:	f240 121d 	movw	r2, #285	@ 0x11d
 800257a:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800257c:	4b25      	ldr	r3, [pc, #148]	@ (8002614 <BSP_LCD_Init+0xcc>)
 800257e:	f240 2235 	movw	r2, #565	@ 0x235
 8002582:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002584:	2100      	movs	r1, #0
 8002586:	4823      	ldr	r0, [pc, #140]	@ (8002614 <BSP_LCD_Init+0xcc>)
 8002588:	f000 fcb4 	bl	8002ef4 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800258c:	4b21      	ldr	r3, [pc, #132]	@ (8002614 <BSP_LCD_Init+0xcc>)
 800258e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002592:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002594:	4b1f      	ldr	r3, [pc, #124]	@ (8002614 <BSP_LCD_Init+0xcc>)
 8002596:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800259a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800259c:	4b1d      	ldr	r3, [pc, #116]	@ (8002614 <BSP_LCD_Init+0xcc>)
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80025a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002614 <BSP_LCD_Init+0xcc>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80025ac:	4b19      	ldr	r3, [pc, #100]	@ (8002614 <BSP_LCD_Init+0xcc>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80025b4:	4b17      	ldr	r3, [pc, #92]	@ (8002614 <BSP_LCD_Init+0xcc>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80025ba:	4b16      	ldr	r3, [pc, #88]	@ (8002614 <BSP_LCD_Init+0xcc>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80025c0:	4b14      	ldr	r3, [pc, #80]	@ (8002614 <BSP_LCD_Init+0xcc>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80025c6:	4b13      	ldr	r3, [pc, #76]	@ (8002614 <BSP_LCD_Init+0xcc>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80025cc:	4b11      	ldr	r3, [pc, #68]	@ (8002614 <BSP_LCD_Init+0xcc>)
 80025ce:	4a12      	ldr	r2, [pc, #72]	@ (8002618 <BSP_LCD_Init+0xd0>)
 80025d0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80025d2:	4810      	ldr	r0, [pc, #64]	@ (8002614 <BSP_LCD_Init+0xcc>)
 80025d4:	f003 f874 	bl	80056c0 <HAL_LTDC_GetState>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d103      	bne.n	80025e6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80025de:	2100      	movs	r1, #0
 80025e0:	480c      	ldr	r0, [pc, #48]	@ (8002614 <BSP_LCD_Init+0xcc>)
 80025e2:	f000 fbad 	bl	8002d40 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80025e6:	480b      	ldr	r0, [pc, #44]	@ (8002614 <BSP_LCD_Init+0xcc>)
 80025e8:	f002 ff50 	bl	800548c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80025ec:	2201      	movs	r2, #1
 80025ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025f2:	480a      	ldr	r0, [pc, #40]	@ (800261c <BSP_LCD_Init+0xd4>)
 80025f4:	f002 f956 	bl	80048a4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80025f8:	2201      	movs	r2, #1
 80025fa:	2108      	movs	r1, #8
 80025fc:	4808      	ldr	r0, [pc, #32]	@ (8002620 <BSP_LCD_Init+0xd8>)
 80025fe:	f002 f951 	bl	80048a4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002602:	f000 fddb 	bl	80031bc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002606:	4807      	ldr	r0, [pc, #28]	@ (8002624 <BSP_LCD_Init+0xdc>)
 8002608:	f000 f8d8 	bl	80027bc <BSP_LCD_SetFont>
  
  return LCD_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200000d0 	.word	0x200000d0
 8002618:	40016800 	.word	0x40016800
 800261c:	40022000 	.word	0x40022000
 8002620:	40022800 	.word	0x40022800
 8002624:	20000034 	.word	0x20000034

08002628 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800262c:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <BSP_LCD_GetXSize+0x20>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a06      	ldr	r2, [pc, #24]	@ (800264c <BSP_LCD_GetXSize+0x24>)
 8002632:	2134      	movs	r1, #52	@ 0x34
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	3360      	adds	r3, #96	@ 0x60
 800263c:	681b      	ldr	r3, [r3, #0]
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	200001b8 	.word	0x200001b8
 800264c:	200000d0 	.word	0x200000d0

08002650 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002654:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <BSP_LCD_GetYSize+0x20>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a06      	ldr	r2, [pc, #24]	@ (8002674 <BSP_LCD_GetYSize+0x24>)
 800265a:	2134      	movs	r1, #52	@ 0x34
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	3364      	adds	r3, #100	@ 0x64
 8002664:	681b      	ldr	r3, [r3, #0]
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	200001b8 	.word	0x200001b8
 8002674:	200000d0 	.word	0x200000d0

08002678 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002678:	b580      	push	{r7, lr}
 800267a:	b090      	sub	sp, #64	@ 0x40
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002688:	f7ff ffce 	bl	8002628 <BSP_LCD_GetXSize>
 800268c:	4603      	mov	r3, r0
 800268e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002694:	f7ff ffdc 	bl	8002650 <BSP_LCD_GetYSize>
 8002698:	4603      	mov	r3, r0
 800269a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 80026a4:	23ff      	movs	r3, #255	@ 0xff
 80026a6:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80026be:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80026c4:	2307      	movs	r3, #7
 80026c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80026c8:	f7ff ffae 	bl	8002628 <BSP_LCD_GetXSize>
 80026cc:	4603      	mov	r3, r0
 80026ce:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80026d0:	f7ff ffbe 	bl	8002650 <BSP_LCD_GetYSize>
 80026d4:	4603      	mov	r3, r0
 80026d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80026d8:	88fa      	ldrh	r2, [r7, #6]
 80026da:	f107 030c 	add.w	r3, r7, #12
 80026de:	4619      	mov	r1, r3
 80026e0:	4812      	ldr	r0, [pc, #72]	@ (800272c <BSP_LCD_LayerDefaultInit+0xb4>)
 80026e2:	f002 ffaf 	bl	8005644 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80026e6:	88fa      	ldrh	r2, [r7, #6]
 80026e8:	4911      	ldr	r1, [pc, #68]	@ (8002730 <BSP_LCD_LayerDefaultInit+0xb8>)
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3304      	adds	r3, #4
 80026f6:	f04f 32ff 	mov.w	r2, #4294967295
 80026fa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80026fc:	88fa      	ldrh	r2, [r7, #6]
 80026fe:	490c      	ldr	r1, [pc, #48]	@ (8002730 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	3308      	adds	r3, #8
 800270c:	4a09      	ldr	r2, [pc, #36]	@ (8002734 <BSP_LCD_LayerDefaultInit+0xbc>)
 800270e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002710:	88fa      	ldrh	r2, [r7, #6]
 8002712:	4907      	ldr	r1, [pc, #28]	@ (8002730 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8002722:	601a      	str	r2, [r3, #0]
}
 8002724:	bf00      	nop
 8002726:	3740      	adds	r7, #64	@ 0x40
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	200000d0 	.word	0x200000d0
 8002730:	200001bc 	.word	0x200001bc
 8002734:	20000034 	.word	0x20000034

08002738 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002740:	4a04      	ldr	r2, [pc, #16]	@ (8002754 <BSP_LCD_SelectLayer+0x1c>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6013      	str	r3, [r2, #0]
} 
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	200001b8 	.word	0x200001b8

08002758 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002760:	4b07      	ldr	r3, [pc, #28]	@ (8002780 <BSP_LCD_SetTextColor+0x28>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4907      	ldr	r1, [pc, #28]	@ (8002784 <BSP_LCD_SetTextColor+0x2c>)
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	601a      	str	r2, [r3, #0]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	200001b8 	.word	0x200001b8
 8002784:	200001bc 	.word	0x200001bc

08002788 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002790:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <BSP_LCD_SetBackColor+0x2c>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4908      	ldr	r1, [pc, #32]	@ (80027b8 <BSP_LCD_SetBackColor+0x30>)
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	3304      	adds	r3, #4
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	601a      	str	r2, [r3, #0]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	200001b8 	.word	0x200001b8
 80027b8:	200001bc 	.word	0x200001bc

080027bc <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80027c4:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <BSP_LCD_SetFont+0x2c>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4908      	ldr	r1, [pc, #32]	@ (80027ec <BSP_LCD_SetFont+0x30>)
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3308      	adds	r3, #8
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	200001b8 	.word	0x200001b8
 80027ec:	200001bc 	.word	0x200001bc

080027f0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80027f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80027f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002838 <BSP_LCD_Clear+0x48>)
 80027fa:	681c      	ldr	r4, [r3, #0]
 80027fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <BSP_LCD_Clear+0x48>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0e      	ldr	r2, [pc, #56]	@ (800283c <BSP_LCD_Clear+0x4c>)
 8002802:	2134      	movs	r1, #52	@ 0x34
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	335c      	adds	r3, #92	@ 0x5c
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	461e      	mov	r6, r3
 8002810:	f7ff ff0a 	bl	8002628 <BSP_LCD_GetXSize>
 8002814:	4605      	mov	r5, r0
 8002816:	f7ff ff1b 	bl	8002650 <BSP_LCD_GetYSize>
 800281a:	4602      	mov	r2, r0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	2300      	movs	r3, #0
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	462a      	mov	r2, r5
 8002828:	4631      	mov	r1, r6
 800282a:	4620      	mov	r0, r4
 800282c:	f000 fc36 	bl	800309c <LL_FillBuffer>
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002838:	200001b8 	.word	0x200001b8
 800283c:	200000d0 	.word	0x200000d0

08002840 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	80fb      	strh	r3, [r7, #6]
 800284a:	460b      	mov	r3, r1
 800284c:	80bb      	strh	r3, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002852:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <BSP_LCD_DisplayChar+0x80>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	491b      	ldr	r1, [pc, #108]	@ (80028c4 <BSP_LCD_DisplayChar+0x84>)
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	3308      	adds	r3, #8
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6819      	ldr	r1, [r3, #0]
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800286e:	4b14      	ldr	r3, [pc, #80]	@ (80028c0 <BSP_LCD_DisplayChar+0x80>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4c14      	ldr	r4, [pc, #80]	@ (80028c4 <BSP_LCD_DisplayChar+0x84>)
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4423      	add	r3, r4
 800287e:	3308      	adds	r3, #8
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002884:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002888:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <BSP_LCD_DisplayChar+0x80>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4c0d      	ldr	r4, [pc, #52]	@ (80028c4 <BSP_LCD_DisplayChar+0x84>)
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4423      	add	r3, r4
 8002898:	3308      	adds	r3, #8
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	889b      	ldrh	r3, [r3, #4]
 800289e:	3307      	adds	r3, #7
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	da00      	bge.n	80028a6 <BSP_LCD_DisplayChar+0x66>
 80028a4:	3307      	adds	r3, #7
 80028a6:	10db      	asrs	r3, r3, #3
 80028a8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80028ac:	18ca      	adds	r2, r1, r3
 80028ae:	88b9      	ldrh	r1, [r7, #4]
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fb3a 	bl	8002f2c <DrawChar>
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd90      	pop	{r4, r7, pc}
 80028c0:	200001b8 	.word	0x200001b8
 80028c4:	200001bc 	.word	0x200001bc

080028c8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80028c8:	b5b0      	push	{r4, r5, r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60ba      	str	r2, [r7, #8]
 80028d0:	461a      	mov	r2, r3
 80028d2:	4603      	mov	r3, r0
 80028d4:	81fb      	strh	r3, [r7, #14]
 80028d6:	460b      	mov	r3, r1
 80028d8:	81bb      	strh	r3, [r7, #12]
 80028da:	4613      	mov	r3, r2
 80028dc:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80028de:	2301      	movs	r3, #1
 80028e0:	83fb      	strh	r3, [r7, #30]
 80028e2:	2300      	movs	r3, #0
 80028e4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80028f2:	e002      	b.n	80028fa <BSP_LCD_DisplayStringAt+0x32>
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	3301      	adds	r3, #1
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	617a      	str	r2, [r7, #20]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f6      	bne.n	80028f4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002906:	f7ff fe8f 	bl	8002628 <BSP_LCD_GetXSize>
 800290a:	4601      	mov	r1, r0
 800290c:	4b50      	ldr	r3, [pc, #320]	@ (8002a50 <BSP_LCD_DisplayStringAt+0x188>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4850      	ldr	r0, [pc, #320]	@ (8002a54 <BSP_LCD_DisplayStringAt+0x18c>)
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4403      	add	r3, r0
 800291c:	3308      	adds	r3, #8
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	889b      	ldrh	r3, [r3, #4]
 8002922:	fbb1 f3f3 	udiv	r3, r1, r3
 8002926:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	2b03      	cmp	r3, #3
 800292c:	d01c      	beq.n	8002968 <BSP_LCD_DisplayStringAt+0xa0>
 800292e:	2b03      	cmp	r3, #3
 8002930:	dc33      	bgt.n	800299a <BSP_LCD_DisplayStringAt+0xd2>
 8002932:	2b01      	cmp	r3, #1
 8002934:	d002      	beq.n	800293c <BSP_LCD_DisplayStringAt+0x74>
 8002936:	2b02      	cmp	r3, #2
 8002938:	d019      	beq.n	800296e <BSP_LCD_DisplayStringAt+0xa6>
 800293a:	e02e      	b.n	800299a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	1ad1      	subs	r1, r2, r3
 8002942:	4b43      	ldr	r3, [pc, #268]	@ (8002a50 <BSP_LCD_DisplayStringAt+0x188>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4843      	ldr	r0, [pc, #268]	@ (8002a54 <BSP_LCD_DisplayStringAt+0x18c>)
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4403      	add	r3, r0
 8002952:	3308      	adds	r3, #8
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	889b      	ldrh	r3, [r3, #4]
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	89fb      	ldrh	r3, [r7, #14]
 8002962:	4413      	add	r3, r2
 8002964:	83fb      	strh	r3, [r7, #30]
      break;
 8002966:	e01b      	b.n	80029a0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002968:	89fb      	ldrh	r3, [r7, #14]
 800296a:	83fb      	strh	r3, [r7, #30]
      break;
 800296c:	e018      	b.n	80029a0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	b299      	uxth	r1, r3
 8002976:	4b36      	ldr	r3, [pc, #216]	@ (8002a50 <BSP_LCD_DisplayStringAt+0x188>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4836      	ldr	r0, [pc, #216]	@ (8002a54 <BSP_LCD_DisplayStringAt+0x18c>)
 800297c:	4613      	mov	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4403      	add	r3, r0
 8002986:	3308      	adds	r3, #8
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	889b      	ldrh	r3, [r3, #4]
 800298c:	fb11 f303 	smulbb	r3, r1, r3
 8002990:	b29a      	uxth	r2, r3
 8002992:	89fb      	ldrh	r3, [r7, #14]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	83fb      	strh	r3, [r7, #30]
      break;
 8002998:	e002      	b.n	80029a0 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800299a:	89fb      	ldrh	r3, [r7, #14]
 800299c:	83fb      	strh	r3, [r7, #30]
      break;
 800299e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80029a0:	8bfb      	ldrh	r3, [r7, #30]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <BSP_LCD_DisplayStringAt+0xe6>
 80029a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	da1d      	bge.n	80029ea <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80029ae:	2301      	movs	r3, #1
 80029b0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80029b2:	e01a      	b.n	80029ea <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	781a      	ldrb	r2, [r3, #0]
 80029b8:	89b9      	ldrh	r1, [r7, #12]
 80029ba:	8bfb      	ldrh	r3, [r7, #30]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff3f 	bl	8002840 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80029c2:	4b23      	ldr	r3, [pc, #140]	@ (8002a50 <BSP_LCD_DisplayStringAt+0x188>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4923      	ldr	r1, [pc, #140]	@ (8002a54 <BSP_LCD_DisplayStringAt+0x18c>)
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	3308      	adds	r3, #8
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	889a      	ldrh	r2, [r3, #4]
 80029d8:	8bfb      	ldrh	r3, [r7, #30]
 80029da:	4413      	add	r3, r2
 80029dc:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	3301      	adds	r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
    i++;
 80029e4:	8bbb      	ldrh	r3, [r7, #28]
 80029e6:	3301      	adds	r3, #1
 80029e8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bf14      	ite	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	2300      	moveq	r3, #0
 80029f6:	b2dc      	uxtb	r4, r3
 80029f8:	f7ff fe16 	bl	8002628 <BSP_LCD_GetXSize>
 80029fc:	8bb9      	ldrh	r1, [r7, #28]
 80029fe:	4b14      	ldr	r3, [pc, #80]	@ (8002a50 <BSP_LCD_DisplayStringAt+0x188>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4d14      	ldr	r5, [pc, #80]	@ (8002a54 <BSP_LCD_DisplayStringAt+0x18c>)
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	442b      	add	r3, r5
 8002a0e:	3308      	adds	r3, #8
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	889b      	ldrh	r3, [r3, #4]
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	1ac3      	subs	r3, r0, r3
 8002a1a:	b299      	uxth	r1, r3
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a50 <BSP_LCD_DisplayStringAt+0x188>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	480c      	ldr	r0, [pc, #48]	@ (8002a54 <BSP_LCD_DisplayStringAt+0x18c>)
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4403      	add	r3, r0
 8002a2c:	3308      	adds	r3, #8
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	889b      	ldrh	r3, [r3, #4]
 8002a32:	4299      	cmp	r1, r3
 8002a34:	bf2c      	ite	cs
 8002a36:	2301      	movcs	r3, #1
 8002a38:	2300      	movcc	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	4023      	ands	r3, r4
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1b7      	bne.n	80029b4 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200001b8 	.word	0x200001b8
 8002a54:	200001bc 	.word	0x200001bc

08002a58 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002a58:	b5b0      	push	{r4, r5, r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	603a      	str	r2, [r7, #0]
 8002a62:	80fb      	strh	r3, [r7, #6]
 8002a64:	460b      	mov	r3, r1
 8002a66:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002a68:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae0 <BSP_LCD_DrawPixel+0x88>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae4 <BSP_LCD_DrawPixel+0x8c>)
 8002a6e:	2134      	movs	r1, #52	@ 0x34
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	3348      	adds	r3, #72	@ 0x48
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d116      	bne.n	8002aac <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002a7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ae0 <BSP_LCD_DrawPixel+0x88>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a18      	ldr	r2, [pc, #96]	@ (8002ae4 <BSP_LCD_DrawPixel+0x8c>)
 8002a84:	2134      	movs	r1, #52	@ 0x34
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	335c      	adds	r3, #92	@ 0x5c
 8002a8e:	681c      	ldr	r4, [r3, #0]
 8002a90:	88bd      	ldrh	r5, [r7, #4]
 8002a92:	f7ff fdc9 	bl	8002628 <BSP_LCD_GetXSize>
 8002a96:	4603      	mov	r3, r0
 8002a98:	fb03 f205 	mul.w	r2, r3, r5
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4423      	add	r3, r4
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	b292      	uxth	r2, r2
 8002aa8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002aaa:	e015      	b.n	8002ad8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002aac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae0 <BSP_LCD_DrawPixel+0x88>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8002ae4 <BSP_LCD_DrawPixel+0x8c>)
 8002ab2:	2134      	movs	r1, #52	@ 0x34
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	335c      	adds	r3, #92	@ 0x5c
 8002abc:	681c      	ldr	r4, [r3, #0]
 8002abe:	88bd      	ldrh	r5, [r7, #4]
 8002ac0:	f7ff fdb2 	bl	8002628 <BSP_LCD_GetXSize>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	fb03 f205 	mul.w	r2, r3, r5
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4423      	add	r3, r4
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bdb0      	pop	{r4, r5, r7, pc}
 8002ae0:	200001b8 	.word	0x200001b8
 8002ae4:	200000d0 	.word	0x200000d0

08002ae8 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b08b      	sub	sp, #44	@ 0x2c
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af8:	2300      	movs	r3, #0
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	2300      	movs	r3, #0
 8002b02:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	330a      	adds	r3, #10
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	330b      	adds	r3, #11
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	441a      	add	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	041b      	lsls	r3, r3, #16
 8002b22:	441a      	add	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	330d      	adds	r3, #13
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	061b      	lsls	r3, r3, #24
 8002b2c:	4413      	add	r3, r2
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3312      	adds	r3, #18
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3313      	adds	r3, #19
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	441a      	add	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3314      	adds	r3, #20
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	041b      	lsls	r3, r3, #16
 8002b4a:	441a      	add	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3315      	adds	r3, #21
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	061b      	lsls	r3, r3, #24
 8002b54:	4413      	add	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3316      	adds	r3, #22
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3317      	adds	r3, #23
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	441a      	add	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3318      	adds	r3, #24
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	041b      	lsls	r3, r3, #16
 8002b72:	441a      	add	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3319      	adds	r3, #25
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	061b      	lsls	r3, r3, #24
 8002b7c:	4413      	add	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	331c      	adds	r3, #28
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	331d      	adds	r3, #29
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	4413      	add	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002b94:	4b2b      	ldr	r3, [pc, #172]	@ (8002c44 <BSP_LCD_DrawBitmap+0x15c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a2b      	ldr	r2, [pc, #172]	@ (8002c48 <BSP_LCD_DrawBitmap+0x160>)
 8002b9a:	2134      	movs	r1, #52	@ 0x34
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	335c      	adds	r3, #92	@ 0x5c
 8002ba4:	681c      	ldr	r4, [r3, #0]
 8002ba6:	f7ff fd3f 	bl	8002628 <BSP_LCD_GetXSize>
 8002baa:	4602      	mov	r2, r0
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	fb03 f202 	mul.w	r2, r3, r2
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4423      	add	r3, r4
 8002bba:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	3b20      	subs	r3, #32
 8002bc0:	2b07      	cmp	r3, #7
 8002bc2:	d802      	bhi.n	8002bca <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	e008      	b.n	8002bdc <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	3b10      	subs	r3, #16
 8002bce:	2b07      	cmp	r3, #7
 8002bd0:	d802      	bhi.n	8002bd8 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	e001      	b.n	8002bdc <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	08d2      	lsrs	r2, r2, #3
 8002bea:	fb03 f202 	mul.w	r2, r3, r2
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	4413      	add	r3, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bfc:	e018      	b.n	8002c30 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8002bfe:	6a39      	ldr	r1, [r7, #32]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fa95 	bl	8003134 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8002c0a:	f7ff fd0d 	bl	8002628 <BSP_LCD_GetXSize>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	6a3a      	ldr	r2, [r7, #32]
 8002c14:	4413      	add	r3, r2
 8002c16:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	08db      	lsrs	r3, r3, #3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	425b      	negs	r3, r3
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4413      	add	r3, r2
 8002c28:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d3e2      	bcc.n	8002bfe <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	372c      	adds	r7, #44	@ 0x2c
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd90      	pop	{r4, r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200001b8 	.word	0x200001b8
 8002c48:	200000d0 	.word	0x200000d0

08002c4c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c50:	b086      	sub	sp, #24
 8002c52:	af02      	add	r7, sp, #8
 8002c54:	4604      	mov	r4, r0
 8002c56:	4608      	mov	r0, r1
 8002c58:	4611      	mov	r1, r2
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4623      	mov	r3, r4
 8002c5e:	80fb      	strh	r3, [r7, #6]
 8002c60:	4603      	mov	r3, r0
 8002c62:	80bb      	strh	r3, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	807b      	strh	r3, [r7, #2]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002c70:	4b30      	ldr	r3, [pc, #192]	@ (8002d34 <BSP_LCD_FillRect+0xe8>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4930      	ldr	r1, [pc, #192]	@ (8002d38 <BSP_LCD_FillRect+0xec>)
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fd68 	bl	8002758 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002c88:	4b2a      	ldr	r3, [pc, #168]	@ (8002d34 <BSP_LCD_FillRect+0xe8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a2b      	ldr	r2, [pc, #172]	@ (8002d3c <BSP_LCD_FillRect+0xf0>)
 8002c8e:	2134      	movs	r1, #52	@ 0x34
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	3348      	adds	r3, #72	@ 0x48
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d114      	bne.n	8002cc8 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002c9e:	4b25      	ldr	r3, [pc, #148]	@ (8002d34 <BSP_LCD_FillRect+0xe8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a26      	ldr	r2, [pc, #152]	@ (8002d3c <BSP_LCD_FillRect+0xf0>)
 8002ca4:	2134      	movs	r1, #52	@ 0x34
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	335c      	adds	r3, #92	@ 0x5c
 8002cae:	681c      	ldr	r4, [r3, #0]
 8002cb0:	f7ff fcba 	bl	8002628 <BSP_LCD_GetXSize>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	88bb      	ldrh	r3, [r7, #4]
 8002cb8:	fb03 f202 	mul.w	r2, r3, r2
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4423      	add	r3, r4
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	e013      	b.n	8002cf0 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d34 <BSP_LCD_FillRect+0xe8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8002d3c <BSP_LCD_FillRect+0xf0>)
 8002cce:	2134      	movs	r1, #52	@ 0x34
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	335c      	adds	r3, #92	@ 0x5c
 8002cd8:	681c      	ldr	r4, [r3, #0]
 8002cda:	f7ff fca5 	bl	8002628 <BSP_LCD_GetXSize>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	88bb      	ldrh	r3, [r7, #4]
 8002ce2:	fb03 f202 	mul.w	r2, r3, r2
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4423      	add	r3, r4
 8002cee:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002cf0:	4b10      	ldr	r3, [pc, #64]	@ (8002d34 <BSP_LCD_FillRect+0xe8>)
 8002cf2:	681c      	ldr	r4, [r3, #0]
 8002cf4:	68fd      	ldr	r5, [r7, #12]
 8002cf6:	887e      	ldrh	r6, [r7, #2]
 8002cf8:	f8b7 8000 	ldrh.w	r8, [r7]
 8002cfc:	f7ff fc94 	bl	8002628 <BSP_LCD_GetXSize>
 8002d00:	4602      	mov	r2, r0
 8002d02:	887b      	ldrh	r3, [r7, #2]
 8002d04:	1ad1      	subs	r1, r2, r3
 8002d06:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <BSP_LCD_FillRect+0xe8>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	480b      	ldr	r0, [pc, #44]	@ (8002d38 <BSP_LCD_FillRect+0xec>)
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4403      	add	r3, r0
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	9100      	str	r1, [sp, #0]
 8002d1c:	4643      	mov	r3, r8
 8002d1e:	4632      	mov	r2, r6
 8002d20:	4629      	mov	r1, r5
 8002d22:	4620      	mov	r0, r4
 8002d24:	f000 f9ba 	bl	800309c <LL_FillBuffer>
}
 8002d28:	bf00      	nop
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d32:	bf00      	nop
 8002d34:	200001b8 	.word	0x200001b8
 8002d38:	200001bc 	.word	0x200001bc
 8002d3c:	200000d0 	.word	0x200000d0

08002d40 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b090      	sub	sp, #64	@ 0x40
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002d4a:	4b64      	ldr	r3, [pc, #400]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	4a63      	ldr	r2, [pc, #396]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002d50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d56:	4b61      	ldr	r3, [pc, #388]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002d62:	4b5e      	ldr	r3, [pc, #376]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	4a5d      	ldr	r2, [pc, #372]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002d68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d7a:	4b58      	ldr	r3, [pc, #352]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7e:	4a57      	ldr	r2, [pc, #348]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002d80:	f043 0310 	orr.w	r3, r3, #16
 8002d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d86:	4b55      	ldr	r3, [pc, #340]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	623b      	str	r3, [r7, #32]
 8002d90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d92:	4b52      	ldr	r3, [pc, #328]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	4a51      	ldr	r2, [pc, #324]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d9e:	4b4f      	ldr	r3, [pc, #316]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002daa:	4b4c      	ldr	r3, [pc, #304]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	4a4b      	ldr	r2, [pc, #300]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db6:	4b49      	ldr	r3, [pc, #292]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dbe:	61bb      	str	r3, [r7, #24]
 8002dc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002dc2:	4b46      	ldr	r3, [pc, #280]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	4a45      	ldr	r2, [pc, #276]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002dc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dce:	4b43      	ldr	r3, [pc, #268]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002dda:	4b40      	ldr	r3, [pc, #256]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	4a3f      	ldr	r2, [pc, #252]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002de0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de6:	4b3d      	ldr	r3, [pc, #244]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002df2:	4b3a      	ldr	r3, [pc, #232]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	4a39      	ldr	r2, [pc, #228]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfe:	4b37      	ldr	r3, [pc, #220]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002e0a:	4b34      	ldr	r3, [pc, #208]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	4a33      	ldr	r2, [pc, #204]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002e10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e16:	4b31      	ldr	r3, [pc, #196]	@ (8002edc <BSP_LCD_MspInit+0x19c>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002e22:	2310      	movs	r3, #16
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002e32:	230e      	movs	r3, #14
 8002e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002e36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4828      	ldr	r0, [pc, #160]	@ (8002ee0 <BSP_LCD_MspInit+0x1a0>)
 8002e3e:	f001 fa79 	bl	8004334 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002e42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002e4c:	2309      	movs	r3, #9
 8002e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002e50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e54:	4619      	mov	r1, r3
 8002e56:	4823      	ldr	r0, [pc, #140]	@ (8002ee4 <BSP_LCD_MspInit+0x1a4>)
 8002e58:	f001 fa6c 	bl	8004334 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002e5c:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8002e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002e66:	230e      	movs	r3, #14
 8002e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002e6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e6e:	4619      	mov	r1, r3
 8002e70:	481d      	ldr	r0, [pc, #116]	@ (8002ee8 <BSP_LCD_MspInit+0x1a8>)
 8002e72:	f001 fa5f 	bl	8004334 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002e76:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002e80:	230e      	movs	r3, #14
 8002e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002e84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4818      	ldr	r0, [pc, #96]	@ (8002eec <BSP_LCD_MspInit+0x1ac>)
 8002e8c:	f001 fa52 	bl	8004334 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002e90:	23f7      	movs	r3, #247	@ 0xf7
 8002e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002e98:	230e      	movs	r3, #14
 8002e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002e9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4813      	ldr	r0, [pc, #76]	@ (8002ef0 <BSP_LCD_MspInit+0x1b0>)
 8002ea4:	f001 fa46 	bl	8004334 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002ea8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	480b      	ldr	r0, [pc, #44]	@ (8002ee8 <BSP_LCD_MspInit+0x1a8>)
 8002eba:	f001 fa3b 	bl	8004334 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002ec6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4808      	ldr	r0, [pc, #32]	@ (8002ef0 <BSP_LCD_MspInit+0x1b0>)
 8002ece:	f001 fa31 	bl	8004334 <HAL_GPIO_Init>
}
 8002ed2:	bf00      	nop
 8002ed4:	3740      	adds	r7, #64	@ 0x40
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40021800 	.word	0x40021800
 8002ee8:	40022000 	.word	0x40022000
 8002eec:	40022400 	.word	0x40022400
 8002ef0:	40022800 	.word	0x40022800

08002ef4 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002efe:	4b0a      	ldr	r3, [pc, #40]	@ (8002f28 <BSP_LCD_ClockConfig+0x34>)
 8002f00:	2208      	movs	r2, #8
 8002f02:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002f04:	4b08      	ldr	r3, [pc, #32]	@ (8002f28 <BSP_LCD_ClockConfig+0x34>)
 8002f06:	22c0      	movs	r2, #192	@ 0xc0
 8002f08:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002f0a:	4b07      	ldr	r3, [pc, #28]	@ (8002f28 <BSP_LCD_ClockConfig+0x34>)
 8002f0c:	2205      	movs	r2, #5
 8002f0e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002f10:	4b05      	ldr	r3, [pc, #20]	@ (8002f28 <BSP_LCD_ClockConfig+0x34>)
 8002f12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002f16:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002f18:	4803      	ldr	r0, [pc, #12]	@ (8002f28 <BSP_LCD_ClockConfig+0x34>)
 8002f1a:	f003 fa31 	bl	8006380 <HAL_RCCEx_PeriphCLKConfig>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	200001d4 	.word	0x200001d4

08002f2c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	603a      	str	r2, [r7, #0]
 8002f36:	80fb      	strh	r3, [r7, #6]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8002f44:	4b53      	ldr	r3, [pc, #332]	@ (8003094 <DrawChar+0x168>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4953      	ldr	r1, [pc, #332]	@ (8003098 <DrawChar+0x16c>)
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	3308      	adds	r3, #8
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	88db      	ldrh	r3, [r3, #6]
 8002f5a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002f5c:	4b4d      	ldr	r3, [pc, #308]	@ (8003094 <DrawChar+0x168>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	494d      	ldr	r1, [pc, #308]	@ (8003098 <DrawChar+0x16c>)
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	889b      	ldrh	r3, [r3, #4]
 8002f72:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002f74:	8a3b      	ldrh	r3, [r7, #16]
 8002f76:	3307      	adds	r3, #7
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	da00      	bge.n	8002f7e <DrawChar+0x52>
 8002f7c:	3307      	adds	r3, #7
 8002f7e:	10db      	asrs	r3, r3, #3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	8a3b      	ldrh	r3, [r7, #16]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
 8002f92:	e076      	b.n	8003082 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002f94:	8a3b      	ldrh	r3, [r7, #16]
 8002f96:	3307      	adds	r3, #7
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	da00      	bge.n	8002f9e <DrawChar+0x72>
 8002f9c:	3307      	adds	r3, #7
 8002f9e:	10db      	asrs	r3, r3, #3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fb02 f303 	mul.w	r3, r2, r3
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8002fae:	8a3b      	ldrh	r3, [r7, #16]
 8002fb0:	3307      	adds	r3, #7
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	da00      	bge.n	8002fb8 <DrawChar+0x8c>
 8002fb6:	3307      	adds	r3, #7
 8002fb8:	10db      	asrs	r3, r3, #3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d002      	beq.n	8002fc4 <DrawChar+0x98>
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d004      	beq.n	8002fcc <DrawChar+0xa0>
 8002fc2:	e00c      	b.n	8002fde <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	617b      	str	r3, [r7, #20]
      break;
 8002fca:	e016      	b.n	8002ffa <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	3201      	adds	r2, #1
 8002fd6:	7812      	ldrb	r2, [r2, #0]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
      break;
 8002fdc:	e00d      	b.n	8002ffa <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	041a      	lsls	r2, r3, #16
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	4313      	orrs	r3, r2
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	3202      	adds	r2, #2
 8002ff2:	7812      	ldrb	r2, [r2, #0]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
      break;
 8002ff8:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	e036      	b.n	800306e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003000:	8a3a      	ldrh	r2, [r7, #16]
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	1ad2      	subs	r2, r2, r3
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	4413      	add	r3, r2
 800300a:	3b01      	subs	r3, #1
 800300c:	2201      	movs	r2, #1
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	461a      	mov	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d012      	beq.n	8003042 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	b29a      	uxth	r2, r3
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	4413      	add	r3, r2
 8003024:	b298      	uxth	r0, r3
 8003026:	4b1b      	ldr	r3, [pc, #108]	@ (8003094 <DrawChar+0x168>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	491b      	ldr	r1, [pc, #108]	@ (8003098 <DrawChar+0x16c>)
 800302c:	4613      	mov	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	88bb      	ldrh	r3, [r7, #4]
 800303a:	4619      	mov	r1, r3
 800303c:	f7ff fd0c 	bl	8002a58 <BSP_LCD_DrawPixel>
 8003040:	e012      	b.n	8003068 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	b29a      	uxth	r2, r3
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	4413      	add	r3, r2
 800304a:	b298      	uxth	r0, r3
 800304c:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <DrawChar+0x168>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4911      	ldr	r1, [pc, #68]	@ (8003098 <DrawChar+0x16c>)
 8003052:	4613      	mov	r3, r2
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	3304      	adds	r3, #4
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	88bb      	ldrh	r3, [r7, #4]
 8003062:	4619      	mov	r1, r3
 8003064:	f7ff fcf8 	bl	8002a58 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	3301      	adds	r3, #1
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	8a3b      	ldrh	r3, [r7, #16]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	429a      	cmp	r2, r3
 8003074:	d3c4      	bcc.n	8003000 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003076:	88bb      	ldrh	r3, [r7, #4]
 8003078:	3301      	adds	r3, #1
 800307a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	3301      	adds	r3, #1
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	8a7b      	ldrh	r3, [r7, #18]
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	429a      	cmp	r2, r3
 8003088:	d384      	bcc.n	8002f94 <DrawChar+0x68>
  }
}
 800308a:	bf00      	nop
 800308c:	bf00      	nop
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	200001b8 	.word	0x200001b8
 8003098:	200001bc 	.word	0x200001bc

0800309c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80030aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003124 <LL_FillBuffer+0x88>)
 80030ac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80030b0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80030b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003128 <LL_FillBuffer+0x8c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1d      	ldr	r2, [pc, #116]	@ (800312c <LL_FillBuffer+0x90>)
 80030b8:	2134      	movs	r1, #52	@ 0x34
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	3348      	adds	r3, #72	@ 0x48
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d103      	bne.n	80030d0 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80030c8:	4b16      	ldr	r3, [pc, #88]	@ (8003124 <LL_FillBuffer+0x88>)
 80030ca:	2202      	movs	r2, #2
 80030cc:	609a      	str	r2, [r3, #8]
 80030ce:	e002      	b.n	80030d6 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80030d0:	4b14      	ldr	r3, [pc, #80]	@ (8003124 <LL_FillBuffer+0x88>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80030d6:	4a13      	ldr	r2, [pc, #76]	@ (8003124 <LL_FillBuffer+0x88>)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80030dc:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <LL_FillBuffer+0x88>)
 80030de:	4a14      	ldr	r2, [pc, #80]	@ (8003130 <LL_FillBuffer+0x94>)
 80030e0:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80030e2:	4810      	ldr	r0, [pc, #64]	@ (8003124 <LL_FillBuffer+0x88>)
 80030e4:	f000 fd7c 	bl	8003be0 <HAL_DMA2D_Init>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d115      	bne.n	800311a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80030ee:	68f9      	ldr	r1, [r7, #12]
 80030f0:	480c      	ldr	r0, [pc, #48]	@ (8003124 <LL_FillBuffer+0x88>)
 80030f2:	f000 ffe3 	bl	80040bc <HAL_DMA2D_ConfigLayer>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10e      	bne.n	800311a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69f9      	ldr	r1, [r7, #28]
 8003106:	4807      	ldr	r0, [pc, #28]	@ (8003124 <LL_FillBuffer+0x88>)
 8003108:	f000 fdb4 	bl	8003c74 <HAL_DMA2D_Start>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d103      	bne.n	800311a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003112:	210a      	movs	r1, #10
 8003114:	4803      	ldr	r0, [pc, #12]	@ (8003124 <LL_FillBuffer+0x88>)
 8003116:	f000 fdd8 	bl	8003cca <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000178 	.word	0x20000178
 8003128:	200001b8 	.word	0x200001b8
 800312c:	200000d0 	.word	0x200000d0
 8003130:	4002b000 	.word	0x4002b000

08003134 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8003142:	4b1c      	ldr	r3, [pc, #112]	@ (80031b4 <LL_ConvertLineToARGB8888+0x80>)
 8003144:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003148:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800314a:	4b1a      	ldr	r3, [pc, #104]	@ (80031b4 <LL_ConvertLineToARGB8888+0x80>)
 800314c:	2200      	movs	r2, #0
 800314e:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8003150:	4b18      	ldr	r3, [pc, #96]	@ (80031b4 <LL_ConvertLineToARGB8888+0x80>)
 8003152:	2200      	movs	r2, #0
 8003154:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003156:	4b17      	ldr	r3, [pc, #92]	@ (80031b4 <LL_ConvertLineToARGB8888+0x80>)
 8003158:	2200      	movs	r2, #0
 800315a:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 800315c:	4b15      	ldr	r3, [pc, #84]	@ (80031b4 <LL_ConvertLineToARGB8888+0x80>)
 800315e:	22ff      	movs	r2, #255	@ 0xff
 8003160:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8003162:	4a14      	ldr	r2, [pc, #80]	@ (80031b4 <LL_ConvertLineToARGB8888+0x80>)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8003168:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <LL_ConvertLineToARGB8888+0x80>)
 800316a:	2200      	movs	r2, #0
 800316c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 800316e:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <LL_ConvertLineToARGB8888+0x80>)
 8003170:	4a11      	ldr	r2, [pc, #68]	@ (80031b8 <LL_ConvertLineToARGB8888+0x84>)
 8003172:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003174:	480f      	ldr	r0, [pc, #60]	@ (80031b4 <LL_ConvertLineToARGB8888+0x80>)
 8003176:	f000 fd33 	bl	8003be0 <HAL_DMA2D_Init>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d115      	bne.n	80031ac <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8003180:	2101      	movs	r1, #1
 8003182:	480c      	ldr	r0, [pc, #48]	@ (80031b4 <LL_ConvertLineToARGB8888+0x80>)
 8003184:	f000 ff9a 	bl	80040bc <HAL_DMA2D_ConfigLayer>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10e      	bne.n	80031ac <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800318e:	68f9      	ldr	r1, [r7, #12]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	2301      	movs	r3, #1
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4806      	ldr	r0, [pc, #24]	@ (80031b4 <LL_ConvertLineToARGB8888+0x80>)
 800319a:	f000 fd6b 	bl	8003c74 <HAL_DMA2D_Start>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d103      	bne.n	80031ac <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80031a4:	210a      	movs	r1, #10
 80031a6:	4803      	ldr	r0, [pc, #12]	@ (80031b4 <LL_ConvertLineToARGB8888+0x80>)
 80031a8:	f000 fd8f 	bl	8003cca <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20000178 	.word	0x20000178
 80031b8:	4002b000 	.word	0x4002b000

080031bc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80031c0:	4b29      	ldr	r3, [pc, #164]	@ (8003268 <BSP_SDRAM_Init+0xac>)
 80031c2:	4a2a      	ldr	r2, [pc, #168]	@ (800326c <BSP_SDRAM_Init+0xb0>)
 80031c4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80031c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003270 <BSP_SDRAM_Init+0xb4>)
 80031c8:	2202      	movs	r2, #2
 80031ca:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80031cc:	4b28      	ldr	r3, [pc, #160]	@ (8003270 <BSP_SDRAM_Init+0xb4>)
 80031ce:	2207      	movs	r2, #7
 80031d0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80031d2:	4b27      	ldr	r3, [pc, #156]	@ (8003270 <BSP_SDRAM_Init+0xb4>)
 80031d4:	2204      	movs	r2, #4
 80031d6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80031d8:	4b25      	ldr	r3, [pc, #148]	@ (8003270 <BSP_SDRAM_Init+0xb4>)
 80031da:	2207      	movs	r2, #7
 80031dc:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80031de:	4b24      	ldr	r3, [pc, #144]	@ (8003270 <BSP_SDRAM_Init+0xb4>)
 80031e0:	2202      	movs	r2, #2
 80031e2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80031e4:	4b22      	ldr	r3, [pc, #136]	@ (8003270 <BSP_SDRAM_Init+0xb4>)
 80031e6:	2202      	movs	r2, #2
 80031e8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80031ea:	4b21      	ldr	r3, [pc, #132]	@ (8003270 <BSP_SDRAM_Init+0xb4>)
 80031ec:	2202      	movs	r2, #2
 80031ee:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80031f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003268 <BSP_SDRAM_Init+0xac>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80031f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003268 <BSP_SDRAM_Init+0xac>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80031fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003268 <BSP_SDRAM_Init+0xac>)
 80031fe:	2204      	movs	r2, #4
 8003200:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003202:	4b19      	ldr	r3, [pc, #100]	@ (8003268 <BSP_SDRAM_Init+0xac>)
 8003204:	2210      	movs	r2, #16
 8003206:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003208:	4b17      	ldr	r3, [pc, #92]	@ (8003268 <BSP_SDRAM_Init+0xac>)
 800320a:	2240      	movs	r2, #64	@ 0x40
 800320c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800320e:	4b16      	ldr	r3, [pc, #88]	@ (8003268 <BSP_SDRAM_Init+0xac>)
 8003210:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003214:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003216:	4b14      	ldr	r3, [pc, #80]	@ (8003268 <BSP_SDRAM_Init+0xac>)
 8003218:	2200      	movs	r2, #0
 800321a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800321c:	4b12      	ldr	r3, [pc, #72]	@ (8003268 <BSP_SDRAM_Init+0xac>)
 800321e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003222:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003224:	4b10      	ldr	r3, [pc, #64]	@ (8003268 <BSP_SDRAM_Init+0xac>)
 8003226:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800322a:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800322c:	4b0e      	ldr	r3, [pc, #56]	@ (8003268 <BSP_SDRAM_Init+0xac>)
 800322e:	2200      	movs	r2, #0
 8003230:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003232:	2100      	movs	r1, #0
 8003234:	480c      	ldr	r0, [pc, #48]	@ (8003268 <BSP_SDRAM_Init+0xac>)
 8003236:	f000 f87f 	bl	8003338 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800323a:	490d      	ldr	r1, [pc, #52]	@ (8003270 <BSP_SDRAM_Init+0xb4>)
 800323c:	480a      	ldr	r0, [pc, #40]	@ (8003268 <BSP_SDRAM_Init+0xac>)
 800323e:	f004 f963 	bl	8007508 <HAL_SDRAM_Init>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003248:	4b0a      	ldr	r3, [pc, #40]	@ (8003274 <BSP_SDRAM_Init+0xb8>)
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	e002      	b.n	8003256 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003250:	4b08      	ldr	r3, [pc, #32]	@ (8003274 <BSP_SDRAM_Init+0xb8>)
 8003252:	2200      	movs	r2, #0
 8003254:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003256:	f240 6003 	movw	r0, #1539	@ 0x603
 800325a:	f000 f80d 	bl	8003278 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800325e:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <BSP_SDRAM_Init+0xb8>)
 8003260:	781b      	ldrb	r3, [r3, #0]
}
 8003262:	4618      	mov	r0, r3
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000258 	.word	0x20000258
 800326c:	a0000140 	.word	0xa0000140
 8003270:	2000028c 	.word	0x2000028c
 8003274:	2000004c 	.word	0x2000004c

08003278 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003284:	4b2a      	ldr	r3, [pc, #168]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800328a:	4b29      	ldr	r3, [pc, #164]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800328c:	2210      	movs	r2, #16
 800328e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003290:	4b27      	ldr	r3, [pc, #156]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003292:	2201      	movs	r2, #1
 8003294:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003296:	4b26      	ldr	r3, [pc, #152]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003298:	2200      	movs	r2, #0
 800329a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800329c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032a0:	4923      	ldr	r1, [pc, #140]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032a2:	4824      	ldr	r0, [pc, #144]	@ (8003334 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80032a4:	f004 f964 	bl	8007570 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80032a8:	2001      	movs	r0, #1
 80032aa:	f000 f9a9 	bl	8003600 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80032ae:	4b20      	ldr	r3, [pc, #128]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032b0:	2202      	movs	r2, #2
 80032b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80032b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032b6:	2210      	movs	r2, #16
 80032b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80032ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032bc:	2201      	movs	r2, #1
 80032be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80032c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80032c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032ca:	4919      	ldr	r1, [pc, #100]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032cc:	4819      	ldr	r0, [pc, #100]	@ (8003334 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80032ce:	f004 f94f 	bl	8007570 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80032d2:	4b17      	ldr	r3, [pc, #92]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032d4:	2203      	movs	r2, #3
 80032d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80032d8:	4b15      	ldr	r3, [pc, #84]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032da:	2210      	movs	r2, #16
 80032dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80032de:	4b14      	ldr	r3, [pc, #80]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032e0:	2208      	movs	r2, #8
 80032e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80032e4:	4b12      	ldr	r3, [pc, #72]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80032ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032ee:	4910      	ldr	r1, [pc, #64]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032f0:	4810      	ldr	r0, [pc, #64]	@ (8003334 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80032f2:	f004 f93d 	bl	8007570 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80032f6:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80032fa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80032fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032fe:	2204      	movs	r2, #4
 8003300:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003302:	4b0b      	ldr	r3, [pc, #44]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003304:	2210      	movs	r2, #16
 8003306:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003308:	4b09      	ldr	r3, [pc, #36]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800330a:	2201      	movs	r2, #1
 800330c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a07      	ldr	r2, [pc, #28]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003312:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003314:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003318:	4905      	ldr	r1, [pc, #20]	@ (8003330 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800331a:	4806      	ldr	r0, [pc, #24]	@ (8003334 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800331c:	f004 f928 	bl	8007570 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4804      	ldr	r0, [pc, #16]	@ (8003334 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003324:	f004 f94f 	bl	80075c6 <HAL_SDRAM_ProgramRefreshRate>
}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	200002a8 	.word	0x200002a8
 8003334:	20000258 	.word	0x20000258

08003338 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003338:	b580      	push	{r7, lr}
 800333a:	b090      	sub	sp, #64	@ 0x40
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003342:	4b70      	ldr	r3, [pc, #448]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 8003344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003346:	4a6f      	ldr	r2, [pc, #444]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6393      	str	r3, [r2, #56]	@ 0x38
 800334e:	4b6d      	ldr	r3, [pc, #436]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 8003350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800335a:	4b6a      	ldr	r3, [pc, #424]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	4a69      	ldr	r2, [pc, #420]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 8003360:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003364:	6313      	str	r3, [r2, #48]	@ 0x30
 8003366:	4b67      	ldr	r3, [pc, #412]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003372:	4b64      	ldr	r3, [pc, #400]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	4a63      	ldr	r2, [pc, #396]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	6313      	str	r3, [r2, #48]	@ 0x30
 800337e:	4b61      	ldr	r3, [pc, #388]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	623b      	str	r3, [r7, #32]
 8003388:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800338a:	4b5e      	ldr	r3, [pc, #376]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	4a5d      	ldr	r2, [pc, #372]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 8003390:	f043 0308 	orr.w	r3, r3, #8
 8003394:	6313      	str	r3, [r2, #48]	@ 0x30
 8003396:	4b5b      	ldr	r3, [pc, #364]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033a2:	4b58      	ldr	r3, [pc, #352]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	4a57      	ldr	r2, [pc, #348]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 80033a8:	f043 0310 	orr.w	r3, r3, #16
 80033ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ae:	4b55      	ldr	r3, [pc, #340]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80033ba:	4b52      	ldr	r3, [pc, #328]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033be:	4a51      	ldr	r2, [pc, #324]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 80033c0:	f043 0320 	orr.w	r3, r3, #32
 80033c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033c6:	4b4f      	ldr	r3, [pc, #316]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	4a4b      	ldr	r2, [pc, #300]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 80033d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033de:	4b49      	ldr	r3, [pc, #292]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033ea:	4b46      	ldr	r3, [pc, #280]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	4a45      	ldr	r2, [pc, #276]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 80033f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033f6:	4b43      	ldr	r3, [pc, #268]	@ (8003504 <BSP_SDRAM_MspInit+0x1cc>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003402:	2302      	movs	r3, #2
 8003404:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003406:	2301      	movs	r3, #1
 8003408:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800340a:	2302      	movs	r3, #2
 800340c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800340e:	230c      	movs	r3, #12
 8003410:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003412:	2308      	movs	r3, #8
 8003414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003416:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800341a:	4619      	mov	r1, r3
 800341c:	483a      	ldr	r0, [pc, #232]	@ (8003508 <BSP_SDRAM_MspInit+0x1d0>)
 800341e:	f000 ff89 	bl	8004334 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003422:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003426:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003428:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800342c:	4619      	mov	r1, r3
 800342e:	4837      	ldr	r0, [pc, #220]	@ (800350c <BSP_SDRAM_MspInit+0x1d4>)
 8003430:	f000 ff80 	bl	8004334 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003434:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003438:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800343a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800343e:	4619      	mov	r1, r3
 8003440:	4833      	ldr	r0, [pc, #204]	@ (8003510 <BSP_SDRAM_MspInit+0x1d8>)
 8003442:	f000 ff77 	bl	8004334 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003446:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800344c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003450:	4619      	mov	r1, r3
 8003452:	4830      	ldr	r0, [pc, #192]	@ (8003514 <BSP_SDRAM_MspInit+0x1dc>)
 8003454:	f000 ff6e 	bl	8004334 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003458:	f248 1333 	movw	r3, #33075	@ 0x8133
 800345c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800345e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003462:	4619      	mov	r1, r3
 8003464:	482c      	ldr	r0, [pc, #176]	@ (8003518 <BSP_SDRAM_MspInit+0x1e0>)
 8003466:	f000 ff65 	bl	8004334 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800346a:	2328      	movs	r3, #40	@ 0x28
 800346c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800346e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003472:	4619      	mov	r1, r3
 8003474:	4829      	ldr	r0, [pc, #164]	@ (800351c <BSP_SDRAM_MspInit+0x1e4>)
 8003476:	f000 ff5d 	bl	8004334 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800347a:	4b29      	ldr	r3, [pc, #164]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 800347c:	2200      	movs	r2, #0
 800347e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003480:	4b27      	ldr	r3, [pc, #156]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 8003482:	2280      	movs	r2, #128	@ 0x80
 8003484:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003486:	4b26      	ldr	r3, [pc, #152]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 8003488:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800348c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800348e:	4b24      	ldr	r3, [pc, #144]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 8003490:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003494:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003496:	4b22      	ldr	r3, [pc, #136]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 8003498:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800349c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800349e:	4b20      	ldr	r3, [pc, #128]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 80034a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034a4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80034a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80034ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 80034ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034b2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80034b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80034ba:	4b19      	ldr	r3, [pc, #100]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 80034bc:	2203      	movs	r2, #3
 80034be:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80034c0:	4b17      	ldr	r3, [pc, #92]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80034c6:	4b16      	ldr	r3, [pc, #88]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80034cc:	4b14      	ldr	r3, [pc, #80]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 80034ce:	4a15      	ldr	r2, [pc, #84]	@ (8003524 <BSP_SDRAM_MspInit+0x1ec>)
 80034d0:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a12      	ldr	r2, [pc, #72]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 80034d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80034d8:	4a11      	ldr	r2, [pc, #68]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80034de:	4810      	ldr	r0, [pc, #64]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 80034e0:	f000 fa6e 	bl	80039c0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80034e4:	480e      	ldr	r0, [pc, #56]	@ (8003520 <BSP_SDRAM_MspInit+0x1e8>)
 80034e6:	f000 f9bd 	bl	8003864 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80034ea:	2200      	movs	r2, #0
 80034ec:	210f      	movs	r1, #15
 80034ee:	2038      	movs	r0, #56	@ 0x38
 80034f0:	f000 f981 	bl	80037f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80034f4:	2038      	movs	r0, #56	@ 0x38
 80034f6:	f000 f99a 	bl	800382e <HAL_NVIC_EnableIRQ>
}
 80034fa:	bf00      	nop
 80034fc:	3740      	adds	r7, #64	@ 0x40
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	40020800 	.word	0x40020800
 800350c:	40020c00 	.word	0x40020c00
 8003510:	40021000 	.word	0x40021000
 8003514:	40021400 	.word	0x40021400
 8003518:	40021800 	.word	0x40021800
 800351c:	40021c00 	.word	0x40021c00
 8003520:	200002b8 	.word	0x200002b8
 8003524:	40026410 	.word	0x40026410

08003528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800352c:	4b0b      	ldr	r3, [pc, #44]	@ (800355c <HAL_Init+0x34>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a0a      	ldr	r2, [pc, #40]	@ (800355c <HAL_Init+0x34>)
 8003532:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003536:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003538:	4b08      	ldr	r3, [pc, #32]	@ (800355c <HAL_Init+0x34>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a07      	ldr	r2, [pc, #28]	@ (800355c <HAL_Init+0x34>)
 800353e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003544:	2003      	movs	r0, #3
 8003546:	f000 f94b 	bl	80037e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800354a:	200f      	movs	r0, #15
 800354c:	f000 f808 	bl	8003560 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003550:	f006 fe44 	bl	800a1dc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023c00 	.word	0x40023c00

08003560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003568:	4b12      	ldr	r3, [pc, #72]	@ (80035b4 <HAL_InitTick+0x54>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <HAL_InitTick+0x58>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	4619      	mov	r1, r3
 8003572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003576:	fbb3 f3f1 	udiv	r3, r3, r1
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f963 	bl	800384a <HAL_SYSTICK_Config>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e00e      	b.n	80035ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b0f      	cmp	r3, #15
 8003592:	d80a      	bhi.n	80035aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003594:	2200      	movs	r2, #0
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	f000 f92b 	bl	80037f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035a0:	4a06      	ldr	r2, [pc, #24]	@ (80035bc <HAL_InitTick+0x5c>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e000      	b.n	80035ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000058 	.word	0x20000058
 80035b8:	20000054 	.word	0x20000054
 80035bc:	20000050 	.word	0x20000050

080035c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035c4:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <HAL_IncTick+0x20>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <HAL_IncTick+0x24>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4413      	add	r3, r2
 80035d0:	4a04      	ldr	r2, [pc, #16]	@ (80035e4 <HAL_IncTick+0x24>)
 80035d2:	6013      	str	r3, [r2, #0]
}
 80035d4:	bf00      	nop
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000054 	.word	0x20000054
 80035e4:	20000318 	.word	0x20000318

080035e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return uwTick;
 80035ec:	4b03      	ldr	r3, [pc, #12]	@ (80035fc <HAL_GetTick+0x14>)
 80035ee:	681b      	ldr	r3, [r3, #0]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	20000318 	.word	0x20000318

08003600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003608:	f7ff ffee 	bl	80035e8 <HAL_GetTick>
 800360c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d005      	beq.n	8003626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800361a:	4b0a      	ldr	r3, [pc, #40]	@ (8003644 <HAL_Delay+0x44>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4413      	add	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003626:	bf00      	nop
 8003628:	f7ff ffde 	bl	80035e8 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	429a      	cmp	r2, r3
 8003636:	d8f7      	bhi.n	8003628 <HAL_Delay+0x28>
  {
  }
}
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20000054 	.word	0x20000054

08003648 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003658:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <NVIC_SetPriorityGrouping+0x40>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003664:	4013      	ands	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003670:	4b06      	ldr	r3, [pc, #24]	@ (800368c <NVIC_SetPriorityGrouping+0x44>)
 8003672:	4313      	orrs	r3, r2
 8003674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003676:	4a04      	ldr	r2, [pc, #16]	@ (8003688 <NVIC_SetPriorityGrouping+0x40>)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	60d3      	str	r3, [r2, #12]
}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	e000ed00 	.word	0xe000ed00
 800368c:	05fa0000 	.word	0x05fa0000

08003690 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003694:	4b04      	ldr	r3, [pc, #16]	@ (80036a8 <NVIC_GetPriorityGrouping+0x18>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	0a1b      	lsrs	r3, r3, #8
 800369a:	f003 0307 	and.w	r3, r3, #7
}
 800369e:	4618      	mov	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	f003 021f 	and.w	r2, r3, #31
 80036bc:	4907      	ldr	r1, [pc, #28]	@ (80036dc <NVIC_EnableIRQ+0x30>)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	2001      	movs	r0, #1
 80036c6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000e100 	.word	0xe000e100

080036e0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	6039      	str	r1, [r7, #0]
 80036ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80036ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	da0b      	bge.n	800370c <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	490c      	ldr	r1, [pc, #48]	@ (800372c <NVIC_SetPriority+0x4c>)
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	3b04      	subs	r3, #4
 8003702:	0112      	lsls	r2, r2, #4
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	440b      	add	r3, r1
 8003708:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800370a:	e009      	b.n	8003720 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	4907      	ldr	r1, [pc, #28]	@ (8003730 <NVIC_SetPriority+0x50>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	0112      	lsls	r2, r2, #4
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	440b      	add	r3, r1
 800371c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000ed00 	.word	0xe000ed00
 8003730:	e000e100 	.word	0xe000e100

08003734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	@ 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f1c3 0307 	rsb	r3, r3, #7
 800374e:	2b04      	cmp	r3, #4
 8003750:	bf28      	it	cs
 8003752:	2304      	movcs	r3, #4
 8003754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	3304      	adds	r3, #4
 800375a:	2b06      	cmp	r3, #6
 800375c:	d902      	bls.n	8003764 <NVIC_EncodePriority+0x30>
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3b03      	subs	r3, #3
 8003762:	e000      	b.n	8003766 <NVIC_EncodePriority+0x32>
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003768:	f04f 32ff 	mov.w	r2, #4294967295
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43da      	mvns	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	401a      	ands	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800377c:	f04f 31ff 	mov.w	r1, #4294967295
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	fa01 f303 	lsl.w	r3, r1, r3
 8003786:	43d9      	mvns	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800378c:	4313      	orrs	r3, r2
         );
}
 800378e:	4618      	mov	r0, r3
 8003790:	3724      	adds	r7, #36	@ 0x24
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037ac:	d301      	bcc.n	80037b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ae:	2301      	movs	r3, #1
 80037b0:	e00f      	b.n	80037d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b2:	4a0a      	ldr	r2, [pc, #40]	@ (80037dc <SysTick_Config+0x40>)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ba:	210f      	movs	r1, #15
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
 80037c0:	f7ff ff8e 	bl	80036e0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c4:	4b05      	ldr	r3, [pc, #20]	@ (80037dc <SysTick_Config+0x40>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ca:	4b04      	ldr	r3, [pc, #16]	@ (80037dc <SysTick_Config+0x40>)
 80037cc:	2207      	movs	r2, #7
 80037ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	e000e010 	.word	0xe000e010

080037e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff ff2d 	bl	8003648 <NVIC_SetPriorityGrouping>
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b086      	sub	sp, #24
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	4603      	mov	r3, r0
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	607a      	str	r2, [r7, #4]
 8003802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003808:	f7ff ff42 	bl	8003690 <NVIC_GetPriorityGrouping>
 800380c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68b9      	ldr	r1, [r7, #8]
 8003812:	6978      	ldr	r0, [r7, #20]
 8003814:	f7ff ff8e 	bl	8003734 <NVIC_EncodePriority>
 8003818:	4602      	mov	r2, r0
 800381a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff ff5d 	bl	80036e0 <NVIC_SetPriority>
}
 8003826:	bf00      	nop
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	4603      	mov	r3, r0
 8003836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff35 	bl	80036ac <NVIC_EnableIRQ>
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ffa2 	bl	800379c <SysTick_Config>
 8003858:	4603      	mov	r3, r0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003870:	f7ff feba 	bl	80035e8 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e099      	b.n	80039b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a0:	e00f      	b.n	80038c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038a2:	f7ff fea1 	bl	80035e8 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b05      	cmp	r3, #5
 80038ae:	d908      	bls.n	80038c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2203      	movs	r2, #3
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e078      	b.n	80039b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e8      	bne.n	80038a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4b38      	ldr	r3, [pc, #224]	@ (80039bc <HAL_DMA_Init+0x158>)
 80038dc:	4013      	ands	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003906:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	2b04      	cmp	r3, #4
 800391a:	d107      	bne.n	800392c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003924:	4313      	orrs	r3, r2
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f023 0307 	bic.w	r3, r3, #7
 8003942:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	2b04      	cmp	r3, #4
 8003954:	d117      	bne.n	8003986 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00e      	beq.n	8003986 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f8bd 	bl	8003ae8 <DMA_CheckFifoParam>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2240      	movs	r2, #64	@ 0x40
 8003978:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003982:	2301      	movs	r3, #1
 8003984:	e016      	b.n	80039b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f874 	bl	8003a7c <DMA_CalcBaseAndBitshift>
 8003994:	4603      	mov	r3, r0
 8003996:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399c:	223f      	movs	r2, #63	@ 0x3f
 800399e:	409a      	lsls	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	f010803f 	.word	0xf010803f

080039c0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e050      	b.n	8003a74 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d101      	bne.n	80039e2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80039de:	2302      	movs	r3, #2
 80039e0:	e048      	b.n	8003a74 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2200      	movs	r2, #0
 8003a00:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2200      	movs	r2, #0
 8003a08:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2200      	movs	r2, #0
 8003a18:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2221      	movs	r2, #33	@ 0x21
 8003a20:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f82a 	bl	8003a7c <DMA_CalcBaseAndBitshift>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a30:	223f      	movs	r2, #63	@ 0x3f
 8003a32:	409a      	lsls	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	3b10      	subs	r3, #16
 8003a8c:	4a13      	ldr	r2, [pc, #76]	@ (8003adc <DMA_CalcBaseAndBitshift+0x60>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a96:	4a12      	ldr	r2, [pc, #72]	@ (8003ae0 <DMA_CalcBaseAndBitshift+0x64>)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d908      	bls.n	8003abc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae4 <DMA_CalcBaseAndBitshift+0x68>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	1d1a      	adds	r2, r3, #4
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	659a      	str	r2, [r3, #88]	@ 0x58
 8003aba:	e006      	b.n	8003aca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4b08      	ldr	r3, [pc, #32]	@ (8003ae4 <DMA_CalcBaseAndBitshift+0x68>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	aaaaaaab 	.word	0xaaaaaaab
 8003ae0:	0800d76c 	.word	0x0800d76c
 8003ae4:	fffffc00 	.word	0xfffffc00

08003ae8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d11f      	bne.n	8003b42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d856      	bhi.n	8003bb6 <DMA_CheckFifoParam+0xce>
 8003b08:	a201      	add	r2, pc, #4	@ (adr r2, 8003b10 <DMA_CheckFifoParam+0x28>)
 8003b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0e:	bf00      	nop
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b33 	.word	0x08003b33
 8003b18:	08003b21 	.word	0x08003b21
 8003b1c:	08003bb7 	.word	0x08003bb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d046      	beq.n	8003bba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b30:	e043      	b.n	8003bba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b36:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b3a:	d140      	bne.n	8003bbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b40:	e03d      	b.n	8003bbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b4a:	d121      	bne.n	8003b90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d837      	bhi.n	8003bc2 <DMA_CheckFifoParam+0xda>
 8003b52:	a201      	add	r2, pc, #4	@ (adr r2, 8003b58 <DMA_CheckFifoParam+0x70>)
 8003b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b58:	08003b69 	.word	0x08003b69
 8003b5c:	08003b6f 	.word	0x08003b6f
 8003b60:	08003b69 	.word	0x08003b69
 8003b64:	08003b81 	.word	0x08003b81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6c:	e030      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d025      	beq.n	8003bc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7e:	e022      	b.n	8003bc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b84:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b88:	d11f      	bne.n	8003bca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b8e:	e01c      	b.n	8003bca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d903      	bls.n	8003b9e <DMA_CheckFifoParam+0xb6>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d003      	beq.n	8003ba4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b9c:	e018      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba2:	e015      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00e      	beq.n	8003bce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb4:	e00b      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e00a      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e008      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e006      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e004      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e002      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bce:	bf00      	nop
    }
  } 
  
  return status; 
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop

08003be0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e039      	b.n	8003c66 <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f006 fb0c 	bl	800a224 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c30:	f023 0107 	bic.w	r1, r3, #7
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c46:	4b0a      	ldr	r3, [pc, #40]	@ (8003c70 <HAL_DMA2D_Init+0x90>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	68d1      	ldr	r1, [r2, #12]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	430b      	orrs	r3, r1
 8003c54:	6413      	str	r3, [r2, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	ffffc000 	.word	0xffffc000

08003c74 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_DMA2D_Start+0x1c>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e018      	b.n	8003cc2 <HAL_DMA2D_Start+0x4e>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fa9c 	bl	80041e8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b084      	sub	sp, #16
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d056      	beq.n	8003d98 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003cea:	f7ff fc7d 	bl	80035e8 <HAL_GetTick>
 8003cee:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8003cf0:	e04b      	b.n	8003d8a <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d023      	beq.n	8003d4c <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d12:	f043 0202 	orr.w	r2, r3, #2
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d28:	f043 0201 	orr.w	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2221      	movs	r2, #33	@ 0x21
 8003d36:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2204      	movs	r2, #4
 8003d3c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0a2      	b.n	8003e92 <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d52:	d01a      	beq.n	8003d8a <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <HAL_DMA2D_PollForTransfer+0xa0>
 8003d5a:	f7ff fc45 	bl	80035e8 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d20f      	bcs.n	8003d8a <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6e:	f043 0220 	orr.w	r2, r3, #32
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
           
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e083      	b.n	8003e92 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ac      	beq.n	8003cf2 <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d061      	beq.n	8003e78 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003db4:	f7ff fc18 	bl	80035e8 <HAL_GetTick>
 8003db8:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8003dba:	e056      	b.n	8003e6a <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d02e      	beq.n	8003e2c <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ddc:	f043 0204 	orr.w	r2, r3, #4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d005      	beq.n	8003dfa <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df2:	f043 0202 	orr.w	r2, r3, #2
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e08:	f043 0201 	orr.w	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2229      	movs	r2, #41	@ 0x29
 8003e16:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          
        return HAL_ERROR;      
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e032      	b.n	8003e92 <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e32:	d01a      	beq.n	8003e6a <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <HAL_DMA2D_PollForTransfer+0x180>
 8003e3a:	f7ff fbd5 	bl	80035e8 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d20f      	bcs.n	8003e6a <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4e:	f043 0220 	orr.w	r2, r3, #32
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	63da      	str	r2, [r3, #60]	@ 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2203      	movs	r2, #3
 8003e5a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e013      	b.n	8003e92 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0a1      	beq.n	8003dbc <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2212      	movs	r2, #18
 8003e7e:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.  
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60bb      	str	r3, [r7, #8]
        
  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d026      	beq.n	8003f0a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)    
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d021      	beq.n	8003f0a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);  
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ed4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eda:	f043 0201 	orr.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	63da      	str	r2, [r3, #60]	@ 0x3c
    
      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2204      	movs	r2, #4
 8003eee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d026      	beq.n	8003f62 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)    
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d021      	beq.n	8003f62 <HAL_DMA2D_IRQHandler+0xc8>
    {  
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f2c:	601a      	str	r2, [r3, #0]
  
      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2220      	movs	r2, #32
 8003f34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;    
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3a:	f043 0202 	orr.w	r2, r3, #2
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	63da      	str	r2, [r3, #60]	@ 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2204      	movs	r2, #4
 8003f46:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d026      	beq.n	8003fba <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)    
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d021      	beq.n	8003fba <HAL_DMA2D_IRQHandler+0x120>
    {    
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f84:	601a      	str	r2, [r3, #0]
  
      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;    
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f92:	f043 0204 	orr.w	r2, r3, #4
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	63da      	str	r2, [r3, #60]	@ 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	4798      	blx	r3
      }
    }
  }  
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d013      	beq.n	8003fec <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)    
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00e      	beq.n	8003fec <HAL_DMA2D_IRQHandler+0x152>
    {    
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fdc:	601a      	str	r2, [r3, #0]
  
      /* Clear the transfer watermark flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f853 	bl	8004092 <HAL_DMA2D_LineEventCallback>
    }
  }  
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d024      	beq.n	8004040 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)    
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01f      	beq.n	8004040 <HAL_DMA2D_IRQHandler+0x1a6>
    {   
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800400e:	601a      	str	r2, [r3, #0]
  
      /* Clear the transfer complete flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2202      	movs	r2, #2
 8004016:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      
      if(hdma2d->XferCpltCallback != NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4798      	blx	r3
      }         
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	2b00      	cmp	r3, #0
 8004048:	d01f      	beq.n	800408a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)    
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01a      	beq.n	800408a <HAL_DMA2D_IRQHandler+0x1f0>
    {    
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004062:	601a      	str	r2, [r3, #0]
  
      /* Clear the CLUT transfer complete flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2210      	movs	r2, #16
 800406a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	63da      	str	r2, [r3, #60]	@ 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      
      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);         
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f80e 	bl	80040a6 <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }  
  
}
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);
  
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);
  
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
} 
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
	...

080040bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	3318      	adds	r3, #24
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	4413      	add	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_DMA2D_ConfigLayer+0x34>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e073      	b.n	80041d8 <HAL_DMA2D_ConfigLayer+0x11c>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	041b      	lsls	r3, r3, #16
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800410e:	4b35      	ldr	r3, [pc, #212]	@ (80041e4 <HAL_DMA2D_ConfigLayer+0x128>)
 8004110:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b0a      	cmp	r3, #10
 8004118:	d003      	beq.n	8004122 <HAL_DMA2D_ConfigLayer+0x66>
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b09      	cmp	r3, #9
 8004120:	d107      	bne.n	8004132 <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e005      	b.n	800413e <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	061b      	lsls	r3, r3, #24
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d120      	bne.n	8004186 <HAL_DMA2D_ConfigLayer+0xca>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	43db      	mvns	r3, r3
 800414e:	ea02 0103 	and.w	r1, r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	430a      	orrs	r2, r1
 800415a:	625a      	str	r2, [r3, #36]	@ 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b0a      	cmp	r3, #10
 800416c:	d003      	beq.n	8004176 <HAL_DMA2D_ConfigLayer+0xba>
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b09      	cmp	r3, #9
 8004174:	d127      	bne.n	80041c6 <HAL_DMA2D_ConfigLayer+0x10a>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004182:	629a      	str	r2, [r3, #40]	@ 0x28
 8004184:	e01f      	b.n	80041c6 <HAL_DMA2D_ConfigLayer+0x10a>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	43db      	mvns	r3, r3
 8004190:	ea02 0103 	and.w	r1, r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	430a      	orrs	r2, r1
 800419c:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b0a      	cmp	r3, #10
 80041ae:	d003      	beq.n	80041b8 <HAL_DMA2D_ConfigLayer+0xfc>
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b09      	cmp	r3, #9
 80041b6:	d106      	bne.n	80041c6 <HAL_DMA2D_ConfigLayer+0x10a>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80041c4:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	ff03000f 	.word	0xff03000f

080041e8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 80041e8:	b480      	push	{r7}
 80041ea:	b08b      	sub	sp, #44	@ 0x2c
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp1 = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 8004202:	2300      	movs	r3, #0
 8004204:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004210:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	041a      	lsls	r2, r3, #16
 8004218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421a:	431a      	orrs	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	63da      	str	r2, [r3, #60]	@ 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004234:	d174      	bne.n	8004320 <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800423c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004244:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800424c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d108      	bne.n	800426e <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	431a      	orrs	r2, r3
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	4313      	orrs	r3, r2
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	627b      	str	r3, [r7, #36]	@ 0x24
 800426c:	e053      	b.n	8004316 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d106      	bne.n	8004284 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	4313      	orrs	r3, r2
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	627b      	str	r3, [r7, #36]	@ 0x24
 8004282:	e048      	b.n	8004316 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d111      	bne.n	80042b0 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	0cdb      	lsrs	r3, r3, #19
 8004290:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	0a9b      	lsrs	r3, r3, #10
 8004296:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	08db      	lsrs	r3, r3, #3
 800429c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	02db      	lsls	r3, r3, #11
 80042a6:	4313      	orrs	r3, r2
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ae:	e032      	b.n	8004316 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d117      	bne.n	80042e8 <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	0fdb      	lsrs	r3, r3, #31
 80042bc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	0cdb      	lsrs	r3, r3, #19
 80042c2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	0adb      	lsrs	r3, r3, #11
 80042c8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	08db      	lsrs	r3, r3, #3
 80042ce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	029b      	lsls	r3, r3, #10
 80042d8:	431a      	orrs	r2, r3
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	03db      	lsls	r3, r3, #15
 80042de:	4313      	orrs	r3, r2
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e6:	e016      	b.n	8004316 <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	0f1b      	lsrs	r3, r3, #28
 80042ec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	0d1b      	lsrs	r3, r3, #20
 80042f2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	0b1b      	lsrs	r3, r3, #12
 80042f8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	011a      	lsls	r2, r3, #4
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	431a      	orrs	r2, r3
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	031b      	lsls	r3, r3, #12
 800430e:	4313      	orrs	r3, r2
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800431c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800431e:	e003      	b.n	8004328 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	60da      	str	r2, [r3, #12]
}
 8004328:	bf00      	nop
 800432a:	372c      	adds	r7, #44	@ 0x2c
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004334:	b480      	push	{r7}
 8004336:	b089      	sub	sp, #36	@ 0x24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800434a:	2300      	movs	r3, #0
 800434c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	e175      	b.n	8004640 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004354:	2201      	movs	r2, #1
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4013      	ands	r3, r2
 8004366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	429a      	cmp	r2, r3
 800436e:	f040 8164 	bne.w	800463a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d003      	beq.n	8004382 <HAL_GPIO_Init+0x4e>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b12      	cmp	r3, #18
 8004380:	d123      	bne.n	80043ca <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	08da      	lsrs	r2, r3, #3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3208      	adds	r2, #8
 800438a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800438e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	220f      	movs	r2, #15
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	43db      	mvns	r3, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	08da      	lsrs	r2, r3, #3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3208      	adds	r2, #8
 80043c4:	69b9      	ldr	r1, [r7, #24]
 80043c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	2203      	movs	r2, #3
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	43db      	mvns	r3, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4013      	ands	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f003 0203 	and.w	r2, r3, #3
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d00b      	beq.n	800441e <HAL_GPIO_Init+0xea>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d007      	beq.n	800441e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004412:	2b11      	cmp	r3, #17
 8004414:	d003      	beq.n	800441e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b12      	cmp	r3, #18
 800441c:	d130      	bne.n	8004480 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	2203      	movs	r2, #3
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43db      	mvns	r3, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4013      	ands	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4313      	orrs	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004454:	2201      	movs	r2, #1
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	43db      	mvns	r3, r3
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	4013      	ands	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	f003 0201 	and.w	r2, r3, #1
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4313      	orrs	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	2203      	movs	r2, #3
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80be 	beq.w	800463a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044be:	4b66      	ldr	r3, [pc, #408]	@ (8004658 <HAL_GPIO_Init+0x324>)
 80044c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c2:	4a65      	ldr	r2, [pc, #404]	@ (8004658 <HAL_GPIO_Init+0x324>)
 80044c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80044ca:	4b63      	ldr	r3, [pc, #396]	@ (8004658 <HAL_GPIO_Init+0x324>)
 80044cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80044d6:	4a61      	ldr	r2, [pc, #388]	@ (800465c <HAL_GPIO_Init+0x328>)
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	089b      	lsrs	r3, r3, #2
 80044dc:	3302      	adds	r3, #2
 80044de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	220f      	movs	r2, #15
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43db      	mvns	r3, r3
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	4013      	ands	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a58      	ldr	r2, [pc, #352]	@ (8004660 <HAL_GPIO_Init+0x32c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d037      	beq.n	8004572 <HAL_GPIO_Init+0x23e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a57      	ldr	r2, [pc, #348]	@ (8004664 <HAL_GPIO_Init+0x330>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d031      	beq.n	800456e <HAL_GPIO_Init+0x23a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a56      	ldr	r2, [pc, #344]	@ (8004668 <HAL_GPIO_Init+0x334>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d02b      	beq.n	800456a <HAL_GPIO_Init+0x236>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a55      	ldr	r2, [pc, #340]	@ (800466c <HAL_GPIO_Init+0x338>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d025      	beq.n	8004566 <HAL_GPIO_Init+0x232>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a54      	ldr	r2, [pc, #336]	@ (8004670 <HAL_GPIO_Init+0x33c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01f      	beq.n	8004562 <HAL_GPIO_Init+0x22e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a53      	ldr	r2, [pc, #332]	@ (8004674 <HAL_GPIO_Init+0x340>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d019      	beq.n	800455e <HAL_GPIO_Init+0x22a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a52      	ldr	r2, [pc, #328]	@ (8004678 <HAL_GPIO_Init+0x344>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <HAL_GPIO_Init+0x226>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a51      	ldr	r2, [pc, #324]	@ (800467c <HAL_GPIO_Init+0x348>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00d      	beq.n	8004556 <HAL_GPIO_Init+0x222>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a50      	ldr	r2, [pc, #320]	@ (8004680 <HAL_GPIO_Init+0x34c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <HAL_GPIO_Init+0x21e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a4f      	ldr	r2, [pc, #316]	@ (8004684 <HAL_GPIO_Init+0x350>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d101      	bne.n	800454e <HAL_GPIO_Init+0x21a>
 800454a:	2309      	movs	r3, #9
 800454c:	e012      	b.n	8004574 <HAL_GPIO_Init+0x240>
 800454e:	230a      	movs	r3, #10
 8004550:	e010      	b.n	8004574 <HAL_GPIO_Init+0x240>
 8004552:	2308      	movs	r3, #8
 8004554:	e00e      	b.n	8004574 <HAL_GPIO_Init+0x240>
 8004556:	2307      	movs	r3, #7
 8004558:	e00c      	b.n	8004574 <HAL_GPIO_Init+0x240>
 800455a:	2306      	movs	r3, #6
 800455c:	e00a      	b.n	8004574 <HAL_GPIO_Init+0x240>
 800455e:	2305      	movs	r3, #5
 8004560:	e008      	b.n	8004574 <HAL_GPIO_Init+0x240>
 8004562:	2304      	movs	r3, #4
 8004564:	e006      	b.n	8004574 <HAL_GPIO_Init+0x240>
 8004566:	2303      	movs	r3, #3
 8004568:	e004      	b.n	8004574 <HAL_GPIO_Init+0x240>
 800456a:	2302      	movs	r3, #2
 800456c:	e002      	b.n	8004574 <HAL_GPIO_Init+0x240>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_GPIO_Init+0x240>
 8004572:	2300      	movs	r3, #0
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	f002 0203 	and.w	r2, r2, #3
 800457a:	0092      	lsls	r2, r2, #2
 800457c:	4093      	lsls	r3, r2
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004584:	4935      	ldr	r1, [pc, #212]	@ (800465c <HAL_GPIO_Init+0x328>)
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	3302      	adds	r3, #2
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004592:	4b3d      	ldr	r3, [pc, #244]	@ (8004688 <HAL_GPIO_Init+0x354>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	43db      	mvns	r3, r3
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4013      	ands	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045b6:	4a34      	ldr	r2, [pc, #208]	@ (8004688 <HAL_GPIO_Init+0x354>)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045bc:	4b32      	ldr	r3, [pc, #200]	@ (8004688 <HAL_GPIO_Init+0x354>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	43db      	mvns	r3, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4013      	ands	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045e0:	4a29      	ldr	r2, [pc, #164]	@ (8004688 <HAL_GPIO_Init+0x354>)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045e6:	4b28      	ldr	r3, [pc, #160]	@ (8004688 <HAL_GPIO_Init+0x354>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4013      	ands	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800460a:	4a1f      	ldr	r2, [pc, #124]	@ (8004688 <HAL_GPIO_Init+0x354>)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004610:	4b1d      	ldr	r3, [pc, #116]	@ (8004688 <HAL_GPIO_Init+0x354>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	43db      	mvns	r3, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4013      	ands	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004634:	4a14      	ldr	r2, [pc, #80]	@ (8004688 <HAL_GPIO_Init+0x354>)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	3301      	adds	r3, #1
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2b0f      	cmp	r3, #15
 8004644:	f67f ae86 	bls.w	8004354 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	3724      	adds	r7, #36	@ 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800
 800465c:	40013800 	.word	0x40013800
 8004660:	40020000 	.word	0x40020000
 8004664:	40020400 	.word	0x40020400
 8004668:	40020800 	.word	0x40020800
 800466c:	40020c00 	.word	0x40020c00
 8004670:	40021000 	.word	0x40021000
 8004674:	40021400 	.word	0x40021400
 8004678:	40021800 	.word	0x40021800
 800467c:	40021c00 	.word	0x40021c00
 8004680:	40022000 	.word	0x40022000
 8004684:	40022400 	.word	0x40022400
 8004688:	40013c00 	.word	0x40013c00

0800468c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e0d9      	b.n	800485c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046a8:	2201      	movs	r2, #1
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4013      	ands	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	429a      	cmp	r2, r3
 80046c0:	f040 80c9 	bne.w	8004856 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	2103      	movs	r1, #3
 80046ce:	fa01 f303 	lsl.w	r3, r1, r3
 80046d2:	43db      	mvns	r3, r3
 80046d4:	401a      	ands	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	08da      	lsrs	r2, r3, #3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3208      	adds	r2, #8
 80046e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	220f      	movs	r2, #15
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	43db      	mvns	r3, r3
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	08d2      	lsrs	r2, r2, #3
 80046fa:	4019      	ands	r1, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3208      	adds	r2, #8
 8004700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	2103      	movs	r1, #3
 800470e:	fa01 f303 	lsl.w	r3, r1, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	401a      	ands	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	2101      	movs	r1, #1
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	fa01 f303 	lsl.w	r3, r1, r3
 8004726:	43db      	mvns	r3, r3
 8004728:	401a      	ands	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	2103      	movs	r1, #3
 8004738:	fa01 f303 	lsl.w	r3, r1, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	401a      	ands	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004744:	4a4b      	ldr	r2, [pc, #300]	@ (8004874 <HAL_GPIO_DeInit+0x1e8>)
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	089b      	lsrs	r3, r3, #2
 800474a:	3302      	adds	r3, #2
 800474c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004750:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f003 0303 	and.w	r3, r3, #3
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	220f      	movs	r2, #15
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	4013      	ands	r3, r2
 8004764:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a43      	ldr	r2, [pc, #268]	@ (8004878 <HAL_GPIO_DeInit+0x1ec>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d037      	beq.n	80047de <HAL_GPIO_DeInit+0x152>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a42      	ldr	r2, [pc, #264]	@ (800487c <HAL_GPIO_DeInit+0x1f0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d031      	beq.n	80047da <HAL_GPIO_DeInit+0x14e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a41      	ldr	r2, [pc, #260]	@ (8004880 <HAL_GPIO_DeInit+0x1f4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d02b      	beq.n	80047d6 <HAL_GPIO_DeInit+0x14a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a40      	ldr	r2, [pc, #256]	@ (8004884 <HAL_GPIO_DeInit+0x1f8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d025      	beq.n	80047d2 <HAL_GPIO_DeInit+0x146>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a3f      	ldr	r2, [pc, #252]	@ (8004888 <HAL_GPIO_DeInit+0x1fc>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d01f      	beq.n	80047ce <HAL_GPIO_DeInit+0x142>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a3e      	ldr	r2, [pc, #248]	@ (800488c <HAL_GPIO_DeInit+0x200>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d019      	beq.n	80047ca <HAL_GPIO_DeInit+0x13e>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a3d      	ldr	r2, [pc, #244]	@ (8004890 <HAL_GPIO_DeInit+0x204>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d013      	beq.n	80047c6 <HAL_GPIO_DeInit+0x13a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a3c      	ldr	r2, [pc, #240]	@ (8004894 <HAL_GPIO_DeInit+0x208>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00d      	beq.n	80047c2 <HAL_GPIO_DeInit+0x136>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a3b      	ldr	r2, [pc, #236]	@ (8004898 <HAL_GPIO_DeInit+0x20c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d007      	beq.n	80047be <HAL_GPIO_DeInit+0x132>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a3a      	ldr	r2, [pc, #232]	@ (800489c <HAL_GPIO_DeInit+0x210>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d101      	bne.n	80047ba <HAL_GPIO_DeInit+0x12e>
 80047b6:	2309      	movs	r3, #9
 80047b8:	e012      	b.n	80047e0 <HAL_GPIO_DeInit+0x154>
 80047ba:	230a      	movs	r3, #10
 80047bc:	e010      	b.n	80047e0 <HAL_GPIO_DeInit+0x154>
 80047be:	2308      	movs	r3, #8
 80047c0:	e00e      	b.n	80047e0 <HAL_GPIO_DeInit+0x154>
 80047c2:	2307      	movs	r3, #7
 80047c4:	e00c      	b.n	80047e0 <HAL_GPIO_DeInit+0x154>
 80047c6:	2306      	movs	r3, #6
 80047c8:	e00a      	b.n	80047e0 <HAL_GPIO_DeInit+0x154>
 80047ca:	2305      	movs	r3, #5
 80047cc:	e008      	b.n	80047e0 <HAL_GPIO_DeInit+0x154>
 80047ce:	2304      	movs	r3, #4
 80047d0:	e006      	b.n	80047e0 <HAL_GPIO_DeInit+0x154>
 80047d2:	2303      	movs	r3, #3
 80047d4:	e004      	b.n	80047e0 <HAL_GPIO_DeInit+0x154>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e002      	b.n	80047e0 <HAL_GPIO_DeInit+0x154>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <HAL_GPIO_DeInit+0x154>
 80047de:	2300      	movs	r3, #0
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	f002 0203 	and.w	r2, r2, #3
 80047e6:	0092      	lsls	r2, r2, #2
 80047e8:	4093      	lsls	r3, r2
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d132      	bne.n	8004856 <HAL_GPIO_DeInit+0x1ca>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	220f      	movs	r2, #15
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004800:	4a1c      	ldr	r2, [pc, #112]	@ (8004874 <HAL_GPIO_DeInit+0x1e8>)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	089b      	lsrs	r3, r3, #2
 8004806:	3302      	adds	r3, #2
 8004808:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	43da      	mvns	r2, r3
 8004810:	4818      	ldr	r0, [pc, #96]	@ (8004874 <HAL_GPIO_DeInit+0x1e8>)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	089b      	lsrs	r3, r3, #2
 8004816:	400a      	ands	r2, r1
 8004818:	3302      	adds	r3, #2
 800481a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800481e:	4b20      	ldr	r3, [pc, #128]	@ (80048a0 <HAL_GPIO_DeInit+0x214>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	43db      	mvns	r3, r3
 8004826:	491e      	ldr	r1, [pc, #120]	@ (80048a0 <HAL_GPIO_DeInit+0x214>)
 8004828:	4013      	ands	r3, r2
 800482a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800482c:	4b1c      	ldr	r3, [pc, #112]	@ (80048a0 <HAL_GPIO_DeInit+0x214>)
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	43db      	mvns	r3, r3
 8004834:	491a      	ldr	r1, [pc, #104]	@ (80048a0 <HAL_GPIO_DeInit+0x214>)
 8004836:	4013      	ands	r3, r2
 8004838:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800483a:	4b19      	ldr	r3, [pc, #100]	@ (80048a0 <HAL_GPIO_DeInit+0x214>)
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	43db      	mvns	r3, r3
 8004842:	4917      	ldr	r1, [pc, #92]	@ (80048a0 <HAL_GPIO_DeInit+0x214>)
 8004844:	4013      	ands	r3, r2
 8004846:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004848:	4b15      	ldr	r3, [pc, #84]	@ (80048a0 <HAL_GPIO_DeInit+0x214>)
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	43db      	mvns	r3, r3
 8004850:	4913      	ldr	r1, [pc, #76]	@ (80048a0 <HAL_GPIO_DeInit+0x214>)
 8004852:	4013      	ands	r3, r2
 8004854:	60cb      	str	r3, [r1, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	3301      	adds	r3, #1
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2b0f      	cmp	r3, #15
 8004860:	f67f af22 	bls.w	80046a8 <HAL_GPIO_DeInit+0x1c>
	  }
    }
  }
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40013800 	.word	0x40013800
 8004878:	40020000 	.word	0x40020000
 800487c:	40020400 	.word	0x40020400
 8004880:	40020800 	.word	0x40020800
 8004884:	40020c00 	.word	0x40020c00
 8004888:	40021000 	.word	0x40021000
 800488c:	40021400 	.word	0x40021400
 8004890:	40021800 	.word	0x40021800
 8004894:	40021c00 	.word	0x40021c00
 8004898:	40022000 	.word	0x40022000
 800489c:	40022400 	.word	0x40022400
 80048a0:	40013c00 	.word	0x40013c00

080048a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	807b      	strh	r3, [r7, #2]
 80048b0:	4613      	mov	r3, r2
 80048b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048b4:	787b      	ldrb	r3, [r7, #1]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048ba:	887a      	ldrh	r2, [r7, #2]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80048c0:	e003      	b.n	80048ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80048c2:	887b      	ldrh	r3, [r7, #2]
 80048c4:	041a      	lsls	r2, r3, #16
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	619a      	str	r2, [r3, #24]
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
	...

080048d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e07f      	b.n	80049ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f005 fcb6 	bl	800a270 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2224      	movs	r2, #36	@ 0x24
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004928:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004938:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d107      	bne.n	8004952 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800494e:	609a      	str	r2, [r3, #8]
 8004950:	e006      	b.n	8004960 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800495e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d104      	bne.n	8004972 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004970:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6859      	ldr	r1, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4b1d      	ldr	r3, [pc, #116]	@ (80049f4 <HAL_I2C_Init+0x11c>)
 800497e:	430b      	orrs	r3, r1
 8004980:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004990:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	ea42 0103 	orr.w	r1, r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	021a      	lsls	r2, r3, #8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69d9      	ldr	r1, [r3, #28]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1a      	ldr	r2, [r3, #32]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	02008000 	.word	0x02008000

080049f8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e021      	b.n	8004a4e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2224      	movs	r2, #36	@ 0x24
 8004a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0201 	bic.w	r2, r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f005 fc68 	bl	800a2f8 <HAL_I2C_MspDeInit>

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	4608      	mov	r0, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	461a      	mov	r2, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	817b      	strh	r3, [r7, #10]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	813b      	strh	r3, [r7, #8]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b20      	cmp	r3, #32
 8004a80:	f040 8109 	bne.w	8004c96 <HAL_I2C_Mem_Write+0x23e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <HAL_I2C_Mem_Write+0x38>
 8004a8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e101      	b.n	8004c98 <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_I2C_Mem_Write+0x4a>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e0fa      	b.n	8004c98 <HAL_I2C_Mem_Write+0x240>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004aaa:	f7fe fd9d 	bl	80035e8 <HAL_GetTick>
 8004aae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	2319      	movs	r3, #25
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 fb09 	bl	80050d4 <I2C_WaitOnFlagUntilTimeout>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e0e5      	b.n	8004c98 <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2221      	movs	r2, #33	@ 0x21
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2240      	movs	r2, #64	@ 0x40
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a3a      	ldr	r2, [r7, #32]
 8004ae6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004af4:	88f8      	ldrh	r0, [r7, #6]
 8004af6:	893a      	ldrh	r2, [r7, #8]
 8004af8:	8979      	ldrh	r1, [r7, #10]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	9301      	str	r3, [sp, #4]
 8004afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	4603      	mov	r3, r0
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 fa01 	bl	8004f0c <I2C_RequestMemoryWrite>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00f      	beq.n	8004b30 <HAL_I2C_Mem_Write+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d105      	bne.n	8004b24 <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0b9      	b.n	8004c98 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e0b3      	b.n	8004c98 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2bff      	cmp	r3, #255	@ 0xff
 8004b38:	d90e      	bls.n	8004b58 <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	22ff      	movs	r2, #255	@ 0xff
 8004b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	8979      	ldrh	r1, [r7, #10]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fbd3 	bl	80052fc <I2C_TransferConfig>
 8004b56:	e00f      	b.n	8004b78 <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	8979      	ldrh	r1, [r7, #10]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 fbc2 	bl	80052fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 fae3 	bl	8005148 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <HAL_I2C_Mem_Write+0x140>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d101      	bne.n	8004b94 <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e081      	b.n	8004c98 <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e07f      	b.n	8004c98 <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9c:	1c59      	adds	r1, r3, #1
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	6251      	str	r1, [r2, #36]	@ 0x24
 8004ba2:	781a      	ldrb	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d135      	bne.n	8004c38 <HAL_I2C_Mem_Write+0x1e0>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d030      	beq.n	8004c38 <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2180      	movs	r1, #128	@ 0x80
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 fa77 	bl	80050d4 <I2C_WaitOnFlagUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e053      	b.n	8004c98 <HAL_I2C_Mem_Write+0x240>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2bff      	cmp	r3, #255	@ 0xff
 8004bf8:	d90e      	bls.n	8004c18 <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	22ff      	movs	r2, #255	@ 0xff
 8004bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	8979      	ldrh	r1, [r7, #10]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fb73 	bl	80052fc <I2C_TransferConfig>
 8004c16:	e00f      	b.n	8004c38 <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	8979      	ldrh	r1, [r7, #10]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 fb62 	bl	80052fc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d19a      	bne.n	8004b78 <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fabe 	bl	80051c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <HAL_I2C_Mem_Write+0x20a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d101      	bne.n	8004c5e <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e01c      	b.n	8004c98 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e01a      	b.n	8004c98 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2220      	movs	r2, #32
 8004c68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6859      	ldr	r1, [r3, #4]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca0 <HAL_I2C_Mem_Write+0x248>)
 8004c76:	400b      	ands	r3, r1
 8004c78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	e000      	b.n	8004c98 <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 8004c96:	2302      	movs	r3, #2
  }
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	fe00e800 	.word	0xfe00e800

08004ca4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	4608      	mov	r0, r1
 8004cae:	4611      	mov	r1, r2
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	817b      	strh	r3, [r7, #10]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	813b      	strh	r3, [r7, #8]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	f040 8107 	bne.w	8004ede <HAL_I2C_Mem_Read+0x23a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_I2C_Mem_Read+0x38>
 8004cd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_I2C_Mem_Read+0x3c>
    {
      return  HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e0ff      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x23c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_I2C_Mem_Read+0x4a>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e0f8      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x23c>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cf6:	f7fe fc77 	bl	80035e8 <HAL_GetTick>
 8004cfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	2319      	movs	r3, #25
 8004d02:	2201      	movs	r2, #1
 8004d04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f9e3 	bl	80050d4 <I2C_WaitOnFlagUntilTimeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_I2C_Mem_Read+0x74>
    {
      return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e0e3      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x23c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2222      	movs	r2, #34	@ 0x22
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2240      	movs	r2, #64	@ 0x40
 8004d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a3a      	ldr	r2, [r7, #32]
 8004d32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004d38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d40:	88f8      	ldrh	r0, [r7, #6]
 8004d42:	893a      	ldrh	r2, [r7, #8]
 8004d44:	8979      	ldrh	r1, [r7, #10]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	9301      	str	r3, [sp, #4]
 8004d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	4603      	mov	r3, r0
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f93b 	bl	8004fcc <I2C_RequestMemoryRead>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00f      	beq.n	8004d7c <HAL_I2C_Mem_Read+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d105      	bne.n	8004d70 <HAL_I2C_Mem_Read+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e0b7      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e0b1      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2bff      	cmp	r3, #255	@ 0xff
 8004d84:	d90e      	bls.n	8004da4 <HAL_I2C_Mem_Read+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	22ff      	movs	r2, #255	@ 0xff
 8004d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	8979      	ldrh	r1, [r7, #10]
 8004d94:	4b54      	ldr	r3, [pc, #336]	@ (8004ee8 <HAL_I2C_Mem_Read+0x244>)
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 faad 	bl	80052fc <I2C_TransferConfig>
 8004da2:	e00f      	b.n	8004dc4 <HAL_I2C_Mem_Read+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	8979      	ldrh	r1, [r7, #10]
 8004db6:	4b4c      	ldr	r3, [pc, #304]	@ (8004ee8 <HAL_I2C_Mem_Read+0x244>)
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fa9c 	bl	80052fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2104      	movs	r1, #4
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f980 	bl	80050d4 <I2C_WaitOnFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <HAL_I2C_Mem_Read+0x13a>
      {
        return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e080      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x23c>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de8:	1c59      	adds	r1, r3, #1
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	6251      	str	r1, [r2, #36]	@ 0x24
 8004dee:	b2c2      	uxtb	r2, r0
 8004df0:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d135      	bne.n	8004e80 <HAL_I2C_Mem_Read+0x1dc>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d030      	beq.n	8004e80 <HAL_I2C_Mem_Read+0x1dc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e24:	2200      	movs	r2, #0
 8004e26:	2180      	movs	r1, #128	@ 0x80
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 f953 	bl	80050d4 <I2C_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <HAL_I2C_Mem_Read+0x194>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e053      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x23c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2bff      	cmp	r3, #255	@ 0xff
 8004e40:	d90e      	bls.n	8004e60 <HAL_I2C_Mem_Read+0x1bc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	22ff      	movs	r2, #255	@ 0xff
 8004e46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	8979      	ldrh	r1, [r7, #10]
 8004e50:	2300      	movs	r3, #0
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 fa4f 	bl	80052fc <I2C_TransferConfig>
 8004e5e:	e00f      	b.n	8004e80 <HAL_I2C_Mem_Read+0x1dc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	8979      	ldrh	r1, [r7, #10]
 8004e72:	2300      	movs	r3, #0
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fa3e 	bl	80052fc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d19c      	bne.n	8004dc4 <HAL_I2C_Mem_Read+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 f99a 	bl	80051c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d007      	beq.n	8004eaa <HAL_I2C_Mem_Read+0x206>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d101      	bne.n	8004ea6 <HAL_I2C_Mem_Read+0x202>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e01c      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e01a      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6859      	ldr	r1, [r3, #4]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8004eec <HAL_I2C_Mem_Read+0x248>)
 8004ebe:	400b      	ands	r3, r1
 8004ec0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e000      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x23c>
  }
  else
  {
    return HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
  }
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	80002400 	.word	0x80002400
 8004eec:	fe00e800 	.word	0xfe00e800

08004ef0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004efe:	b2db      	uxtb	r3, r3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	4608      	mov	r0, r1
 8004f16:	4611      	mov	r1, r2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	817b      	strh	r3, [r7, #10]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	813b      	strh	r3, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f26:	88fb      	ldrh	r3, [r7, #6]
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	8979      	ldrh	r1, [r7, #10]
 8004f2c:	4b26      	ldr	r3, [pc, #152]	@ (8004fc8 <I2C_RequestMemoryWrite+0xbc>)
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f9e1 	bl	80052fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	69b9      	ldr	r1, [r7, #24]
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f902 	bl	8005148 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d007      	beq.n	8004f5a <I2C_RequestMemoryWrite+0x4e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d101      	bne.n	8004f56 <I2C_RequestMemoryWrite+0x4a>
    {
      return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e034      	b.n	8004fc0 <I2C_RequestMemoryWrite+0xb4>
    }
    else
    {
      return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e032      	b.n	8004fc0 <I2C_RequestMemoryWrite+0xb4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f5a:	88fb      	ldrh	r3, [r7, #6]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d105      	bne.n	8004f6c <I2C_RequestMemoryWrite+0x60>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f60:	893b      	ldrh	r3, [r7, #8]
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f6a:	e01b      	b.n	8004fa4 <I2C_RequestMemoryWrite+0x98>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f6c:	893b      	ldrh	r3, [r7, #8]
 8004f6e:	0a1b      	lsrs	r3, r3, #8
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f7a:	69fa      	ldr	r2, [r7, #28]
 8004f7c:	69b9      	ldr	r1, [r7, #24]
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 f8e2 	bl	8005148 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <I2C_RequestMemoryWrite+0x8e>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d101      	bne.n	8004f96 <I2C_RequestMemoryWrite+0x8a>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e014      	b.n	8004fc0 <I2C_RequestMemoryWrite+0xb4>
      }
      else
      {
        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e012      	b.n	8004fc0 <I2C_RequestMemoryWrite+0xb4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f9a:	893b      	ldrh	r3, [r7, #8]
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2200      	movs	r2, #0
 8004fac:	2180      	movs	r1, #128	@ 0x80
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f890 	bl	80050d4 <I2C_WaitOnFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <I2C_RequestMemoryWrite+0xb2>
  {
    return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e000      	b.n	8004fc0 <I2C_RequestMemoryWrite+0xb4>
  }

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	80002000 	.word	0x80002000

08004fcc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	4608      	mov	r0, r1
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4603      	mov	r3, r0
 8004fdc:	817b      	strh	r3, [r7, #10]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	813b      	strh	r3, [r7, #8]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	8979      	ldrh	r1, [r7, #10]
 8004fec:	4b26      	ldr	r3, [pc, #152]	@ (8005088 <I2C_RequestMemoryRead+0xbc>)
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f982 	bl	80052fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	69b9      	ldr	r1, [r7, #24]
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f8a3 	bl	8005148 <I2C_WaitOnTXISFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <I2C_RequestMemoryRead+0x4c>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500c:	2b04      	cmp	r3, #4
 800500e:	d101      	bne.n	8005014 <I2C_RequestMemoryRead+0x48>
    {
      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e034      	b.n	800507e <I2C_RequestMemoryRead+0xb2>
    }
    else
    {
      return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e032      	b.n	800507e <I2C_RequestMemoryRead+0xb2>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005018:	88fb      	ldrh	r3, [r7, #6]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d105      	bne.n	800502a <I2C_RequestMemoryRead+0x5e>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800501e:	893b      	ldrh	r3, [r7, #8]
 8005020:	b2da      	uxtb	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	629a      	str	r2, [r3, #40]	@ 0x28
 8005028:	e01b      	b.n	8005062 <I2C_RequestMemoryRead+0x96>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800502a:	893b      	ldrh	r3, [r7, #8]
 800502c:	0a1b      	lsrs	r3, r3, #8
 800502e:	b29b      	uxth	r3, r3
 8005030:	b2da      	uxtb	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005038:	69fa      	ldr	r2, [r7, #28]
 800503a:	69b9      	ldr	r1, [r7, #24]
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f883 	bl	8005148 <I2C_WaitOnTXISFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d007      	beq.n	8005058 <I2C_RequestMemoryRead+0x8c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504c:	2b04      	cmp	r3, #4
 800504e:	d101      	bne.n	8005054 <I2C_RequestMemoryRead+0x88>
      {
        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e014      	b.n	800507e <I2C_RequestMemoryRead+0xb2>
      }
      else
      {
        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e012      	b.n	800507e <I2C_RequestMemoryRead+0xb2>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005058:	893b      	ldrh	r3, [r7, #8]
 800505a:	b2da      	uxtb	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2200      	movs	r2, #0
 800506a:	2140      	movs	r1, #64	@ 0x40
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 f831 	bl	80050d4 <I2C_WaitOnFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <I2C_RequestMemoryRead+0xb0>
  {
    return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e000      	b.n	800507e <I2C_RequestMemoryRead+0xb2>
  }

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	80002000 	.word	0x80002000

0800508c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d103      	bne.n	80050aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d007      	beq.n	80050c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	619a      	str	r2, [r3, #24]
  }
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	4613      	mov	r3, r2
 80050e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050e4:	e01c      	b.n	8005120 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ec:	d018      	beq.n	8005120 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d007      	beq.n	8005104 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050f4:	f7fe fa78 	bl	80035e8 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d20d      	bcs.n	8005120 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e00f      	b.n	8005140 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	4013      	ands	r3, r2
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	429a      	cmp	r2, r3
 800512e:	bf0c      	ite	eq
 8005130:	2301      	moveq	r3, #1
 8005132:	2300      	movne	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	461a      	mov	r2, r3
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	429a      	cmp	r2, r3
 800513c:	d0d3      	beq.n	80050e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005154:	e02c      	b.n	80051b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 f870 	bl	8005240 <I2C_IsAcknowledgeFailed>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e02a      	b.n	80051c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005170:	d01e      	beq.n	80051b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005178:	f7fe fa36 	bl	80035e8 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	429a      	cmp	r2, r3
 8005186:	d213      	bcs.n	80051b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518c:	f043 0220 	orr.w	r2, r3, #32
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e007      	b.n	80051c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d1cb      	bne.n	8005156 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051d4:	e028      	b.n	8005228 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	68b9      	ldr	r1, [r7, #8]
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f830 	bl	8005240 <I2C_IsAcknowledgeFailed>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e026      	b.n	8005238 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d007      	beq.n	8005200 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051f0:	f7fe f9fa 	bl	80035e8 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d213      	bcs.n	8005228 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005204:	f043 0220 	orr.w	r2, r3, #32
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e007      	b.n	8005238 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b20      	cmp	r3, #32
 8005234:	d1cf      	bne.n	80051d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f003 0310 	and.w	r3, r3, #16
 8005256:	2b10      	cmp	r3, #16
 8005258:	d148      	bne.n	80052ec <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800525a:	e01c      	b.n	8005296 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005262:	d018      	beq.n	8005296 <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <I2C_IsAcknowledgeFailed+0x3a>
 800526a:	f7fe f9bd 	bl	80035e8 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	429a      	cmp	r2, r3
 8005278:	d20d      	bcs.n	8005296 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e02b      	b.n	80052ee <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d1db      	bne.n	800525c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2210      	movs	r2, #16
 80052aa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2220      	movs	r2, #32
 80052b2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f7ff fee9 	bl	800508c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6859      	ldr	r1, [r3, #4]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	4b0c      	ldr	r3, [pc, #48]	@ (80052f8 <I2C_IsAcknowledgeFailed+0xb8>)
 80052c6:	400b      	ands	r3, r1
 80052c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2204      	movs	r2, #4
 80052ce:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e000      	b.n	80052ee <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	fe00e800 	.word	0xfe00e800

080052fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	607b      	str	r3, [r7, #4]
 8005306:	460b      	mov	r3, r1
 8005308:	817b      	strh	r3, [r7, #10]
 800530a:	4613      	mov	r3, r2
 800530c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	0d5b      	lsrs	r3, r3, #21
 8005318:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800531c:	4b0d      	ldr	r3, [pc, #52]	@ (8005354 <I2C_TransferConfig+0x58>)
 800531e:	430b      	orrs	r3, r1
 8005320:	43db      	mvns	r3, r3
 8005322:	ea02 0103 	and.w	r1, r2, r3
 8005326:	897b      	ldrh	r3, [r7, #10]
 8005328:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800532c:	7a7b      	ldrb	r3, [r7, #9]
 800532e:	041b      	lsls	r3, r3, #16
 8005330:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	431a      	orrs	r2, r3
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	431a      	orrs	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	03ff63ff 	.word	0x03ff63ff

08005358 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b20      	cmp	r3, #32
 800536c:	d138      	bne.n	80053e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005378:	2302      	movs	r3, #2
 800537a:	e032      	b.n	80053e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2224      	movs	r2, #36	@ 0x24
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0201 	bic.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80053aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6819      	ldr	r1, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	e000      	b.n	80053e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053e0:	2302      	movs	r3, #2
  }
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b085      	sub	sp, #20
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b20      	cmp	r3, #32
 8005406:	d139      	bne.n	800547c <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8005412:	2302      	movs	r3, #2
 8005414:	e033      	b.n	800547e <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2224      	movs	r2, #36	@ 0x24
 8005422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0201 	bic.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005444:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	e000      	b.n	800547e <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 800547c:	2302      	movs	r3, #2
  }
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	2300      	movs	r3, #0
 800549a:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e0c7      	b.n	8005636 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f004 ff3a 	bl	800a334 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80054d6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6999      	ldr	r1, [r3, #24]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80054ec:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6899      	ldr	r1, [r3, #8]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	4b4e      	ldr	r3, [pc, #312]	@ (8005640 <HAL_LTDC_Init+0x1b4>)
 8005508:	400b      	ands	r3, r1
 800550a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	041b      	lsls	r3, r3, #16
 8005512:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6899      	ldr	r1, [r3, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68d9      	ldr	r1, [r3, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4b42      	ldr	r3, [pc, #264]	@ (8005640 <HAL_LTDC_Init+0x1b4>)
 8005536:	400b      	ands	r3, r1
 8005538:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	041b      	lsls	r3, r3, #16
 8005540:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68d9      	ldr	r1, [r3, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1a      	ldr	r2, [r3, #32]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6919      	ldr	r1, [r3, #16]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	4b37      	ldr	r3, [pc, #220]	@ (8005640 <HAL_LTDC_Init+0x1b4>)
 8005564:	400b      	ands	r3, r1
 8005566:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556c:	041b      	lsls	r3, r3, #16
 800556e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6919      	ldr	r1, [r3, #16]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6959      	ldr	r1, [r3, #20]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4b2b      	ldr	r3, [pc, #172]	@ (8005640 <HAL_LTDC_Init+0x1b4>)
 8005592:	400b      	ands	r3, r1
 8005594:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	041b      	lsls	r3, r3, #16
 800559c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6959      	ldr	r1, [r3, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80055c4:	041b      	lsls	r3, r3, #16
 80055c6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80055d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0204 	orr.w	r2, r2, #4
 8005602:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0202 	orr.w	r2, r2, #2
 8005612:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	f000f800 	.word	0xf000f800

08005644 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8005644:	b5b0      	push	{r4, r5, r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005656:	2b01      	cmp	r3, #1
 8005658:	d101      	bne.n	800565e <HAL_LTDC_ConfigLayer+0x1a>
 800565a:	2302      	movs	r3, #2
 800565c:	e02c      	b.n	80056b8 <HAL_LTDC_ConfigLayer+0x74>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2202      	movs	r2, #2
 800566a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2134      	movs	r1, #52	@ 0x34
 8005674:	fb01 f303 	mul.w	r3, r1, r3
 8005678:	4413      	add	r3, r2
 800567a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4614      	mov	r4, r2
 8005682:	461d      	mov	r5, r3
 8005684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800568a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800568c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800568e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f81f 	bl	80056dc <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2201      	movs	r2, #1
 80056a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bdb0      	pop	{r4, r5, r7, pc}

080056c0 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80056ce:	b2db      	uxtb	r3, r3
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80056dc:	b480      	push	{r7}
 80056de:	b089      	sub	sp, #36	@ 0x24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 80056ec:	2300      	movs	r3, #0
 80056ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	0c1b      	lsrs	r3, r3, #16
 8005700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005704:	4413      	add	r3, r2
 8005706:	041b      	lsls	r3, r3, #16
 8005708:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	01db      	lsls	r3, r3, #7
 8005714:	4413      	add	r3, r2
 8005716:	3384      	adds	r3, #132	@ 0x84
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	6812      	ldr	r2, [r2, #0]
 800571e:	4611      	mov	r1, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	01d2      	lsls	r2, r2, #7
 8005724:	440a      	add	r2, r1
 8005726:	3284      	adds	r2, #132	@ 0x84
 8005728:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800572c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	0c1b      	lsrs	r3, r3, #16
 800573a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800573e:	4413      	add	r3, r2
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4619      	mov	r1, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	01db      	lsls	r3, r3, #7
 800574c:	440b      	add	r3, r1
 800574e:	3384      	adds	r3, #132	@ 0x84
 8005750:	4619      	mov	r1, r3
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4313      	orrs	r3, r2
 8005756:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005766:	4413      	add	r3, r2
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	01db      	lsls	r3, r3, #7
 8005776:	4413      	add	r3, r2
 8005778:	3384      	adds	r3, #132	@ 0x84
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	6812      	ldr	r2, [r2, #0]
 8005780:	4611      	mov	r1, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	01d2      	lsls	r2, r2, #7
 8005786:	440a      	add	r2, r1
 8005788:	3284      	adds	r2, #132	@ 0x84
 800578a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800578e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800579e:	4413      	add	r3, r2
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4619      	mov	r1, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	01db      	lsls	r3, r3, #7
 80057ac:	440b      	add	r3, r1
 80057ae:	3384      	adds	r3, #132	@ 0x84
 80057b0:	4619      	mov	r1, r3
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	01db      	lsls	r3, r3, #7
 80057c2:	4413      	add	r3, r2
 80057c4:	3384      	adds	r3, #132	@ 0x84
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	4611      	mov	r1, r2
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	01d2      	lsls	r2, r2, #7
 80057d2:	440a      	add	r2, r1
 80057d4:	3284      	adds	r2, #132	@ 0x84
 80057d6:	f023 0307 	bic.w	r3, r3, #7
 80057da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	01db      	lsls	r3, r3, #7
 80057e6:	4413      	add	r3, r2
 80057e8:	3384      	adds	r3, #132	@ 0x84
 80057ea:	461a      	mov	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005802:	041b      	lsls	r3, r3, #16
 8005804:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	061b      	lsls	r3, r3, #24
 800580c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	01db      	lsls	r3, r3, #7
 8005818:	4413      	add	r3, r2
 800581a:	3384      	adds	r3, #132	@ 0x84
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	01db      	lsls	r3, r3, #7
 8005828:	4413      	add	r3, r2
 800582a:	3384      	adds	r3, #132	@ 0x84
 800582c:	461a      	mov	r2, r3
 800582e:	2300      	movs	r3, #0
 8005830:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005838:	461a      	mov	r2, r3
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	431a      	orrs	r2, r3
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	431a      	orrs	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4619      	mov	r1, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	01db      	lsls	r3, r3, #7
 800584c:	440b      	add	r3, r1
 800584e:	3384      	adds	r3, #132	@ 0x84
 8005850:	4619      	mov	r1, r3
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	461a      	mov	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	01db      	lsls	r3, r3, #7
 8005862:	4413      	add	r3, r2
 8005864:	3384      	adds	r3, #132	@ 0x84
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	4611      	mov	r1, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	01d2      	lsls	r2, r2, #7
 8005872:	440a      	add	r2, r1
 8005874:	3284      	adds	r2, #132	@ 0x84
 8005876:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800587a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	01db      	lsls	r3, r3, #7
 8005886:	4413      	add	r3, r2
 8005888:	3384      	adds	r3, #132	@ 0x84
 800588a:	461a      	mov	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	01db      	lsls	r3, r3, #7
 800589c:	4413      	add	r3, r2
 800589e:	3384      	adds	r3, #132	@ 0x84
 80058a0:	69da      	ldr	r2, [r3, #28]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4619      	mov	r1, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	01db      	lsls	r3, r3, #7
 80058ac:	440b      	add	r3, r1
 80058ae:	3384      	adds	r3, #132	@ 0x84
 80058b0:	4619      	mov	r1, r3
 80058b2:	4b58      	ldr	r3, [pc, #352]	@ (8005a14 <LTDC_SetConfig+0x338>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	68f9      	ldr	r1, [r7, #12]
 80058c2:	6809      	ldr	r1, [r1, #0]
 80058c4:	4608      	mov	r0, r1
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	01c9      	lsls	r1, r1, #7
 80058ca:	4401      	add	r1, r0
 80058cc:	3184      	adds	r1, #132	@ 0x84
 80058ce:	4313      	orrs	r3, r2
 80058d0:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	01db      	lsls	r3, r3, #7
 80058dc:	4413      	add	r3, r2
 80058de:	3384      	adds	r3, #132	@ 0x84
 80058e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	01db      	lsls	r3, r3, #7
 80058ec:	4413      	add	r3, r2
 80058ee:	3384      	adds	r3, #132	@ 0x84
 80058f0:	461a      	mov	r2, r3
 80058f2:	2300      	movs	r3, #0
 80058f4:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	01db      	lsls	r3, r3, #7
 8005900:	4413      	add	r3, r2
 8005902:	3384      	adds	r3, #132	@ 0x84
 8005904:	461a      	mov	r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590a:	6293      	str	r3, [r2, #40]	@ 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d102      	bne.n	800591a <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 8005914:	2304      	movs	r3, #4
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	e01b      	b.n	8005952 <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d102      	bne.n	8005928 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 8005922:	2303      	movs	r3, #3
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	e014      	b.n	8005952 <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	2b04      	cmp	r3, #4
 800592e:	d00b      	beq.n	8005948 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005934:	2b02      	cmp	r3, #2
 8005936:	d007      	beq.n	8005948 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800593c:	2b03      	cmp	r3, #3
 800593e:	d003      	beq.n	8005948 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005944:	2b07      	cmp	r3, #7
 8005946:	d102      	bne.n	800594e <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 8005948:	2302      	movs	r3, #2
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	e001      	b.n	8005952 <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 800594e:	2301      	movs	r3, #1
 8005950:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	01db      	lsls	r3, r3, #7
 800595c:	4413      	add	r3, r2
 800595e:	3384      	adds	r3, #132	@ 0x84
 8005960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	6812      	ldr	r2, [r2, #0]
 8005966:	4611      	mov	r1, r2
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	01d2      	lsls	r2, r2, #7
 800596c:	440a      	add	r2, r1
 800596e:	3284      	adds	r2, #132	@ 0x84
 8005970:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005974:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597a:	69fa      	ldr	r2, [r7, #28]
 800597c:	fb02 f303 	mul.w	r3, r2, r3
 8005980:	041a      	lsls	r2, r3, #16
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6859      	ldr	r1, [r3, #4]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	1acb      	subs	r3, r1, r3
 800598c:	69f9      	ldr	r1, [r7, #28]
 800598e:	fb01 f303 	mul.w	r3, r1, r3
 8005992:	3303      	adds	r3, #3
 8005994:	68f9      	ldr	r1, [r7, #12]
 8005996:	6809      	ldr	r1, [r1, #0]
 8005998:	4608      	mov	r0, r1
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	01c9      	lsls	r1, r1, #7
 800599e:	4401      	add	r1, r0
 80059a0:	3184      	adds	r1, #132	@ 0x84
 80059a2:	4313      	orrs	r3, r2
 80059a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	01db      	lsls	r3, r3, #7
 80059b0:	4413      	add	r3, r2
 80059b2:	3384      	adds	r3, #132	@ 0x84
 80059b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4619      	mov	r1, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	01db      	lsls	r3, r3, #7
 80059c0:	440b      	add	r3, r1
 80059c2:	3384      	adds	r3, #132	@ 0x84
 80059c4:	4619      	mov	r1, r3
 80059c6:	4b14      	ldr	r3, [pc, #80]	@ (8005a18 <LTDC_SetConfig+0x33c>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	01db      	lsls	r3, r3, #7
 80059d6:	4413      	add	r3, r2
 80059d8:	3384      	adds	r3, #132	@ 0x84
 80059da:	461a      	mov	r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	01db      	lsls	r3, r3, #7
 80059ec:	4413      	add	r3, r2
 80059ee:	3384      	adds	r3, #132	@ 0x84
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	6812      	ldr	r2, [r2, #0]
 80059f6:	4611      	mov	r1, r2
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	01d2      	lsls	r2, r2, #7
 80059fc:	440a      	add	r2, r1
 80059fe:	3284      	adds	r2, #132	@ 0x84
 8005a00:	f043 0301 	orr.w	r3, r3, #1
 8005a04:	6013      	str	r3, [r2, #0]
}
 8005a06:	bf00      	nop
 8005a08:	3724      	adds	r7, #36	@ 0x24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	fffff8f8 	.word	0xfffff8f8
 8005a18:	fffff800 	.word	0xfffff800

08005a1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a20:	4b05      	ldr	r3, [pc, #20]	@ (8005a38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a04      	ldr	r2, [pc, #16]	@ (8005a38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a2a:	6013      	str	r3, [r2, #0]
}
 8005a2c:	bf00      	nop
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40007000 	.word	0x40007000

08005a3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a46:	4b23      	ldr	r3, [pc, #140]	@ (8005ad4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4a:	4a22      	ldr	r2, [pc, #136]	@ (8005ad4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a52:	4b20      	ldr	r3, [pc, #128]	@ (8005ad4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1d      	ldr	r2, [pc, #116]	@ (8005ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a6a:	f7fd fdbd 	bl	80035e8 <HAL_GetTick>
 8005a6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a70:	e009      	b.n	8005a86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a72:	f7fd fdb9 	bl	80035e8 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a80:	d901      	bls.n	8005a86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e022      	b.n	8005acc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a86:	4b14      	ldr	r3, [pc, #80]	@ (8005ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a92:	d1ee      	bne.n	8005a72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005a94:	4b10      	ldr	r3, [pc, #64]	@ (8005ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a0f      	ldr	r2, [pc, #60]	@ (8005ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005aa0:	f7fd fda2 	bl	80035e8 <HAL_GetTick>
 8005aa4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005aa6:	e009      	b.n	8005abc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005aa8:	f7fd fd9e 	bl	80035e8 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ab6:	d901      	bls.n	8005abc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e007      	b.n	8005acc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005abc:	4b06      	ldr	r3, [pc, #24]	@ (8005ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ac8:	d1ee      	bne.n	8005aa8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	40007000 	.word	0x40007000

08005adc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e25c      	b.n	8005fac <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 8087 	beq.w	8005c0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b00:	4b96      	ldr	r3, [pc, #600]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 030c 	and.w	r3, r3, #12
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d00c      	beq.n	8005b26 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b0c:	4b93      	ldr	r3, [pc, #588]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 030c 	and.w	r3, r3, #12
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d112      	bne.n	8005b3e <HAL_RCC_OscConfig+0x62>
 8005b18:	4b90      	ldr	r3, [pc, #576]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b24:	d10b      	bne.n	8005b3e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b26:	4b8d      	ldr	r3, [pc, #564]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d06c      	beq.n	8005c0c <HAL_RCC_OscConfig+0x130>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d168      	bne.n	8005c0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e236      	b.n	8005fac <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b46:	d106      	bne.n	8005b56 <HAL_RCC_OscConfig+0x7a>
 8005b48:	4b84      	ldr	r3, [pc, #528]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a83      	ldr	r2, [pc, #524]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	e02e      	b.n	8005bb4 <HAL_RCC_OscConfig+0xd8>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10c      	bne.n	8005b78 <HAL_RCC_OscConfig+0x9c>
 8005b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a7e      	ldr	r2, [pc, #504]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005b64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	4b7c      	ldr	r3, [pc, #496]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a7b      	ldr	r2, [pc, #492]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005b70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	e01d      	b.n	8005bb4 <HAL_RCC_OscConfig+0xd8>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b80:	d10c      	bne.n	8005b9c <HAL_RCC_OscConfig+0xc0>
 8005b82:	4b76      	ldr	r3, [pc, #472]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a75      	ldr	r2, [pc, #468]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005b88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	4b73      	ldr	r3, [pc, #460]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a72      	ldr	r2, [pc, #456]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	e00b      	b.n	8005bb4 <HAL_RCC_OscConfig+0xd8>
 8005b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a6e      	ldr	r2, [pc, #440]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a6b      	ldr	r2, [pc, #428]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005bae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d013      	beq.n	8005be4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbc:	f7fd fd14 	bl	80035e8 <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bc4:	f7fd fd10 	bl	80035e8 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b64      	cmp	r3, #100	@ 0x64
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e1ea      	b.n	8005fac <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bd6:	4b61      	ldr	r3, [pc, #388]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0f0      	beq.n	8005bc4 <HAL_RCC_OscConfig+0xe8>
 8005be2:	e014      	b.n	8005c0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be4:	f7fd fd00 	bl	80035e8 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bec:	f7fd fcfc 	bl	80035e8 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b64      	cmp	r3, #100	@ 0x64
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e1d6      	b.n	8005fac <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bfe:	4b57      	ldr	r3, [pc, #348]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f0      	bne.n	8005bec <HAL_RCC_OscConfig+0x110>
 8005c0a:	e000      	b.n	8005c0e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d069      	beq.n	8005cee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c1a:	4b50      	ldr	r3, [pc, #320]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 030c 	and.w	r3, r3, #12
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00b      	beq.n	8005c3e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c26:	4b4d      	ldr	r3, [pc, #308]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 030c 	and.w	r3, r3, #12
 8005c2e:	2b08      	cmp	r3, #8
 8005c30:	d11c      	bne.n	8005c6c <HAL_RCC_OscConfig+0x190>
 8005c32:	4b4a      	ldr	r3, [pc, #296]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d116      	bne.n	8005c6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c3e:	4b47      	ldr	r3, [pc, #284]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <HAL_RCC_OscConfig+0x17a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d001      	beq.n	8005c56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e1aa      	b.n	8005fac <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c56:	4b41      	ldr	r3, [pc, #260]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	493d      	ldr	r1, [pc, #244]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c6a:	e040      	b.n	8005cee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d023      	beq.n	8005cbc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c74:	4b39      	ldr	r3, [pc, #228]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a38      	ldr	r2, [pc, #224]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c80:	f7fd fcb2 	bl	80035e8 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c88:	f7fd fcae 	bl	80035e8 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e188      	b.n	8005fac <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c9a:	4b30      	ldr	r3, [pc, #192]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0f0      	beq.n	8005c88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	4929      	ldr	r1, [pc, #164]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	600b      	str	r3, [r1, #0]
 8005cba:	e018      	b.n	8005cee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cbc:	4b27      	ldr	r3, [pc, #156]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a26      	ldr	r2, [pc, #152]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005cc2:	f023 0301 	bic.w	r3, r3, #1
 8005cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc8:	f7fd fc8e 	bl	80035e8 <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cd0:	f7fd fc8a 	bl	80035e8 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e164      	b.n	8005fac <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1f0      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0308 	and.w	r3, r3, #8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d038      	beq.n	8005d6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d019      	beq.n	8005d36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d02:	4b16      	ldr	r3, [pc, #88]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d06:	4a15      	ldr	r2, [pc, #84]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d0e:	f7fd fc6b 	bl	80035e8 <HAL_GetTick>
 8005d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d14:	e008      	b.n	8005d28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d16:	f7fd fc67 	bl	80035e8 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e141      	b.n	8005fac <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d28:	4b0c      	ldr	r3, [pc, #48]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0f0      	beq.n	8005d16 <HAL_RCC_OscConfig+0x23a>
 8005d34:	e01a      	b.n	8005d6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d36:	4b09      	ldr	r3, [pc, #36]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d3a:	4a08      	ldr	r2, [pc, #32]	@ (8005d5c <HAL_RCC_OscConfig+0x280>)
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d42:	f7fd fc51 	bl	80035e8 <HAL_GetTick>
 8005d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d48:	e00a      	b.n	8005d60 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d4a:	f7fd fc4d 	bl	80035e8 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d903      	bls.n	8005d60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e127      	b.n	8005fac <HAL_RCC_OscConfig+0x4d0>
 8005d5c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d60:	4b94      	ldr	r3, [pc, #592]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1ee      	bne.n	8005d4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 80a4 	beq.w	8005ec2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d7a:	4b8e      	ldr	r3, [pc, #568]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10d      	bne.n	8005da2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d86:	4b8b      	ldr	r3, [pc, #556]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8a:	4a8a      	ldr	r2, [pc, #552]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d92:	4b88      	ldr	r3, [pc, #544]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005da2:	4b85      	ldr	r3, [pc, #532]	@ (8005fb8 <HAL_RCC_OscConfig+0x4dc>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d118      	bne.n	8005de0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005dae:	4b82      	ldr	r3, [pc, #520]	@ (8005fb8 <HAL_RCC_OscConfig+0x4dc>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a81      	ldr	r2, [pc, #516]	@ (8005fb8 <HAL_RCC_OscConfig+0x4dc>)
 8005db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dba:	f7fd fc15 	bl	80035e8 <HAL_GetTick>
 8005dbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005dc2:	f7fd fc11 	bl	80035e8 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b64      	cmp	r3, #100	@ 0x64
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e0eb      	b.n	8005fac <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dd4:	4b78      	ldr	r3, [pc, #480]	@ (8005fb8 <HAL_RCC_OscConfig+0x4dc>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f0      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d106      	bne.n	8005df6 <HAL_RCC_OscConfig+0x31a>
 8005de8:	4b72      	ldr	r3, [pc, #456]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dec:	4a71      	ldr	r2, [pc, #452]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005dee:	f043 0301 	orr.w	r3, r3, #1
 8005df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005df4:	e02d      	b.n	8005e52 <HAL_RCC_OscConfig+0x376>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10c      	bne.n	8005e18 <HAL_RCC_OscConfig+0x33c>
 8005dfe:	4b6d      	ldr	r3, [pc, #436]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e02:	4a6c      	ldr	r2, [pc, #432]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005e04:	f023 0301 	bic.w	r3, r3, #1
 8005e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e0a:	4b6a      	ldr	r3, [pc, #424]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e0e:	4a69      	ldr	r2, [pc, #420]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005e10:	f023 0304 	bic.w	r3, r3, #4
 8005e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e16:	e01c      	b.n	8005e52 <HAL_RCC_OscConfig+0x376>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2b05      	cmp	r3, #5
 8005e1e:	d10c      	bne.n	8005e3a <HAL_RCC_OscConfig+0x35e>
 8005e20:	4b64      	ldr	r3, [pc, #400]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e24:	4a63      	ldr	r2, [pc, #396]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005e26:	f043 0304 	orr.w	r3, r3, #4
 8005e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e2c:	4b61      	ldr	r3, [pc, #388]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e30:	4a60      	ldr	r2, [pc, #384]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005e32:	f043 0301 	orr.w	r3, r3, #1
 8005e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e38:	e00b      	b.n	8005e52 <HAL_RCC_OscConfig+0x376>
 8005e3a:	4b5e      	ldr	r3, [pc, #376]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e3e:	4a5d      	ldr	r2, [pc, #372]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005e40:	f023 0301 	bic.w	r3, r3, #1
 8005e44:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e46:	4b5b      	ldr	r3, [pc, #364]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e4a:	4a5a      	ldr	r2, [pc, #360]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005e4c:	f023 0304 	bic.w	r3, r3, #4
 8005e50:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d015      	beq.n	8005e86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5a:	f7fd fbc5 	bl	80035e8 <HAL_GetTick>
 8005e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e60:	e00a      	b.n	8005e78 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e62:	f7fd fbc1 	bl	80035e8 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d901      	bls.n	8005e78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e099      	b.n	8005fac <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e78:	4b4e      	ldr	r3, [pc, #312]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0ee      	beq.n	8005e62 <HAL_RCC_OscConfig+0x386>
 8005e84:	e014      	b.n	8005eb0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e86:	f7fd fbaf 	bl	80035e8 <HAL_GetTick>
 8005e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e8c:	e00a      	b.n	8005ea4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e8e:	f7fd fbab 	bl	80035e8 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e083      	b.n	8005fac <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea4:	4b43      	ldr	r3, [pc, #268]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1ee      	bne.n	8005e8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d105      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eba:	4a3e      	ldr	r2, [pc, #248]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005ebc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ec0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d06f      	beq.n	8005faa <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005eca:	4b3a      	ldr	r3, [pc, #232]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 030c 	and.w	r3, r3, #12
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d067      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d149      	bne.n	8005f72 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ede:	4b35      	ldr	r3, [pc, #212]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a34      	ldr	r2, [pc, #208]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005ee4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eea:	f7fd fb7d 	bl	80035e8 <HAL_GetTick>
 8005eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ef0:	e008      	b.n	8005f04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ef2:	f7fd fb79 	bl	80035e8 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e053      	b.n	8005fac <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f04:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1f0      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	69da      	ldr	r2, [r3, #28]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1e:	019b      	lsls	r3, r3, #6
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f26:	085b      	lsrs	r3, r3, #1
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	041b      	lsls	r3, r3, #16
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f32:	061b      	lsls	r3, r3, #24
 8005f34:	4313      	orrs	r3, r2
 8005f36:	4a1f      	ldr	r2, [pc, #124]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005f38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f3c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005f44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4a:	f7fd fb4d 	bl	80035e8 <HAL_GetTick>
 8005f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f50:	e008      	b.n	8005f64 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f52:	f7fd fb49 	bl	80035e8 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e023      	b.n	8005fac <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f64:	4b13      	ldr	r3, [pc, #76]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0f0      	beq.n	8005f52 <HAL_RCC_OscConfig+0x476>
 8005f70:	e01b      	b.n	8005faa <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f72:	4b10      	ldr	r3, [pc, #64]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a0f      	ldr	r2, [pc, #60]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005f78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7e:	f7fd fb33 	bl	80035e8 <HAL_GetTick>
 8005f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f84:	e008      	b.n	8005f98 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f86:	f7fd fb2f 	bl	80035e8 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e009      	b.n	8005fac <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f98:	4b06      	ldr	r3, [pc, #24]	@ (8005fb4 <HAL_RCC_OscConfig+0x4d8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1f0      	bne.n	8005f86 <HAL_RCC_OscConfig+0x4aa>
 8005fa4:	e001      	b.n	8005faa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	40007000 	.word	0x40007000

08005fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0ce      	b.n	8006172 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fd4:	4b69      	ldr	r3, [pc, #420]	@ (800617c <HAL_RCC_ClockConfig+0x1c0>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 030f 	and.w	r3, r3, #15
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d910      	bls.n	8006004 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fe2:	4b66      	ldr	r3, [pc, #408]	@ (800617c <HAL_RCC_ClockConfig+0x1c0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f023 020f 	bic.w	r2, r3, #15
 8005fea:	4964      	ldr	r1, [pc, #400]	@ (800617c <HAL_RCC_ClockConfig+0x1c0>)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff2:	4b62      	ldr	r3, [pc, #392]	@ (800617c <HAL_RCC_ClockConfig+0x1c0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d001      	beq.n	8006004 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e0b6      	b.n	8006172 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d020      	beq.n	8006052 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800601c:	4b58      	ldr	r3, [pc, #352]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	4a57      	ldr	r2, [pc, #348]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 8006022:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0308 	and.w	r3, r3, #8
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006034:	4b52      	ldr	r3, [pc, #328]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	4a51      	ldr	r2, [pc, #324]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 800603a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800603e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006040:	4b4f      	ldr	r3, [pc, #316]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	494c      	ldr	r1, [pc, #304]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 800604e:	4313      	orrs	r3, r2
 8006050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d040      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d107      	bne.n	8006076 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006066:	4b46      	ldr	r3, [pc, #280]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d115      	bne.n	800609e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e07d      	b.n	8006172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b02      	cmp	r3, #2
 800607c:	d107      	bne.n	800608e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800607e:	4b40      	ldr	r3, [pc, #256]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d109      	bne.n	800609e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e071      	b.n	8006172 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800608e:	4b3c      	ldr	r3, [pc, #240]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e069      	b.n	8006172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800609e:	4b38      	ldr	r3, [pc, #224]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f023 0203 	bic.w	r2, r3, #3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	4935      	ldr	r1, [pc, #212]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b0:	f7fd fa9a 	bl	80035e8 <HAL_GetTick>
 80060b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b6:	e00a      	b.n	80060ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b8:	f7fd fa96 	bl	80035e8 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e051      	b.n	8006172 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ce:	4b2c      	ldr	r3, [pc, #176]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f003 020c 	and.w	r2, r3, #12
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	429a      	cmp	r2, r3
 80060de:	d1eb      	bne.n	80060b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060e0:	4b26      	ldr	r3, [pc, #152]	@ (800617c <HAL_RCC_ClockConfig+0x1c0>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 030f 	and.w	r3, r3, #15
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d210      	bcs.n	8006110 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ee:	4b23      	ldr	r3, [pc, #140]	@ (800617c <HAL_RCC_ClockConfig+0x1c0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f023 020f 	bic.w	r2, r3, #15
 80060f6:	4921      	ldr	r1, [pc, #132]	@ (800617c <HAL_RCC_ClockConfig+0x1c0>)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060fe:	4b1f      	ldr	r3, [pc, #124]	@ (800617c <HAL_RCC_ClockConfig+0x1c0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d001      	beq.n	8006110 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e030      	b.n	8006172 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d008      	beq.n	800612e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800611c:	4b18      	ldr	r3, [pc, #96]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	4915      	ldr	r1, [pc, #84]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 800612a:	4313      	orrs	r3, r2
 800612c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d009      	beq.n	800614e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800613a:	4b11      	ldr	r3, [pc, #68]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	490d      	ldr	r1, [pc, #52]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 800614a:	4313      	orrs	r3, r2
 800614c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800614e:	f000 f81d 	bl	800618c <HAL_RCC_GetSysClockFreq>
 8006152:	4602      	mov	r2, r0
 8006154:	4b0a      	ldr	r3, [pc, #40]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	091b      	lsrs	r3, r3, #4
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	4909      	ldr	r1, [pc, #36]	@ (8006184 <HAL_RCC_ClockConfig+0x1c8>)
 8006160:	5ccb      	ldrb	r3, [r1, r3]
 8006162:	fa22 f303 	lsr.w	r3, r2, r3
 8006166:	4a08      	ldr	r2, [pc, #32]	@ (8006188 <HAL_RCC_ClockConfig+0x1cc>)
 8006168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800616a:	200f      	movs	r0, #15
 800616c:	f7fd f9f8 	bl	8003560 <HAL_InitTick>

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	40023c00 	.word	0x40023c00
 8006180:	40023800 	.word	0x40023800
 8006184:	0800fb4c 	.word	0x0800fb4c
 8006188:	20000058 	.word	0x20000058

0800618c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800618c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006190:	b090      	sub	sp, #64	@ 0x40
 8006192:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	637b      	str	r3, [r7, #52]	@ 0x34
 8006198:	2300      	movs	r3, #0
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800619c:	2300      	movs	r3, #0
 800619e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061a4:	4b59      	ldr	r3, [pc, #356]	@ (800630c <HAL_RCC_GetSysClockFreq+0x180>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 030c 	and.w	r3, r3, #12
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d00d      	beq.n	80061cc <HAL_RCC_GetSysClockFreq+0x40>
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	f200 80a1 	bhi.w	80062f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <HAL_RCC_GetSysClockFreq+0x34>
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d003      	beq.n	80061c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80061be:	e09b      	b.n	80062f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061c0:	4b53      	ldr	r3, [pc, #332]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x184>)
 80061c2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80061c4:	e09b      	b.n	80062fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061c6:	4b53      	ldr	r3, [pc, #332]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x188>)
 80061c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80061ca:	e098      	b.n	80062fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061cc:	4b4f      	ldr	r3, [pc, #316]	@ (800630c <HAL_RCC_GetSysClockFreq+0x180>)
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80061d6:	4b4d      	ldr	r3, [pc, #308]	@ (800630c <HAL_RCC_GetSysClockFreq+0x180>)
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d028      	beq.n	8006234 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061e2:	4b4a      	ldr	r3, [pc, #296]	@ (800630c <HAL_RCC_GetSysClockFreq+0x180>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	099b      	lsrs	r3, r3, #6
 80061e8:	2200      	movs	r2, #0
 80061ea:	623b      	str	r3, [r7, #32]
 80061ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80061f4:	2100      	movs	r1, #0
 80061f6:	4b47      	ldr	r3, [pc, #284]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x188>)
 80061f8:	fb03 f201 	mul.w	r2, r3, r1
 80061fc:	2300      	movs	r3, #0
 80061fe:	fb00 f303 	mul.w	r3, r0, r3
 8006202:	4413      	add	r3, r2
 8006204:	4a43      	ldr	r2, [pc, #268]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x188>)
 8006206:	fba0 1202 	umull	r1, r2, r0, r2
 800620a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800620c:	460a      	mov	r2, r1
 800620e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006210:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006212:	4413      	add	r3, r2
 8006214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006218:	2200      	movs	r2, #0
 800621a:	61bb      	str	r3, [r7, #24]
 800621c:	61fa      	str	r2, [r7, #28]
 800621e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006222:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006226:	f7fa fafd 	bl	8000824 <__aeabi_uldivmod>
 800622a:	4602      	mov	r2, r0
 800622c:	460b      	mov	r3, r1
 800622e:	4613      	mov	r3, r2
 8006230:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006232:	e053      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006234:	4b35      	ldr	r3, [pc, #212]	@ (800630c <HAL_RCC_GetSysClockFreq+0x180>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	099b      	lsrs	r3, r3, #6
 800623a:	2200      	movs	r2, #0
 800623c:	613b      	str	r3, [r7, #16]
 800623e:	617a      	str	r2, [r7, #20]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006246:	f04f 0b00 	mov.w	fp, #0
 800624a:	4652      	mov	r2, sl
 800624c:	465b      	mov	r3, fp
 800624e:	f04f 0000 	mov.w	r0, #0
 8006252:	f04f 0100 	mov.w	r1, #0
 8006256:	0159      	lsls	r1, r3, #5
 8006258:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800625c:	0150      	lsls	r0, r2, #5
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	ebb2 080a 	subs.w	r8, r2, sl
 8006266:	eb63 090b 	sbc.w	r9, r3, fp
 800626a:	f04f 0200 	mov.w	r2, #0
 800626e:	f04f 0300 	mov.w	r3, #0
 8006272:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006276:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800627a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800627e:	ebb2 0408 	subs.w	r4, r2, r8
 8006282:	eb63 0509 	sbc.w	r5, r3, r9
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	00eb      	lsls	r3, r5, #3
 8006290:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006294:	00e2      	lsls	r2, r4, #3
 8006296:	4614      	mov	r4, r2
 8006298:	461d      	mov	r5, r3
 800629a:	eb14 030a 	adds.w	r3, r4, sl
 800629e:	603b      	str	r3, [r7, #0]
 80062a0:	eb45 030b 	adc.w	r3, r5, fp
 80062a4:	607b      	str	r3, [r7, #4]
 80062a6:	f04f 0200 	mov.w	r2, #0
 80062aa:	f04f 0300 	mov.w	r3, #0
 80062ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062b2:	4629      	mov	r1, r5
 80062b4:	028b      	lsls	r3, r1, #10
 80062b6:	4621      	mov	r1, r4
 80062b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062bc:	4621      	mov	r1, r4
 80062be:	028a      	lsls	r2, r1, #10
 80062c0:	4610      	mov	r0, r2
 80062c2:	4619      	mov	r1, r3
 80062c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c6:	2200      	movs	r2, #0
 80062c8:	60bb      	str	r3, [r7, #8]
 80062ca:	60fa      	str	r2, [r7, #12]
 80062cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062d0:	f7fa faa8 	bl	8000824 <__aeabi_uldivmod>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4613      	mov	r3, r2
 80062da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80062dc:	4b0b      	ldr	r3, [pc, #44]	@ (800630c <HAL_RCC_GetSysClockFreq+0x180>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	0c1b      	lsrs	r3, r3, #16
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	3301      	adds	r3, #1
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80062ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80062ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80062f6:	e002      	b.n	80062fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062f8:	4b05      	ldr	r3, [pc, #20]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x184>)
 80062fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80062fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006300:	4618      	mov	r0, r3
 8006302:	3740      	adds	r7, #64	@ 0x40
 8006304:	46bd      	mov	sp, r7
 8006306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800630a:	bf00      	nop
 800630c:	40023800 	.word	0x40023800
 8006310:	00f42400 	.word	0x00f42400
 8006314:	017d7840 	.word	0x017d7840

08006318 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006318:	b480      	push	{r7}
 800631a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800631c:	4b03      	ldr	r3, [pc, #12]	@ (800632c <HAL_RCC_GetHCLKFreq+0x14>)
 800631e:	681b      	ldr	r3, [r3, #0]
}
 8006320:	4618      	mov	r0, r3
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	20000058 	.word	0x20000058

08006330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006334:	f7ff fff0 	bl	8006318 <HAL_RCC_GetHCLKFreq>
 8006338:	4602      	mov	r2, r0
 800633a:	4b05      	ldr	r3, [pc, #20]	@ (8006350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	0a9b      	lsrs	r3, r3, #10
 8006340:	f003 0307 	and.w	r3, r3, #7
 8006344:	4903      	ldr	r1, [pc, #12]	@ (8006354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006346:	5ccb      	ldrb	r3, [r1, r3]
 8006348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800634c:	4618      	mov	r0, r3
 800634e:	bd80      	pop	{r7, pc}
 8006350:	40023800 	.word	0x40023800
 8006354:	0800fb5c 	.word	0x0800fb5c

08006358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800635c:	f7ff ffdc 	bl	8006318 <HAL_RCC_GetHCLKFreq>
 8006360:	4602      	mov	r2, r0
 8006362:	4b05      	ldr	r3, [pc, #20]	@ (8006378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	0b5b      	lsrs	r3, r3, #13
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	4903      	ldr	r1, [pc, #12]	@ (800637c <HAL_RCC_GetPCLK2Freq+0x24>)
 800636e:	5ccb      	ldrb	r3, [r1, r3]
 8006370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006374:	4618      	mov	r0, r3
 8006376:	bd80      	pop	{r7, pc}
 8006378:	40023800 	.word	0x40023800
 800637c:	0800fb5c 	.word	0x0800fb5c

08006380 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006388:	2300      	movs	r3, #0
 800638a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800638c:	2300      	movs	r3, #0
 800638e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006398:	2300      	movs	r3, #0
 800639a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d012      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063a8:	4b69      	ldr	r3, [pc, #420]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	4a68      	ldr	r2, [pc, #416]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80063b2:	6093      	str	r3, [r2, #8]
 80063b4:	4b66      	ldr	r3, [pc, #408]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063bc:	4964      	ldr	r1, [pc, #400]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80063ca:	2301      	movs	r3, #1
 80063cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d017      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063da:	4b5d      	ldr	r3, [pc, #372]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063e0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e8:	4959      	ldr	r1, [pc, #356]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063f8:	d101      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80063fa:	2301      	movs	r3, #1
 80063fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006406:	2301      	movs	r3, #1
 8006408:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d017      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006416:	4b4e      	ldr	r3, [pc, #312]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800641c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006424:	494a      	ldr	r1, [pc, #296]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006430:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006434:	d101      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006436:	2301      	movs	r3, #1
 8006438:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006442:	2301      	movs	r3, #1
 8006444:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006452:	2301      	movs	r3, #1
 8006454:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 808b 	beq.w	800657a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006464:	4b3a      	ldr	r3, [pc, #232]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006468:	4a39      	ldr	r2, [pc, #228]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800646a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800646e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006470:	4b37      	ldr	r3, [pc, #220]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006478:	60bb      	str	r3, [r7, #8]
 800647a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800647c:	4b35      	ldr	r3, [pc, #212]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a34      	ldr	r2, [pc, #208]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006486:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006488:	f7fd f8ae 	bl	80035e8 <HAL_GetTick>
 800648c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800648e:	e008      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006490:	f7fd f8aa 	bl	80035e8 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	2b64      	cmp	r3, #100	@ 0x64
 800649c:	d901      	bls.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e357      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064a2:	4b2c      	ldr	r3, [pc, #176]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d0f0      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064ae:	4b28      	ldr	r3, [pc, #160]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d035      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d02e      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064cc:	4b20      	ldr	r3, [pc, #128]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064da:	4a1d      	ldr	r2, [pc, #116]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064e0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80064ee:	4a18      	ldr	r2, [pc, #96]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80064f4:	4b16      	ldr	r3, [pc, #88]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d014      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006500:	f7fd f872 	bl	80035e8 <HAL_GetTick>
 8006504:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006506:	e00a      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006508:	f7fd f86e 	bl	80035e8 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006516:	4293      	cmp	r3, r2
 8006518:	d901      	bls.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e319      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800651e:	4b0c      	ldr	r3, [pc, #48]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0ee      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800652e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006532:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006536:	d111      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006538:	4b05      	ldr	r3, [pc, #20]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006544:	4b04      	ldr	r3, [pc, #16]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006546:	400b      	ands	r3, r1
 8006548:	4901      	ldr	r1, [pc, #4]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800654a:	4313      	orrs	r3, r2
 800654c:	608b      	str	r3, [r1, #8]
 800654e:	e00b      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006550:	40023800 	.word	0x40023800
 8006554:	40007000 	.word	0x40007000
 8006558:	0ffffcff 	.word	0x0ffffcff
 800655c:	4baa      	ldr	r3, [pc, #680]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	4aa9      	ldr	r2, [pc, #676]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006562:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006566:	6093      	str	r3, [r2, #8]
 8006568:	4ba7      	ldr	r3, [pc, #668]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800656a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006574:	49a4      	ldr	r1, [pc, #656]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006576:	4313      	orrs	r3, r2
 8006578:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0310 	and.w	r3, r3, #16
 8006582:	2b00      	cmp	r3, #0
 8006584:	d010      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006586:	4ba0      	ldr	r3, [pc, #640]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800658c:	4a9e      	ldr	r2, [pc, #632]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800658e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006592:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006596:	4b9c      	ldr	r3, [pc, #624]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006598:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a0:	4999      	ldr	r1, [pc, #612]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065b4:	4b94      	ldr	r3, [pc, #592]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065c2:	4991      	ldr	r1, [pc, #580]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065d6:	4b8c      	ldr	r3, [pc, #560]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065e4:	4988      	ldr	r1, [pc, #544]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00a      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065f8:	4b83      	ldr	r3, [pc, #524]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006606:	4980      	ldr	r1, [pc, #512]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006608:	4313      	orrs	r3, r2
 800660a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800661a:	4b7b      	ldr	r3, [pc, #492]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800661c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006620:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006628:	4977      	ldr	r1, [pc, #476]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800662a:	4313      	orrs	r3, r2
 800662c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00a      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800663c:	4b72      	ldr	r3, [pc, #456]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006642:	f023 0203 	bic.w	r2, r3, #3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800664a:	496f      	ldr	r1, [pc, #444]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800664c:	4313      	orrs	r3, r2
 800664e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800665e:	4b6a      	ldr	r3, [pc, #424]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006664:	f023 020c 	bic.w	r2, r3, #12
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800666c:	4966      	ldr	r1, [pc, #408]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800666e:	4313      	orrs	r3, r2
 8006670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00a      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006680:	4b61      	ldr	r3, [pc, #388]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006686:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800668e:	495e      	ldr	r1, [pc, #376]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006690:	4313      	orrs	r3, r2
 8006692:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066a2:	4b59      	ldr	r3, [pc, #356]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066a8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b0:	4955      	ldr	r1, [pc, #340]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066c4:	4b50      	ldr	r3, [pc, #320]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d2:	494d      	ldr	r1, [pc, #308]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80066e6:	4b48      	ldr	r3, [pc, #288]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f4:	4944      	ldr	r1, [pc, #272]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006708:	4b3f      	ldr	r3, [pc, #252]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800670a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800670e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006716:	493c      	ldr	r1, [pc, #240]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006718:	4313      	orrs	r3, r2
 800671a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800672a:	4b37      	ldr	r3, [pc, #220]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800672c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006730:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006738:	4933      	ldr	r1, [pc, #204]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800673a:	4313      	orrs	r3, r2
 800673c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00a      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800674c:	4b2e      	ldr	r3, [pc, #184]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800674e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006752:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800675a:	492b      	ldr	r1, [pc, #172]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800675c:	4313      	orrs	r3, r2
 800675e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d011      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800676e:	4b26      	ldr	r3, [pc, #152]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006774:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800677c:	4922      	ldr	r1, [pc, #136]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800677e:	4313      	orrs	r3, r2
 8006780:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006788:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800678c:	d101      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800678e:	2301      	movs	r3, #1
 8006790:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800679e:	2301      	movs	r3, #1
 80067a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067ae:	4b16      	ldr	r3, [pc, #88]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067bc:	4912      	ldr	r1, [pc, #72]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00b      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80067d0:	4b0d      	ldr	r3, [pc, #52]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067e0:	4909      	ldr	r1, [pc, #36]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d005      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067f6:	f040 80d9 	bne.w	80069ac <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80067fa:	4b03      	ldr	r3, [pc, #12]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a02      	ldr	r2, [pc, #8]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006800:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006804:	6013      	str	r3, [r2, #0]
 8006806:	e001      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006808:	40023800 	.word	0x40023800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800680c:	f7fc feec 	bl	80035e8 <HAL_GetTick>
 8006810:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006814:	f7fc fee8 	bl	80035e8 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b64      	cmp	r3, #100	@ 0x64
 8006820:	d901      	bls.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e195      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006826:	4b6d      	ldr	r3, [pc, #436]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1f0      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x494>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d021      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006842:	2b00      	cmp	r3, #0
 8006844:	d11d      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006846:	4b65      	ldr	r3, [pc, #404]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006848:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800684c:	0c1b      	lsrs	r3, r3, #16
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006854:	4b61      	ldr	r3, [pc, #388]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006856:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800685a:	0e1b      	lsrs	r3, r3, #24
 800685c:	f003 030f 	and.w	r3, r3, #15
 8006860:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	019a      	lsls	r2, r3, #6
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	041b      	lsls	r3, r3, #16
 800686c:	431a      	orrs	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	061b      	lsls	r3, r3, #24
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	071b      	lsls	r3, r3, #28
 800687a:	4958      	ldr	r1, [pc, #352]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006896:	d00a      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d02e      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x582>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068ac:	d129      	bne.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x582>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80068ae:	4b4b      	ldr	r3, [pc, #300]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068b4:	0c1b      	lsrs	r3, r3, #16
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80068bc:	4b47      	ldr	r3, [pc, #284]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068c2:	0f1b      	lsrs	r3, r3, #28
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	019a      	lsls	r2, r3, #6
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	041b      	lsls	r3, r3, #16
 80068d4:	431a      	orrs	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	061b      	lsls	r3, r3, #24
 80068dc:	431a      	orrs	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	071b      	lsls	r3, r3, #28
 80068e2:	493e      	ldr	r1, [pc, #248]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80068ea:	4b3c      	ldr	r3, [pc, #240]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068f0:	f023 021f 	bic.w	r2, r3, #31
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f8:	3b01      	subs	r3, #1
 80068fa:	4938      	ldr	r1, [pc, #224]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01d      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800690e:	4b33      	ldr	r3, [pc, #204]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006914:	0e1b      	lsrs	r3, r3, #24
 8006916:	f003 030f 	and.w	r3, r3, #15
 800691a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800691c:	4b2f      	ldr	r3, [pc, #188]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800691e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006922:	0f1b      	lsrs	r3, r3, #28
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	019a      	lsls	r2, r3, #6
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	041b      	lsls	r3, r3, #16
 8006936:	431a      	orrs	r2, r3
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	061b      	lsls	r3, r3, #24
 800693c:	431a      	orrs	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	071b      	lsls	r3, r3, #28
 8006942:	4926      	ldr	r1, [pc, #152]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006944:	4313      	orrs	r3, r2
 8006946:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d011      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	019a      	lsls	r2, r3, #6
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	041b      	lsls	r3, r3, #16
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	061b      	lsls	r3, r3, #24
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	071b      	lsls	r3, r3, #28
 8006972:	491a      	ldr	r1, [pc, #104]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006974:	4313      	orrs	r3, r2
 8006976:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800697a:	4b18      	ldr	r3, [pc, #96]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a17      	ldr	r2, [pc, #92]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006980:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006986:	f7fc fe2f 	bl	80035e8 <HAL_GetTick>
 800698a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800698c:	e008      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x620>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800698e:	f7fc fe2b 	bl	80035e8 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b64      	cmp	r3, #100	@ 0x64
 800699a:	d901      	bls.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e0d8      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069a0:	4b0e      	ldr	r3, [pc, #56]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0f0      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	f040 80ce 	bne.w	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80069b4:	4b09      	ldr	r3, [pc, #36]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a08      	ldr	r2, [pc, #32]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069c0:	f7fc fe12 	bl	80035e8 <HAL_GetTick>
 80069c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80069c6:	e00b      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80069c8:	f7fc fe0e 	bl	80035e8 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b64      	cmp	r3, #100	@ 0x64
 80069d4:	d904      	bls.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e0bb      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80069da:	bf00      	nop
 80069dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80069e0:	4b5e      	ldr	r3, [pc, #376]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069ec:	d0ec      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x648>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d009      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d02e      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d12a      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006a16:	4b51      	ldr	r3, [pc, #324]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a1c:	0c1b      	lsrs	r3, r3, #16
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006a24:	4b4d      	ldr	r3, [pc, #308]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a2a:	0f1b      	lsrs	r3, r3, #28
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	019a      	lsls	r2, r3, #6
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	041b      	lsls	r3, r3, #16
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	061b      	lsls	r3, r3, #24
 8006a44:	431a      	orrs	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	071b      	lsls	r3, r3, #28
 8006a4a:	4944      	ldr	r1, [pc, #272]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006a52:	4b42      	ldr	r3, [pc, #264]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a58:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a60:	3b01      	subs	r3, #1
 8006a62:	021b      	lsls	r3, r3, #8
 8006a64:	493d      	ldr	r1, [pc, #244]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d022      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a80:	d11d      	bne.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006a82:	4b36      	ldr	r3, [pc, #216]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a88:	0e1b      	lsrs	r3, r3, #24
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006a90:	4b32      	ldr	r3, [pc, #200]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a96:	0f1b      	lsrs	r3, r3, #28
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	019a      	lsls	r2, r3, #6
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	041b      	lsls	r3, r3, #16
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	061b      	lsls	r3, r3, #24
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	071b      	lsls	r3, r3, #28
 8006ab6:	4929      	ldr	r1, [pc, #164]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d028      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006aca:	4b24      	ldr	r3, [pc, #144]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad0:	0e1b      	lsrs	r3, r3, #24
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006ad8:	4b20      	ldr	r3, [pc, #128]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ade:	0c1b      	lsrs	r3, r3, #16
 8006ae0:	f003 0303 	and.w	r3, r3, #3
 8006ae4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	019a      	lsls	r2, r3, #6
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	041b      	lsls	r3, r3, #16
 8006af0:	431a      	orrs	r2, r3
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	061b      	lsls	r3, r3, #24
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	071b      	lsls	r3, r3, #28
 8006afe:	4917      	ldr	r1, [pc, #92]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006b06:	4b15      	ldr	r3, [pc, #84]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b14:	4911      	ldr	r1, [pc, #68]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a0e      	ldr	r2, [pc, #56]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b28:	f7fc fd5e 	bl	80035e8 <HAL_GetTick>
 8006b2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b30:	f7fc fd5a 	bl	80035e8 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b64      	cmp	r3, #100	@ 0x64
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e007      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b42:	4b06      	ldr	r3, [pc, #24]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b4e:	d1ef      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3720      	adds	r7, #32
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	40023800 	.word	0x40023800

08006b60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006b7e:	f040 808d 	bne.w	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006b82:	4b93      	ldr	r3, [pc, #588]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b88:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006b90:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b98:	d07c      	beq.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ba0:	d87b      	bhi.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d004      	beq.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bae:	d039      	beq.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006bb0:	e073      	b.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006bb2:	4b87      	ldr	r3, [pc, #540]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d108      	bne.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006bbe:	4b84      	ldr	r3, [pc, #528]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bc6:	4a83      	ldr	r2, [pc, #524]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bcc:	613b      	str	r3, [r7, #16]
 8006bce:	e007      	b.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006bd0:	4b7f      	ldr	r3, [pc, #508]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bd8:	4a7f      	ldr	r2, [pc, #508]	@ (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bde:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006be0:	4b7b      	ldr	r3, [pc, #492]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be6:	0e1b      	lsrs	r3, r3, #24
 8006be8:	f003 030f 	and.w	r3, r3, #15
 8006bec:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006bee:	4b78      	ldr	r3, [pc, #480]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf4:	099b      	lsrs	r3, r3, #6
 8006bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	fb03 f202 	mul.w	r2, r3, r2
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c06:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006c08:	4b71      	ldr	r3, [pc, #452]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c0e:	0a1b      	lsrs	r3, r3, #8
 8006c10:	f003 031f 	and.w	r3, r3, #31
 8006c14:	3301      	adds	r3, #1
 8006c16:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c20:	617b      	str	r3, [r7, #20]
        break;
 8006c22:	e03b      	b.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006c24:	4b6a      	ldr	r3, [pc, #424]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d108      	bne.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c30:	4b67      	ldr	r3, [pc, #412]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c38:	4a66      	ldr	r2, [pc, #408]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3e:	613b      	str	r3, [r7, #16]
 8006c40:	e007      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006c42:	4b63      	ldr	r3, [pc, #396]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c4a:	4a63      	ldr	r2, [pc, #396]	@ (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c50:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006c52:	4b5f      	ldr	r3, [pc, #380]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c58:	0e1b      	lsrs	r3, r3, #24
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006c60:	4b5b      	ldr	r3, [pc, #364]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c66:	099b      	lsrs	r3, r3, #6
 8006c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	fb03 f202 	mul.w	r2, r3, r2
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c78:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006c7a:	4b55      	ldr	r3, [pc, #340]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c80:	f003 031f 	and.w	r3, r3, #31
 8006c84:	3301      	adds	r3, #1
 8006c86:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c90:	617b      	str	r3, [r7, #20]
        break;
 8006c92:	e003      	b.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c94:	4b51      	ldr	r3, [pc, #324]	@ (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006c96:	617b      	str	r3, [r7, #20]
        break;
 8006c98:	e000      	b.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8006c9a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ca2:	f040 808d 	bne.w	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cac:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006cb4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006cbc:	d07c      	beq.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006cc4:	d87b      	bhi.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d004      	beq.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cd2:	d039      	beq.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006cd4:	e073      	b.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d108      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cea:	4a3a      	ldr	r2, [pc, #232]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	e007      	b.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006cf4:	4b36      	ldr	r3, [pc, #216]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cfc:	4a36      	ldr	r2, [pc, #216]	@ (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d02:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006d04:	4b32      	ldr	r3, [pc, #200]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d0a:	0e1b      	lsrs	r3, r3, #24
 8006d0c:	f003 030f 	and.w	r3, r3, #15
 8006d10:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006d12:	4b2f      	ldr	r3, [pc, #188]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d18:	099b      	lsrs	r3, r3, #6
 8006d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	fb03 f202 	mul.w	r2, r3, r2
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006d2c:	4b28      	ldr	r3, [pc, #160]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d32:	0a1b      	lsrs	r3, r3, #8
 8006d34:	f003 031f 	and.w	r3, r3, #31
 8006d38:	3301      	adds	r3, #1
 8006d3a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d44:	617b      	str	r3, [r7, #20]
        break;
 8006d46:	e03b      	b.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006d48:	4b21      	ldr	r3, [pc, #132]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d108      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d54:	4b1e      	ldr	r3, [pc, #120]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d62:	613b      	str	r3, [r7, #16]
 8006d64:	e007      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006d66:	4b1a      	ldr	r3, [pc, #104]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d74:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006d76:	4b16      	ldr	r3, [pc, #88]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d7c:	0e1b      	lsrs	r3, r3, #24
 8006d7e:	f003 030f 	and.w	r3, r3, #15
 8006d82:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006d84:	4b12      	ldr	r3, [pc, #72]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d8a:	099b      	lsrs	r3, r3, #6
 8006d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	fb03 f202 	mul.w	r2, r3, r2
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006da4:	f003 031f 	and.w	r3, r3, #31
 8006da8:	3301      	adds	r3, #1
 8006daa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db4:	617b      	str	r3, [r7, #20]
        break;
 8006db6:	e003      	b.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006db8:	4b08      	ldr	r3, [pc, #32]	@ (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006dba:	617b      	str	r3, [r7, #20]
        break;
 8006dbc:	e000      	b.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8006dbe:	bf00      	nop
      }
    }
  }

  return frequency;
 8006dc0:	697b      	ldr	r3, [r7, #20]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	371c      	adds	r7, #28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	40023800 	.word	0x40023800
 8006dd4:	00f42400 	.word	0x00f42400
 8006dd8:	017d7840 	.word	0x017d7840
 8006ddc:	00bb8000 	.word	0x00bb8000

08006de0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8006dec:	2300      	movs	r3, #0
 8006dee:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8006df0:	2300      	movs	r3, #0
 8006df2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e14d      	b.n	800709a <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
  
  if(hsai->State == HAL_SAI_STATE_RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f003 fdca 	bl	800a9ac <HAL_SAI_MspInit>
  }
  
  hsai->State = HAL_SAI_STATE_BUSY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fb3b 	bl	800749c <SAI_Disable>
  
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d00c      	beq.n	8006e48 <HAL_SAI_Init+0x68>
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d80d      	bhi.n	8006e4e <HAL_SAI_Init+0x6e>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <HAL_SAI_Init+0x5c>
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d003      	beq.n	8006e42 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8006e3a:	e008      	b.n	8006e4e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	61fb      	str	r3, [r7, #28]
      break;
 8006e40:	e006      	b.n	8006e50 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006e42:	2310      	movs	r3, #16
 8006e44:	61fb      	str	r3, [r7, #28]
      break;
 8006e46:	e003      	b.n	8006e50 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006e48:	2320      	movs	r3, #32
 8006e4a:	61fb      	str	r3, [r7, #28]
      break;
 8006e4c:	e000      	b.n	8006e50 <HAL_SAI_Init+0x70>
    break;
 8006e4e:	bf00      	nop
  }
  
  switch(hsai->Init.Synchro)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d81e      	bhi.n	8006e96 <HAL_SAI_Init+0xb6>
 8006e58:	a201      	add	r2, pc, #4	@ (adr r2, 8006e60 <HAL_SAI_Init+0x80>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006e71 	.word	0x08006e71
 8006e64:	08006e77 	.word	0x08006e77
 8006e68:	08006e7f 	.word	0x08006e7f
 8006e6c:	08006e87 	.word	0x08006e87
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	617b      	str	r3, [r7, #20]
      }
      break;
 8006e74:	e010      	b.n	8006e98 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8006e76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e7a:	617b      	str	r3, [r7, #20]
      }
      break;
 8006e7c:	e00c      	b.n	8006e98 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8006e7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006e82:	617b      	str	r3, [r7, #20]
      }
      break;
 8006e84:	e008      	b.n	8006e98 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8006e86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006e8a:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	f043 0301 	orr.w	r3, r3, #1
 8006e92:	61fb      	str	r3, [r7, #28]
      }
      break;
 8006e94:	e000      	b.n	8006e98 <HAL_SAI_Init+0xb8>
  default:
    break;      
 8006e96:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a81      	ldr	r2, [pc, #516]	@ (80070a4 <HAL_SAI_Init+0x2c4>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d004      	beq.n	8006eac <HAL_SAI_Init+0xcc>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a80      	ldr	r2, [pc, #512]	@ (80070a8 <HAL_SAI_Init+0x2c8>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d103      	bne.n	8006eb4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006eac:	4a7f      	ldr	r2, [pc, #508]	@ (80070ac <HAL_SAI_Init+0x2cc>)
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	e002      	b.n	8006eba <HAL_SAI_Init+0xda>
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 8006eb4:	4a7e      	ldr	r2, [pc, #504]	@ (80070b0 <HAL_SAI_Init+0x2d0>)
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d043      	beq.n	8006f4a <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a76      	ldr	r2, [pc, #472]	@ (80070a4 <HAL_SAI_Init+0x2c4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d004      	beq.n	8006eda <HAL_SAI_Init+0xfa>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a74      	ldr	r2, [pc, #464]	@ (80070a8 <HAL_SAI_Init+0x2c8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d104      	bne.n	8006ee4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006eda:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006ede:	f7ff fe3f 	bl	8006b60 <HAL_RCCEx_GetPeriphCLKFreq>
 8006ee2:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a72      	ldr	r2, [pc, #456]	@ (80070b4 <HAL_SAI_Init+0x2d4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d004      	beq.n	8006ef8 <HAL_SAI_Init+0x118>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a71      	ldr	r2, [pc, #452]	@ (80070b8 <HAL_SAI_Init+0x2d8>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d104      	bne.n	8006f02 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006ef8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006efc:	f7ff fe30 	bl	8006b60 <HAL_RCCEx_GetPeriphCLKFreq>
 8006f00:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	4613      	mov	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	025b      	lsls	r3, r3, #9
 8006f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f18:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4a67      	ldr	r2, [pc, #412]	@ (80070bc <HAL_SAI_Init+0x2dc>)
 8006f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f22:	08da      	lsrs	r2, r3, #3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	621a      	str	r2, [r3, #32]
    
    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8006f28:	68f9      	ldr	r1, [r7, #12]
 8006f2a:	4b64      	ldr	r3, [pc, #400]	@ (80070bc <HAL_SAI_Init+0x2dc>)
 8006f2c:	fba3 2301 	umull	r2, r3, r3, r1
 8006f30:	08da      	lsrs	r2, r3, #3
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	1aca      	subs	r2, r1, r3
 8006f3c:	2a08      	cmp	r2, #8
 8006f3e:	d904      	bls.n	8006f4a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	1c5a      	adds	r2, r3, #1
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	621a      	str	r2, [r3, #32]
    }
  }
  
  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_SAI_Init+0x17a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d109      	bne.n	8006f6e <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d101      	bne.n	8006f66 <HAL_SAI_Init+0x186>
 8006f62:	2300      	movs	r3, #0
 8006f64:	e001      	b.n	8006f6a <HAL_SAI_Init+0x18a>
 8006f66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f6a:	61bb      	str	r3, [r7, #24]
 8006f6c:	e008      	b.n	8006f80 <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d102      	bne.n	8006f7c <HAL_SAI_Init+0x19c>
 8006f76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f7a:	e000      	b.n	8006f7e <HAL_SAI_Init+0x19e>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61bb      	str	r3, [r7, #24]
  }
  
  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6819      	ldr	r1, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	4b4d      	ldr	r3, [pc, #308]	@ (80070c0 <HAL_SAI_Init+0x2e0>)
 8006f8c:	400b      	ands	r3, r1
 8006f8e:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
  
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6819      	ldr	r1, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f9e:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006fa4:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006faa:	431a      	orrs	r2, r3
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ckstr_bits | syncen_bits |                               \
 8006fb8:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006fc4:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	051b      	lsls	r3, r3, #20
 8006fcc:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	601a      	str	r2, [r3, #0]
  
  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6859      	ldr	r1, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	4b38      	ldr	r3, [pc, #224]	@ (80070c4 <HAL_SAI_Init+0x2e4>)
 8006fe2:	400b      	ands	r3, r1
 8006fe4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6859      	ldr	r1, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	699a      	ldr	r2, [r3, #24]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	605a      	str	r2, [r3, #4]
  
  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6899      	ldr	r1, [r3, #8]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	4b2e      	ldr	r3, [pc, #184]	@ (80070c8 <HAL_SAI_Init+0x2e8>)
 8007010:	400b      	ands	r3, r1
 8007012:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6899      	ldr	r1, [r3, #8]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701e:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007024:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                          hsai->FrameInit.FSOffset |
 800702a:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                          hsai->FrameInit.FSDefinition |
 8007030:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007036:	3b01      	subs	r3, #1
 8007038:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800703a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	609a      	str	r2, [r3, #8]
  
  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68d9      	ldr	r1, [r3, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007052:	400b      	ands	r3, r1
 8007054:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68d9      	ldr	r1, [r3, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007064:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800706a:	041b      	lsls	r3, r3, #16
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007072:	3b01      	subs	r3, #1
 8007074:	021b      	lsls	r3, r3, #8
 8007076:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	430a      	orrs	r2, r1
 800707e:	60da      	str	r2, [r3, #12]
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  
  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3720      	adds	r7, #32
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	40015804 	.word	0x40015804
 80070a8:	40015824 	.word	0x40015824
 80070ac:	40015800 	.word	0x40015800
 80070b0:	40015c00 	.word	0x40015c00
 80070b4:	40015c04 	.word	0x40015c04
 80070b8:	40015c24 	.word	0x40015c24
 80070bc:	cccccccd 	.word	0xcccccccd
 80070c0:	ff05c010 	.word	0xff05c010
 80070c4:	ffff1ff0 	.word	0xffff1ff0
 80070c8:	fff88000 	.word	0xfff88000

080070cc <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t* pData, uint16_t Size, uint32_t Timeout)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	603b      	str	r3, [r7, #0]
 80070d8:	4613      	mov	r3, r2
 80070da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80070dc:	f7fc fa84 	bl	80035e8 <HAL_GetTick>
 80070e0:	6178      	str	r0, [r7, #20]

  if((pData == NULL ) || (Size == 0))
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <HAL_SAI_Transmit+0x22>
 80070e8:	88fb      	ldrh	r3, [r7, #6]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e0b6      	b.n	8007260 <HAL_SAI_Transmit+0x194>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	f040 80af 	bne.w	800725e <HAL_SAI_Transmit+0x192>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <HAL_SAI_Transmit+0x42>
 800710a:	2302      	movs	r3, #2
 800710c:	e0a8      	b.n	8007260 <HAL_SAI_Transmit+0x194>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->XferSize = Size;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	88fa      	ldrh	r2, [r7, #6]
 800711a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	88fa      	ldrh	r2, [r7, #6]
 8007122:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->pBuffPtr = pData;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2212      	movs	r2, #18
 8007130:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d17a      	bne.n	8007240 <HAL_SAI_Transmit+0x174>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 f958 	bl	8007400 <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800715e:	601a      	str	r2, [r3, #0]
    }

    while(hsai->XferCount > 0)
 8007160:	e06e      	b.n	8007240 <HAL_SAI_Transmit+0x174>
    {
      /* Write data if the FIFO is not full */
      if((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800716c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007170:	d035      	beq.n	80071de <HAL_SAI_Transmit+0x112>
      {
        if((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007176:	2b40      	cmp	r3, #64	@ 0x40
 8007178:	d10d      	bne.n	8007196 <HAL_SAI_Transmit+0xca>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800717e:	2b00      	cmp	r3, #0
 8007180:	d109      	bne.n	8007196 <HAL_SAI_Transmit+0xca>
        {
          hsai->Instance->DR = (*hsai->pBuffPtr++);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007186:	1c59      	adds	r1, r3, #1
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	6651      	str	r1, [r2, #100]	@ 0x64
 800718c:	781a      	ldrb	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	61da      	str	r2, [r3, #28]
 8007194:	e01a      	b.n	80071cc <HAL_SAI_Transmit+0x100>
        }
        else if(hsai->Init.DataSize <= SAI_DATASIZE_16)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800719a:	2b80      	cmp	r3, #128	@ 0x80
 800719c:	d80b      	bhi.n	80071b6 <HAL_SAI_Transmit+0xea>
        {
          hsai->Instance->DR = *((uint16_t *)hsai->pBuffPtr);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071a2:	881a      	ldrh	r2, [r3, #0]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr+= 2;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ae:	1c9a      	adds	r2, r3, #2
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	665a      	str	r2, [r3, #100]	@ 0x64
 80071b4:	e00a      	b.n	80071cc <HAL_SAI_Transmit+0x100>
        }
        else
        {
          hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6812      	ldr	r2, [r2, #0]
 80071c0:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr+= 4;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071c6:	1d1a      	adds	r2, r3, #4
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        hsai->XferCount--;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071d2:	3b01      	subs	r3, #1
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80071dc:	e030      	b.n	8007240 <HAL_SAI_Transmit+0x174>
      }
      else
      {
        /* Check for the Timeout */
        if((Timeout != HAL_MAX_DELAY) && ((Timeout == 0)||((HAL_GetTick() - tickstart) > Timeout)))
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e4:	d02c      	beq.n	8007240 <HAL_SAI_Transmit+0x174>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d007      	beq.n	80071fc <HAL_SAI_Transmit+0x130>
 80071ec:	f7fc f9fc 	bl	80035e8 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d221      	bcs.n	8007240 <HAL_SAI_Transmit+0x174>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007202:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f04f 32ff 	mov.w	r2, #4294967295
 8007214:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          SAI_Disable(hsai);
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 f940 	bl	800749c <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0208 	orr.w	r2, r2, #8
 800722a:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e00f      	b.n	8007260 <HAL_SAI_Transmit+0x194>
    while(hsai->XferCount > 0)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007246:	2b00      	cmp	r3, #0
 8007248:	d18b      	bne.n	8007162 <HAL_SAI_Transmit+0x96>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	e000      	b.n	8007260 <HAL_SAI_Transmit+0x194>
  }
  else
  {
    return HAL_BUSY;
 800725e:	2302      	movs	r3, #2
  }
}
 8007260:	4618      	mov	r0, r3
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <HAL_SAI_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	4613      	mov	r3, r2
 8007276:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007278:	f7fc f9b6 	bl	80035e8 <HAL_GetTick>
 800727c:	6178      	str	r0, [r7, #20]

  if((pData == NULL ) || (Size == 0))
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <HAL_SAI_Receive+0x22>
 8007284:	88fb      	ldrh	r3, [r7, #6]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_SAI_Receive+0x26>
  {
    return  HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e0b4      	b.n	80073f8 <HAL_SAI_Receive+0x190>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b01      	cmp	r3, #1
 8007298:	f040 80ad 	bne.w	80073f6 <HAL_SAI_Receive+0x18e>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d101      	bne.n	80072aa <HAL_SAI_Receive+0x42>
 80072a6:	2302      	movs	r3, #2
 80072a8:	e0a6      	b.n	80073f8 <HAL_SAI_Receive+0x190>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	88fa      	ldrh	r2, [r7, #6]
 80072bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	88fa      	ldrh	r2, [r7, #6]
 80072c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2222      	movs	r2, #34	@ 0x22
 80072cc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d178      	bne.n	80073d8 <HAL_SAI_Receive+0x170>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80072f4:	601a      	str	r2, [r3, #0]
    }

    /* Receive data */
    while(hsai->XferCount > 0)
 80072f6:	e06f      	b.n	80073d8 <HAL_SAI_Receive+0x170>
    {
      if((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_EMPTY)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d037      	beq.n	8007376 <HAL_SAI_Receive+0x10e>
      {
        if((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800730a:	2b40      	cmp	r3, #64	@ 0x40
 800730c:	d10e      	bne.n	800732c <HAL_SAI_Receive+0xc4>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10a      	bne.n	800732c <HAL_SAI_Receive+0xc4>
        {
          (*hsai->pBuffPtr++) = hsai->Instance->DR;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69d8      	ldr	r0, [r3, #28]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007320:	1c59      	adds	r1, r3, #1
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	6651      	str	r1, [r2, #100]	@ 0x64
 8007326:	b2c2      	uxtb	r2, r0
 8007328:	701a      	strb	r2, [r3, #0]
 800732a:	e01b      	b.n	8007364 <HAL_SAI_Receive+0xfc>
        }
        else if(hsai->Init.DataSize <= SAI_DATASIZE_16)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007330:	2b80      	cmp	r3, #128	@ 0x80
 8007332:	d80c      	bhi.n	800734e <HAL_SAI_Receive+0xe6>
        {
          *((uint16_t*)hsai->pBuffPtr) = hsai->Instance->DR;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	69da      	ldr	r2, [r3, #28]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800733e:	b292      	uxth	r2, r2
 8007340:	801a      	strh	r2, [r3, #0]
          hsai->pBuffPtr+= 2;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007346:	1c9a      	adds	r2, r3, #2
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	665a      	str	r2, [r3, #100]	@ 0x64
 800734c:	e00a      	b.n	8007364 <HAL_SAI_Receive+0xfc>
        }
        else
        {
          *((uint32_t*)hsai->pBuffPtr) = hsai->Instance->DR;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007356:	69d2      	ldr	r2, [r2, #28]
 8007358:	601a      	str	r2, [r3, #0]
          hsai->pBuffPtr+= 4;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800735e:	1d1a      	adds	r2, r3, #4
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        hsai->XferCount--;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800736a:	3b01      	subs	r3, #1
 800736c:	b29a      	uxth	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007374:	e030      	b.n	80073d8 <HAL_SAI_Receive+0x170>
      }
      else
      {
        /* Check for the Timeout */
        if((Timeout != HAL_MAX_DELAY) && ((Timeout == 0)||((HAL_GetTick() - tickstart) > Timeout)))
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737c:	d02c      	beq.n	80073d8 <HAL_SAI_Receive+0x170>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d007      	beq.n	8007394 <HAL_SAI_Receive+0x12c>
 8007384:	f7fc f930 	bl	80035e8 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	429a      	cmp	r2, r3
 8007392:	d221      	bcs.n	80073d8 <HAL_SAI_Receive+0x170>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800739a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f04f 32ff 	mov.w	r2, #4294967295
 80073ac:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          SAI_Disable(hsai);
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f000 f874 	bl	800749c <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0208 	orr.w	r2, r2, #8
 80073c2:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e00f      	b.n	80073f8 <HAL_SAI_Receive+0x190>
    while(hsai->XferCount > 0)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d18a      	bne.n	80072f8 <HAL_SAI_Receive+0x90>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	e000      	b.n	80073f8 <HAL_SAI_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 80073f6:	2302      	movs	r3, #2
  }
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* fill the fifo with data before to enabled the SAI */
  while(((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 8007408:	e034      	b.n	8007474 <SAI_FillFifo+0x74>
  {
    if((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800740e:	2b40      	cmp	r3, #64	@ 0x40
 8007410:	d10d      	bne.n	800742e <SAI_FillFifo+0x2e>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007416:	2b00      	cmp	r3, #0
 8007418:	d109      	bne.n	800742e <SAI_FillFifo+0x2e>
    {
      hsai->Instance->DR = (*hsai->pBuffPtr++);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800741e:	1c59      	adds	r1, r3, #1
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6651      	str	r1, [r2, #100]	@ 0x64
 8007424:	781a      	ldrb	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	61da      	str	r2, [r3, #28]
 800742c:	e01a      	b.n	8007464 <SAI_FillFifo+0x64>
    }
    else if(hsai->Init.DataSize <= SAI_DATASIZE_16)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007432:	2b80      	cmp	r3, #128	@ 0x80
 8007434:	d80b      	bhi.n	800744e <SAI_FillFifo+0x4e>
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6812      	ldr	r2, [r2, #0]
 8007440:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr+= 2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007446:	1c9a      	adds	r2, r3, #2
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	665a      	str	r2, [r3, #100]	@ 0x64
 800744c:	e00a      	b.n	8007464 <SAI_FillFifo+0x64>
    }
    else
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6812      	ldr	r2, [r2, #0]
 8007458:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr+= 4;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800745e:	1d1a      	adds	r2, r3, #4
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    hsai->XferCount--;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800746a:	3b01      	subs	r3, #1
 800746c:	b29a      	uxth	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  while(((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800747e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007482:	d004      	beq.n	800748e <SAI_FillFifo+0x8e>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1bd      	bne.n	800740a <SAI_FillFifo+0xa>
  }
}
 800748e:	bf00      	nop
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
	...

0800749c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800749c:	b490      	push	{r4, r7}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80074a4:	4b16      	ldr	r3, [pc, #88]	@ (8007500 <SAI_Disable+0x64>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a16      	ldr	r2, [pc, #88]	@ (8007504 <SAI_Disable+0x68>)
 80074aa:	fba2 2303 	umull	r2, r3, r2, r3
 80074ae:	0b1b      	lsrs	r3, r3, #12
 80074b0:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80074c4:	601a      	str	r2, [r3, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80074c6:	4623      	mov	r3, r4
 80074c8:	1e5c      	subs	r4, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <SAI_Disable+0x48>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	73fb      	strb	r3, [r7, #15]
      break;
 80074e2:	e006      	b.n	80074f2 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e9      	bne.n	80074c6 <SAI_Disable+0x2a>

  return status;
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bc90      	pop	{r4, r7}
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	20000058 	.word	0x20000058
 8007504:	95cbec1b 	.word	0x95cbec1b

08007508 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e025      	b.n	8007568 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	d106      	bne.n	8007536 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f003 fa31 	bl	800a998 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2202      	movs	r2, #2
 800753a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	3304      	adds	r3, #4
 8007546:	4619      	mov	r1, r3
 8007548:	4610      	mov	r0, r2
 800754a:	f001 faf1 	bl	8008b30 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6818      	ldr	r0, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	461a      	mov	r2, r3
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	f001 fb5b 	bl	8008c14 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d101      	bne.n	800758c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007588:	2302      	movs	r3, #2
 800758a:	e018      	b.n	80075be <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	68b9      	ldr	r1, [r7, #8]
 800759c:	4618      	mov	r0, r3
 800759e:	f001 fbb9 	bl	8008d14 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d104      	bne.n	80075b4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2205      	movs	r2, #5
 80075ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80075b2:	e003      	b.n	80075bc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d101      	bne.n	80075e0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80075dc:	2302      	movs	r3, #2
 80075de:	e00e      	b.n	80075fe <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f001 fbb1 	bl	8008d56 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8007606:	b580      	push	{r7, lr}
 8007608:	b082      	sub	sp, #8
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e01d      	b.n	8007654 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d106      	bne.n	8007632 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f002 ff49 	bl	800a4c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2202      	movs	r2, #2
 8007636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	3304      	adds	r3, #4
 8007642:	4619      	mov	r1, r3
 8007644:	4610      	mov	r0, r2
 8007646:	f000 f93f 	bl	80078c8 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <HAL_TIM_Base_Start>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2202      	movs	r2, #2
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f042 0201 	orr.w	r2, r2, #1
 800767a:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  /* Return function status */
  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e01d      	b.n	80076e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d106      	bne.n	80076be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f002 ffd1 	bl	800a660 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2202      	movs	r2, #2
 80076c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	3304      	adds	r3, #4
 80076ce:	4619      	mov	r1, r3
 80076d0:	4610      	mov	r0, r2
 80076d2:	f000 f8f9 	bl	80078c8 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}  
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d101      	bne.n	8007704 <HAL_TIM_ConfigClockSource+0x1c>
 8007700:	2302      	movs	r3, #2
 8007702:	e0d8      	b.n	80078b6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4b68      	ldr	r3, [pc, #416]	@ (80078c0 <HAL_TIM_ConfigClockSource+0x1d8>)
 8007720:	4013      	ands	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800772a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800773c:	d052      	beq.n	80077e4 <HAL_TIM_ConfigClockSource+0xfc>
 800773e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007742:	f200 80ae 	bhi.w	80078a2 <HAL_TIM_ConfigClockSource+0x1ba>
 8007746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800774a:	d027      	beq.n	800779c <HAL_TIM_ConfigClockSource+0xb4>
 800774c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007750:	f200 80a7 	bhi.w	80078a2 <HAL_TIM_ConfigClockSource+0x1ba>
 8007754:	2b70      	cmp	r3, #112	@ 0x70
 8007756:	d02a      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0xc6>
 8007758:	2b70      	cmp	r3, #112	@ 0x70
 800775a:	f200 80a2 	bhi.w	80078a2 <HAL_TIM_ConfigClockSource+0x1ba>
 800775e:	2b60      	cmp	r3, #96	@ 0x60
 8007760:	d063      	beq.n	800782a <HAL_TIM_ConfigClockSource+0x142>
 8007762:	2b60      	cmp	r3, #96	@ 0x60
 8007764:	f200 809d 	bhi.w	80078a2 <HAL_TIM_ConfigClockSource+0x1ba>
 8007768:	2b50      	cmp	r3, #80	@ 0x50
 800776a:	d04e      	beq.n	800780a <HAL_TIM_ConfigClockSource+0x122>
 800776c:	2b50      	cmp	r3, #80	@ 0x50
 800776e:	f200 8098 	bhi.w	80078a2 <HAL_TIM_ConfigClockSource+0x1ba>
 8007772:	2b40      	cmp	r3, #64	@ 0x40
 8007774:	d069      	beq.n	800784a <HAL_TIM_ConfigClockSource+0x162>
 8007776:	2b40      	cmp	r3, #64	@ 0x40
 8007778:	f200 8093 	bhi.w	80078a2 <HAL_TIM_ConfigClockSource+0x1ba>
 800777c:	2b30      	cmp	r3, #48	@ 0x30
 800777e:	f000 8089 	beq.w	8007894 <HAL_TIM_ConfigClockSource+0x1ac>
 8007782:	2b30      	cmp	r3, #48	@ 0x30
 8007784:	f200 808d 	bhi.w	80078a2 <HAL_TIM_ConfigClockSource+0x1ba>
 8007788:	2b20      	cmp	r3, #32
 800778a:	d07c      	beq.n	8007886 <HAL_TIM_ConfigClockSource+0x19e>
 800778c:	2b20      	cmp	r3, #32
 800778e:	f200 8088 	bhi.w	80078a2 <HAL_TIM_ConfigClockSource+0x1ba>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d069      	beq.n	800786a <HAL_TIM_ConfigClockSource+0x182>
 8007796:	2b10      	cmp	r3, #16
 8007798:	d06e      	beq.n	8007878 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 800779a:	e082      	b.n	80078a2 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6899      	ldr	r1, [r3, #8]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	4b47      	ldr	r3, [pc, #284]	@ (80078c4 <HAL_TIM_ConfigClockSource+0x1dc>)
 80077a8:	400b      	ands	r3, r1
 80077aa:	6093      	str	r3, [r2, #8]
    break;
 80077ac:	e07a      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance, 
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6818      	ldr	r0, [r3, #0]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	6899      	ldr	r1, [r3, #8]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f000 fb86 	bl	8007ece <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4b3c      	ldr	r3, [pc, #240]	@ (80078c0 <HAL_TIM_ConfigClockSource+0x1d8>)
 80077ce:	4013      	ands	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80077d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	609a      	str	r2, [r3, #8]
    break;
 80077e2:	e05f      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance, 
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6818      	ldr	r0, [r3, #0]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	6899      	ldr	r1, [r3, #8]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	f000 fb6b 	bl	8007ece <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007806:	609a      	str	r2, [r3, #8]
    break;
 8007808:	e04c      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6818      	ldr	r0, [r3, #0]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	6859      	ldr	r1, [r3, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	461a      	mov	r2, r3
 8007818:	f000 fad2 	bl	8007dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2150      	movs	r1, #80	@ 0x50
 8007822:	4618      	mov	r0, r3
 8007824:	f000 fb33 	bl	8007e8e <TIM_ITRx_SetConfig>
    break;
 8007828:	e03c      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	6859      	ldr	r1, [r3, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	461a      	mov	r2, r3
 8007838:	f000 faf5 	bl	8007e26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2160      	movs	r1, #96	@ 0x60
 8007842:	4618      	mov	r0, r3
 8007844:	f000 fb23 	bl	8007e8e <TIM_ITRx_SetConfig>
    break;
 8007848:	e02c      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6818      	ldr	r0, [r3, #0]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	6859      	ldr	r1, [r3, #4]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	461a      	mov	r2, r3
 8007858:	f000 fab2 	bl	8007dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2140      	movs	r1, #64	@ 0x40
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fb13 	bl	8007e8e <TIM_ITRx_SetConfig>
    break;
 8007868:	e01c      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2100      	movs	r1, #0
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fb0c 	bl	8007e8e <TIM_ITRx_SetConfig>
    break;
 8007876:	e015      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2110      	movs	r1, #16
 800787e:	4618      	mov	r0, r3
 8007880:	f000 fb05 	bl	8007e8e <TIM_ITRx_SetConfig>
    break;
 8007884:	e00e      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2120      	movs	r1, #32
 800788c:	4618      	mov	r0, r3
 800788e:	f000 fafe 	bl	8007e8e <TIM_ITRx_SetConfig>
    break;
 8007892:	e007      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2130      	movs	r1, #48	@ 0x30
 800789a:	4618      	mov	r0, r3
 800789c:	f000 faf7 	bl	8007e8e <TIM_ITRx_SetConfig>
    break;
 80078a0:	e000      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x1bc>
    break;    
 80078a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  __HAL_UNLOCK(htim);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	fffeff88 	.word	0xfffeff88
 80078c4:	fffefff8 	.word	0xfffefff8

080078c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a47      	ldr	r2, [pc, #284]	@ (80079fc <TIM_Base_SetConfig+0x134>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d013      	beq.n	800790c <TIM_Base_SetConfig+0x44>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ea:	d00f      	beq.n	800790c <TIM_Base_SetConfig+0x44>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a44      	ldr	r2, [pc, #272]	@ (8007a00 <TIM_Base_SetConfig+0x138>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d00b      	beq.n	800790c <TIM_Base_SetConfig+0x44>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a43      	ldr	r2, [pc, #268]	@ (8007a04 <TIM_Base_SetConfig+0x13c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d007      	beq.n	800790c <TIM_Base_SetConfig+0x44>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a42      	ldr	r2, [pc, #264]	@ (8007a08 <TIM_Base_SetConfig+0x140>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d003      	beq.n	800790c <TIM_Base_SetConfig+0x44>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a41      	ldr	r2, [pc, #260]	@ (8007a0c <TIM_Base_SetConfig+0x144>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d101      	bne.n	8007910 <TIM_Base_SetConfig+0x48>
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <TIM_Base_SetConfig+0x4a>
 8007910:	2300      	movs	r3, #0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d008      	beq.n	8007928 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800791c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	4313      	orrs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a34      	ldr	r2, [pc, #208]	@ (80079fc <TIM_Base_SetConfig+0x134>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d02b      	beq.n	8007988 <TIM_Base_SetConfig+0xc0>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007936:	d027      	beq.n	8007988 <TIM_Base_SetConfig+0xc0>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a31      	ldr	r2, [pc, #196]	@ (8007a00 <TIM_Base_SetConfig+0x138>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d023      	beq.n	8007988 <TIM_Base_SetConfig+0xc0>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a30      	ldr	r2, [pc, #192]	@ (8007a04 <TIM_Base_SetConfig+0x13c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d01f      	beq.n	8007988 <TIM_Base_SetConfig+0xc0>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a2f      	ldr	r2, [pc, #188]	@ (8007a08 <TIM_Base_SetConfig+0x140>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d01b      	beq.n	8007988 <TIM_Base_SetConfig+0xc0>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a2e      	ldr	r2, [pc, #184]	@ (8007a0c <TIM_Base_SetConfig+0x144>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d017      	beq.n	8007988 <TIM_Base_SetConfig+0xc0>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a2d      	ldr	r2, [pc, #180]	@ (8007a10 <TIM_Base_SetConfig+0x148>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d013      	beq.n	8007988 <TIM_Base_SetConfig+0xc0>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a2c      	ldr	r2, [pc, #176]	@ (8007a14 <TIM_Base_SetConfig+0x14c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d00f      	beq.n	8007988 <TIM_Base_SetConfig+0xc0>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a2b      	ldr	r2, [pc, #172]	@ (8007a18 <TIM_Base_SetConfig+0x150>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00b      	beq.n	8007988 <TIM_Base_SetConfig+0xc0>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a2a      	ldr	r2, [pc, #168]	@ (8007a1c <TIM_Base_SetConfig+0x154>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d007      	beq.n	8007988 <TIM_Base_SetConfig+0xc0>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a29      	ldr	r2, [pc, #164]	@ (8007a20 <TIM_Base_SetConfig+0x158>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d003      	beq.n	8007988 <TIM_Base_SetConfig+0xc0>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a28      	ldr	r2, [pc, #160]	@ (8007a24 <TIM_Base_SetConfig+0x15c>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d101      	bne.n	800798c <TIM_Base_SetConfig+0xc4>
 8007988:	2301      	movs	r3, #1
 800798a:	e000      	b.n	800798e <TIM_Base_SetConfig+0xc6>
 800798c:	2300      	movs	r3, #0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d008      	beq.n	80079a4 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	689a      	ldr	r2, [r3, #8]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	62da      	str	r2, [r3, #44]	@ 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	629a      	str	r2, [r3, #40]	@ 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a0c      	ldr	r2, [pc, #48]	@ (80079fc <TIM_Base_SetConfig+0x134>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d003      	beq.n	80079d8 <TIM_Base_SetConfig+0x110>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a0e      	ldr	r2, [pc, #56]	@ (8007a0c <TIM_Base_SetConfig+0x144>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d101      	bne.n	80079dc <TIM_Base_SetConfig+0x114>
 80079d8:	2301      	movs	r3, #1
 80079da:	e000      	b.n	80079de <TIM_Base_SetConfig+0x116>
 80079dc:	2300      	movs	r3, #0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	691a      	ldr	r2, [r3, #16]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	615a      	str	r2, [r3, #20]
}
 80079f0:	bf00      	nop
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	40010000 	.word	0x40010000
 8007a00:	40000400 	.word	0x40000400
 8007a04:	40000800 	.word	0x40000800
 8007a08:	40000c00 	.word	0x40000c00
 8007a0c:	40010400 	.word	0x40010400
 8007a10:	40014000 	.word	0x40014000
 8007a14:	40014400 	.word	0x40014400
 8007a18:	40014800 	.word	0x40014800
 8007a1c:	40001800 	.word	0x40001800
 8007a20:	40001c00 	.word	0x40001c00
 8007a24:	40002000 	.word	0x40002000

08007a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8007a32:	2300      	movs	r3, #0
 8007a34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;  
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	f023 0201 	bic.w	r2, r3, #1
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8007b08 <TIM_OC1_SetConfig+0xe0>)
 8007a60:	4013      	ands	r3, r2
 8007a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0303 	bic.w	r3, r3, #3
 8007a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f023 0302 	bic.w	r3, r3, #2
 8007a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a20      	ldr	r2, [pc, #128]	@ (8007b0c <TIM_OC1_SetConfig+0xe4>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d003      	beq.n	8007a98 <TIM_OC1_SetConfig+0x70>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a1f      	ldr	r2, [pc, #124]	@ (8007b10 <TIM_OC1_SetConfig+0xe8>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d101      	bne.n	8007a9c <TIM_OC1_SetConfig+0x74>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e000      	b.n	8007a9e <TIM_OC1_SetConfig+0x76>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d01e      	beq.n	8007ae0 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f023 0308 	bic.w	r3, r3, #8
 8007aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f023 0304 	bic.w	r3, r3, #4
 8007aba:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ac2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007aca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	635a      	str	r2, [r3, #52]	@ 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	621a      	str	r2, [r3, #32]
} 
 8007afa:	bf00      	nop
 8007afc:	371c      	adds	r7, #28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	fffeff8f 	.word	0xfffeff8f
 8007b0c:	40010000 	.word	0x40010000
 8007b10:	40010400 	.word	0x40010400

08007b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 8007b26:	2300      	movs	r3, #0
 8007b28:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	f023 0210 	bic.w	r2, r3, #16
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8007bfc <TIM_OC2_SetConfig+0xe8>)
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b56:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	021b      	lsls	r3, r3, #8
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f023 0320 	bic.w	r3, r3, #32
 8007b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	011b      	lsls	r3, r3, #4
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a21      	ldr	r2, [pc, #132]	@ (8007c00 <TIM_OC2_SetConfig+0xec>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d003      	beq.n	8007b88 <TIM_OC2_SetConfig+0x74>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a20      	ldr	r2, [pc, #128]	@ (8007c04 <TIM_OC2_SetConfig+0xf0>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d101      	bne.n	8007b8c <TIM_OC2_SetConfig+0x78>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e000      	b.n	8007b8e <TIM_OC2_SetConfig+0x7a>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d021      	beq.n	8007bd6 <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	011b      	lsls	r3, r3, #4
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bac:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	621a      	str	r2, [r3, #32]
}
 8007bf0:	bf00      	nop
 8007bf2:	371c      	adds	r7, #28
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	feff8fff 	.word	0xfeff8fff
 8007c00:	40010000 	.word	0x40010000
 8007c04:	40010400 	.word	0x40010400

08007c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8007c16:	2300      	movs	r3, #0
 8007c18:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;   
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8007cf0 <TIM_OC3_SetConfig+0xe8>)
 8007c40:	4013      	ands	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 0303 	bic.w	r3, r3, #3
 8007c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	021b      	lsls	r3, r3, #8
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a21      	ldr	r2, [pc, #132]	@ (8007cf4 <TIM_OC3_SetConfig+0xec>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d003      	beq.n	8007c7a <TIM_OC3_SetConfig+0x72>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a20      	ldr	r2, [pc, #128]	@ (8007cf8 <TIM_OC3_SetConfig+0xf0>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d101      	bne.n	8007c7e <TIM_OC3_SetConfig+0x76>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e000      	b.n	8007c80 <TIM_OC3_SetConfig+0x78>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d021      	beq.n	8007cc8 <TIM_OC3_SetConfig+0xc0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	021b      	lsls	r3, r3, #8
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c9e:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	011b      	lsls	r3, r3, #4
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	011b      	lsls	r3, r3, #4
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	621a      	str	r2, [r3, #32]
}
 8007ce2:	bf00      	nop
 8007ce4:	371c      	adds	r7, #28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	fffeff8f 	.word	0xfffeff8f
 8007cf4:	40010000 	.word	0x40010000
 8007cf8:	40010400 	.word	0x40010400

08007cfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8007d06:	2300      	movs	r3, #0
 8007d08:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	4b20      	ldr	r3, [pc, #128]	@ (8007db4 <TIM_OC4_SetConfig+0xb8>)
 8007d34:	4013      	ands	r3, r2
 8007d36:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d3e:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	021b      	lsls	r3, r3, #8
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d52:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	031b      	lsls	r3, r3, #12
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a15      	ldr	r2, [pc, #84]	@ (8007db8 <TIM_OC4_SetConfig+0xbc>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d003      	beq.n	8007d70 <TIM_OC4_SetConfig+0x74>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a14      	ldr	r2, [pc, #80]	@ (8007dbc <TIM_OC4_SetConfig+0xc0>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d101      	bne.n	8007d74 <TIM_OC4_SetConfig+0x78>
 8007d70:	2301      	movs	r3, #1
 8007d72:	e000      	b.n	8007d76 <TIM_OC4_SetConfig+0x7a>
 8007d74:	2300      	movs	r3, #0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d009      	beq.n	8007d8e <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	019b      	lsls	r3, r3, #6
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685a      	ldr	r2, [r3, #4]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	621a      	str	r2, [r3, #32]
}
 8007da8:	bf00      	nop
 8007daa:	371c      	adds	r7, #28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	feff8fff 	.word	0xfeff8fff
 8007db8:	40010000 	.word	0x40010000
 8007dbc:	40010400 	.word	0x40010400

08007dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6a1b      	ldr	r3, [r3, #32]
 8007dd8:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	f023 0201 	bic.w	r2, r3, #1
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007df2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	011b      	lsls	r3, r3, #4
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f023 030a 	bic.w	r3, r3, #10
 8007e04:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	621a      	str	r2, [r3, #32]
}
 8007e1a:	bf00      	nop
 8007e1c:	371c      	adds	r7, #28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b087      	sub	sp, #28
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	60f8      	str	r0, [r7, #12]
 8007e2e:	60b9      	str	r1, [r7, #8]
 8007e30:	607a      	str	r2, [r7, #4]
uint32_t tmpccmr1 = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8007e36:	2300      	movs	r3, #0
 8007e38:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	f023 0210 	bic.w	r2, r3, #16
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	031b      	lsls	r3, r3, #12
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	621a      	str	r2, [r3, #32]
}
 8007e82:	bf00      	nop
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	460b      	mov	r3, r1
 8007e98:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eaa:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8007eac:	887b      	ldrh	r3, [r7, #2]
 8007eae:	f043 0307 	orr.w	r3, r3, #7
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	609a      	str	r2, [r3, #8]
}
 8007ec2:	bf00      	nop
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b087      	sub	sp, #28
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	60f8      	str	r0, [r7, #12]
 8007ed6:	60b9      	str	r1, [r7, #8]
 8007ed8:	607a      	str	r2, [r7, #4]
 8007eda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007eec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	021a      	lsls	r2, r3, #8
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	431a      	orrs	r2, r3
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	609a      	str	r2, [r3, #8]
} 
 8007f06:	bf00      	nop
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
	...

08007f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d101      	bne.n	8007f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	e03d      	b.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a1a      	ldr	r2, [pc, #104]	@ (8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d004      	beq.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a19      	ldr	r2, [pc, #100]	@ (8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d108      	bne.n	8007f6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007f5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f82:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
} 
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	40010000 	.word	0x40010000
 8007fb8:	40010400 	.word	0x40010400

08007fbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d101      	bne.n	8007fd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	e105      	b.n	80081e2 <HAL_TIM_PWM_ConfigChannel+0x226>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    
  switch (Channel)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b14      	cmp	r3, #20
 8007fea:	f200 80f0 	bhi.w	80081ce <HAL_TIM_PWM_ConfigChannel+0x212>
 8007fee:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff4:	08008049 	.word	0x08008049
 8007ff8:	080081cf 	.word	0x080081cf
 8007ffc:	080081cf 	.word	0x080081cf
 8008000:	080081cf 	.word	0x080081cf
 8008004:	08008089 	.word	0x08008089
 8008008:	080081cf 	.word	0x080081cf
 800800c:	080081cf 	.word	0x080081cf
 8008010:	080081cf 	.word	0x080081cf
 8008014:	080080cb 	.word	0x080080cb
 8008018:	080081cf 	.word	0x080081cf
 800801c:	080081cf 	.word	0x080081cf
 8008020:	080081cf 	.word	0x080081cf
 8008024:	0800810b 	.word	0x0800810b
 8008028:	080081cf 	.word	0x080081cf
 800802c:	080081cf 	.word	0x080081cf
 8008030:	080081cf 	.word	0x080081cf
 8008034:	0800814d 	.word	0x0800814d
 8008038:	080081cf 	.word	0x080081cf
 800803c:	080081cf 	.word	0x080081cf
 8008040:	080081cf 	.word	0x080081cf
 8008044:	0800818d 	.word	0x0800818d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68b9      	ldr	r1, [r7, #8]
 800804e:	4618      	mov	r0, r3
 8008050:	f7ff fcea 	bl	8007a28 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	699a      	ldr	r2, [r3, #24]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0208 	orr.w	r2, r2, #8
 8008062:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	699a      	ldr	r2, [r3, #24]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 0204 	bic.w	r2, r2, #4
 8008072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6999      	ldr	r1, [r3, #24]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	691a      	ldr	r2, [r3, #16]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	430a      	orrs	r2, r1
 8008084:	619a      	str	r2, [r3, #24]
    }
    break;
 8008086:	e0a3      	b.n	80081d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68b9      	ldr	r1, [r7, #8]
 800808e:	4618      	mov	r0, r3
 8008090:	f7ff fd40 	bl	8007b14 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	699a      	ldr	r2, [r3, #24]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080a2:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	699a      	ldr	r2, [r3, #24]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6999      	ldr	r1, [r3, #24]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	021a      	lsls	r2, r3, #8
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	619a      	str	r2, [r3, #24]
    }
    break;
 80080c8:	e082      	b.n	80081d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68b9      	ldr	r1, [r7, #8]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7ff fd99 	bl	8007c08 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69da      	ldr	r2, [r3, #28]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f042 0208 	orr.w	r2, r2, #8
 80080e4:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	69da      	ldr	r2, [r3, #28]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 0204 	bic.w	r2, r2, #4
 80080f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	69d9      	ldr	r1, [r3, #28]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	691a      	ldr	r2, [r3, #16]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	430a      	orrs	r2, r1
 8008106:	61da      	str	r2, [r3, #28]
    }
    break;
 8008108:	e062      	b.n	80081d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68b9      	ldr	r1, [r7, #8]
 8008110:	4618      	mov	r0, r3
 8008112:	f7ff fdf3 	bl	8007cfc <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	69da      	ldr	r2, [r3, #28]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008124:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	69da      	ldr	r2, [r3, #28]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	69d9      	ldr	r1, [r3, #28]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	021a      	lsls	r2, r3, #8
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	61da      	str	r2, [r3, #28]
    }
    break;
 800814a:	e041      	b.n	80081d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68b9      	ldr	r1, [r7, #8]
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f84a 	bl	80081ec <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0208 	orr.w	r2, r2, #8
 8008166:	655a      	str	r2, [r3, #84]	@ 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 0204 	bic.w	r2, r2, #4
 8008176:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	691a      	ldr	r2, [r3, #16]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	430a      	orrs	r2, r1
 8008188:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    break;
 800818a:	e021      	b.n	80081d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68b9      	ldr	r1, [r7, #8]
 8008192:	4618      	mov	r0, r3
 8008194:	f000 f882 	bl	800829c <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081a6:	655a      	str	r2, [r3, #84]	@ 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	021a      	lsls	r2, r3, #8
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    break;
 80081cc:	e000      	b.n	80081d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 80081ce:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    
  __HAL_UNLOCK(htim);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop

080081ec <TIM_OC5_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 80081f6:	2300      	movs	r3, #0
 80081f8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 80081fe:	2300      	movs	r3, #0
 8008200:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800821e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	4b1b      	ldr	r3, [pc, #108]	@ (8008290 <TIM_OC5_SetConfig+0xa4>)
 8008224:	4013      	ands	r3, r2
 8008226:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	4313      	orrs	r3, r2
 8008230:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008238:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	041b      	lsls	r3, r3, #16
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a12      	ldr	r2, [pc, #72]	@ (8008294 <TIM_OC5_SetConfig+0xa8>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d003      	beq.n	8008256 <TIM_OC5_SetConfig+0x6a>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a11      	ldr	r2, [pc, #68]	@ (8008298 <TIM_OC5_SetConfig+0xac>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d109      	bne.n	800826a <TIM_OC5_SetConfig+0x7e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800825c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	021b      	lsls	r3, r3, #8
 8008264:	697a      	ldr	r2, [r7, #20]
 8008266:	4313      	orrs	r3, r2
 8008268:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	655a      	str	r2, [r3, #84]	@ 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	685a      	ldr	r2, [r3, #4]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	659a      	str	r2, [r3, #88]	@ 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	621a      	str	r2, [r3, #32]
}
 8008284:	bf00      	nop
 8008286:	371c      	adds	r7, #28
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	fffeff8f 	.word	0xfffeff8f
 8008294:	40010000 	.word	0x40010000
 8008298:	40010400 	.word	0x40010400

0800829c <TIM_OC6_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 80082a6:	2300      	movs	r3, #0
 80082a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ce:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	4b1c      	ldr	r3, [pc, #112]	@ (8008344 <TIM_OC6_SetConfig+0xa8>)
 80082d4:	4013      	ands	r3, r2
 80082d6:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	021b      	lsls	r3, r3, #8
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80082ea:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	051b      	lsls	r3, r3, #20
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a13      	ldr	r2, [pc, #76]	@ (8008348 <TIM_OC6_SetConfig+0xac>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d003      	beq.n	8008308 <TIM_OC6_SetConfig+0x6c>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a12      	ldr	r2, [pc, #72]	@ (800834c <TIM_OC6_SetConfig+0xb0>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d109      	bne.n	800831c <TIM_OC6_SetConfig+0x80>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800830e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	029b      	lsls	r3, r3, #10
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	4313      	orrs	r3, r2
 800831a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	655a      	str	r2, [r3, #84]	@ 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	621a      	str	r2, [r3, #32]
}
 8008336:	bf00      	nop
 8008338:	371c      	adds	r7, #28
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	feff8fff 	.word	0xfeff8fff
 8008348:	40010000 	.word	0x40010000
 800834c:	40010400 	.word	0x40010400

08008350 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e043      	b.n	80083ea <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d106      	bne.n	800837c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f002 f9f0 	bl	800a75c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2224      	movs	r2, #36	@ 0x24
 8008380:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 0201 	bic.w	r2, r2, #1
 8008392:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f877 	bl	8008488 <UART_SetConfig>
 800839a:	4603      	mov	r3, r0
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e022      	b.n	80083ea <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d002      	beq.n	80083b2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fae9 	bl	8008984 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083d0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f042 0201 	orr.w	r2, r2, #1
 80083e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fb70 	bl	8008ac8 <UART_CheckIdleState>
 80083e8:	4603      	mov	r3, r0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	60f8      	str	r0, [r7, #12]
 80083fa:	60b9      	str	r1, [r7, #8]
 80083fc:	603b      	str	r3, [r7, #0]
 80083fe:	4613      	mov	r3, r2
 8008400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008402:	e02c      	b.n	800845e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840a:	d028      	beq.n	800845e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d007      	beq.n	8008422 <UART_WaitOnFlagUntilTimeout+0x30>
 8008412:	f7fb f8e9 	bl	80035e8 <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	69ba      	ldr	r2, [r7, #24]
 800841e:	429a      	cmp	r2, r3
 8008420:	d81d      	bhi.n	800845e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8008430:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689a      	ldr	r2, [r3, #8]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f022 0201 	bic.w	r2, r2, #1
 8008440:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2220      	movs	r2, #32
 8008446:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2220      	movs	r2, #32
 800844e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e00f      	b.n	800847e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	69da      	ldr	r2, [r3, #28]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4013      	ands	r3, r2
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	429a      	cmp	r2, r3
 800846c:	bf0c      	ite	eq
 800846e:	2301      	moveq	r3, #1
 8008470:	2300      	movne	r3, #0
 8008472:	b2db      	uxtb	r3, r3
 8008474:	461a      	mov	r2, r3
 8008476:	79fb      	ldrb	r3, [r7, #7]
 8008478:	429a      	cmp	r2, r3
 800847a:	d0c3      	beq.n	8008404 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
	...

08008488 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8008490:	2300      	movs	r3, #0
 8008492:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8008494:	2310      	movs	r3, #16
 8008496:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8008498:	2300      	movs	r3, #0
 800849a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800849c:	2300      	movs	r3, #0
 800849e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	431a      	orrs	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	431a      	orrs	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	4ba0      	ldr	r3, [pc, #640]	@ (8008744 <UART_SetConfig+0x2bc>)
 80084c4:	4013      	ands	r3, r2
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	6812      	ldr	r2, [r2, #0]
 80084ca:	68f9      	ldr	r1, [r7, #12]
 80084cc:	430b      	orrs	r3, r1
 80084ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	699a      	ldr	r2, [r3, #24]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	430a      	orrs	r2, r1
 8008504:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a8f      	ldr	r2, [pc, #572]	@ (8008748 <UART_SetConfig+0x2c0>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d11f      	bne.n	8008550 <UART_SetConfig+0xc8>
 8008510:	4b8e      	ldr	r3, [pc, #568]	@ (800874c <UART_SetConfig+0x2c4>)
 8008512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008516:	f003 0303 	and.w	r3, r3, #3
 800851a:	2b03      	cmp	r3, #3
 800851c:	f200 814b 	bhi.w	80087b6 <UART_SetConfig+0x32e>
 8008520:	a201      	add	r2, pc, #4	@ (adr r2, 8008528 <UART_SetConfig+0xa0>)
 8008522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008526:	bf00      	nop
 8008528:	08008539 	.word	0x08008539
 800852c:	08008545 	.word	0x08008545
 8008530:	0800853f 	.word	0x0800853f
 8008534:	0800854b 	.word	0x0800854b
 8008538:	2301      	movs	r3, #1
 800853a:	75fb      	strb	r3, [r7, #23]
 800853c:	e13b      	b.n	80087b6 <UART_SetConfig+0x32e>
 800853e:	2302      	movs	r3, #2
 8008540:	75fb      	strb	r3, [r7, #23]
 8008542:	e138      	b.n	80087b6 <UART_SetConfig+0x32e>
 8008544:	2304      	movs	r3, #4
 8008546:	75fb      	strb	r3, [r7, #23]
 8008548:	e135      	b.n	80087b6 <UART_SetConfig+0x32e>
 800854a:	2308      	movs	r3, #8
 800854c:	75fb      	strb	r3, [r7, #23]
 800854e:	e132      	b.n	80087b6 <UART_SetConfig+0x32e>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a7e      	ldr	r2, [pc, #504]	@ (8008750 <UART_SetConfig+0x2c8>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d130      	bne.n	80085bc <UART_SetConfig+0x134>
 800855a:	4b7c      	ldr	r3, [pc, #496]	@ (800874c <UART_SetConfig+0x2c4>)
 800855c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008560:	f003 030c 	and.w	r3, r3, #12
 8008564:	2b0c      	cmp	r3, #12
 8008566:	f200 8126 	bhi.w	80087b6 <UART_SetConfig+0x32e>
 800856a:	a201      	add	r2, pc, #4	@ (adr r2, 8008570 <UART_SetConfig+0xe8>)
 800856c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008570:	080085a5 	.word	0x080085a5
 8008574:	080087b7 	.word	0x080087b7
 8008578:	080087b7 	.word	0x080087b7
 800857c:	080087b7 	.word	0x080087b7
 8008580:	080085b1 	.word	0x080085b1
 8008584:	080087b7 	.word	0x080087b7
 8008588:	080087b7 	.word	0x080087b7
 800858c:	080087b7 	.word	0x080087b7
 8008590:	080085ab 	.word	0x080085ab
 8008594:	080087b7 	.word	0x080087b7
 8008598:	080087b7 	.word	0x080087b7
 800859c:	080087b7 	.word	0x080087b7
 80085a0:	080085b7 	.word	0x080085b7
 80085a4:	2300      	movs	r3, #0
 80085a6:	75fb      	strb	r3, [r7, #23]
 80085a8:	e105      	b.n	80087b6 <UART_SetConfig+0x32e>
 80085aa:	2302      	movs	r3, #2
 80085ac:	75fb      	strb	r3, [r7, #23]
 80085ae:	e102      	b.n	80087b6 <UART_SetConfig+0x32e>
 80085b0:	2304      	movs	r3, #4
 80085b2:	75fb      	strb	r3, [r7, #23]
 80085b4:	e0ff      	b.n	80087b6 <UART_SetConfig+0x32e>
 80085b6:	2308      	movs	r3, #8
 80085b8:	75fb      	strb	r3, [r7, #23]
 80085ba:	e0fc      	b.n	80087b6 <UART_SetConfig+0x32e>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a64      	ldr	r2, [pc, #400]	@ (8008754 <UART_SetConfig+0x2cc>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d11f      	bne.n	8008606 <UART_SetConfig+0x17e>
 80085c6:	4b61      	ldr	r3, [pc, #388]	@ (800874c <UART_SetConfig+0x2c4>)
 80085c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80085d0:	2b30      	cmp	r3, #48	@ 0x30
 80085d2:	d015      	beq.n	8008600 <UART_SetConfig+0x178>
 80085d4:	2b30      	cmp	r3, #48	@ 0x30
 80085d6:	f200 80ee 	bhi.w	80087b6 <UART_SetConfig+0x32e>
 80085da:	2b20      	cmp	r3, #32
 80085dc:	d00a      	beq.n	80085f4 <UART_SetConfig+0x16c>
 80085de:	2b20      	cmp	r3, #32
 80085e0:	f200 80e9 	bhi.w	80087b6 <UART_SetConfig+0x32e>
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <UART_SetConfig+0x166>
 80085e8:	2b10      	cmp	r3, #16
 80085ea:	d006      	beq.n	80085fa <UART_SetConfig+0x172>
 80085ec:	e0e3      	b.n	80087b6 <UART_SetConfig+0x32e>
 80085ee:	2300      	movs	r3, #0
 80085f0:	75fb      	strb	r3, [r7, #23]
 80085f2:	e0e0      	b.n	80087b6 <UART_SetConfig+0x32e>
 80085f4:	2302      	movs	r3, #2
 80085f6:	75fb      	strb	r3, [r7, #23]
 80085f8:	e0dd      	b.n	80087b6 <UART_SetConfig+0x32e>
 80085fa:	2304      	movs	r3, #4
 80085fc:	75fb      	strb	r3, [r7, #23]
 80085fe:	e0da      	b.n	80087b6 <UART_SetConfig+0x32e>
 8008600:	2308      	movs	r3, #8
 8008602:	75fb      	strb	r3, [r7, #23]
 8008604:	e0d7      	b.n	80087b6 <UART_SetConfig+0x32e>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a53      	ldr	r2, [pc, #332]	@ (8008758 <UART_SetConfig+0x2d0>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d11f      	bne.n	8008650 <UART_SetConfig+0x1c8>
 8008610:	4b4e      	ldr	r3, [pc, #312]	@ (800874c <UART_SetConfig+0x2c4>)
 8008612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008616:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800861a:	2bc0      	cmp	r3, #192	@ 0xc0
 800861c:	d015      	beq.n	800864a <UART_SetConfig+0x1c2>
 800861e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008620:	f200 80c9 	bhi.w	80087b6 <UART_SetConfig+0x32e>
 8008624:	2b80      	cmp	r3, #128	@ 0x80
 8008626:	d00a      	beq.n	800863e <UART_SetConfig+0x1b6>
 8008628:	2b80      	cmp	r3, #128	@ 0x80
 800862a:	f200 80c4 	bhi.w	80087b6 <UART_SetConfig+0x32e>
 800862e:	2b00      	cmp	r3, #0
 8008630:	d002      	beq.n	8008638 <UART_SetConfig+0x1b0>
 8008632:	2b40      	cmp	r3, #64	@ 0x40
 8008634:	d006      	beq.n	8008644 <UART_SetConfig+0x1bc>
 8008636:	e0be      	b.n	80087b6 <UART_SetConfig+0x32e>
 8008638:	2300      	movs	r3, #0
 800863a:	75fb      	strb	r3, [r7, #23]
 800863c:	e0bb      	b.n	80087b6 <UART_SetConfig+0x32e>
 800863e:	2302      	movs	r3, #2
 8008640:	75fb      	strb	r3, [r7, #23]
 8008642:	e0b8      	b.n	80087b6 <UART_SetConfig+0x32e>
 8008644:	2304      	movs	r3, #4
 8008646:	75fb      	strb	r3, [r7, #23]
 8008648:	e0b5      	b.n	80087b6 <UART_SetConfig+0x32e>
 800864a:	2308      	movs	r3, #8
 800864c:	75fb      	strb	r3, [r7, #23]
 800864e:	e0b2      	b.n	80087b6 <UART_SetConfig+0x32e>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a41      	ldr	r2, [pc, #260]	@ (800875c <UART_SetConfig+0x2d4>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d124      	bne.n	80086a4 <UART_SetConfig+0x21c>
 800865a:	4b3c      	ldr	r3, [pc, #240]	@ (800874c <UART_SetConfig+0x2c4>)
 800865c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008660:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008664:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008668:	d019      	beq.n	800869e <UART_SetConfig+0x216>
 800866a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800866e:	f200 80a2 	bhi.w	80087b6 <UART_SetConfig+0x32e>
 8008672:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008676:	d00c      	beq.n	8008692 <UART_SetConfig+0x20a>
 8008678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800867c:	f200 809b 	bhi.w	80087b6 <UART_SetConfig+0x32e>
 8008680:	2b00      	cmp	r3, #0
 8008682:	d003      	beq.n	800868c <UART_SetConfig+0x204>
 8008684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008688:	d006      	beq.n	8008698 <UART_SetConfig+0x210>
 800868a:	e094      	b.n	80087b6 <UART_SetConfig+0x32e>
 800868c:	2300      	movs	r3, #0
 800868e:	75fb      	strb	r3, [r7, #23]
 8008690:	e091      	b.n	80087b6 <UART_SetConfig+0x32e>
 8008692:	2302      	movs	r3, #2
 8008694:	75fb      	strb	r3, [r7, #23]
 8008696:	e08e      	b.n	80087b6 <UART_SetConfig+0x32e>
 8008698:	2304      	movs	r3, #4
 800869a:	75fb      	strb	r3, [r7, #23]
 800869c:	e08b      	b.n	80087b6 <UART_SetConfig+0x32e>
 800869e:	2308      	movs	r3, #8
 80086a0:	75fb      	strb	r3, [r7, #23]
 80086a2:	e088      	b.n	80087b6 <UART_SetConfig+0x32e>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a2d      	ldr	r2, [pc, #180]	@ (8008760 <UART_SetConfig+0x2d8>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d122      	bne.n	80086f4 <UART_SetConfig+0x26c>
 80086ae:	4b27      	ldr	r3, [pc, #156]	@ (800874c <UART_SetConfig+0x2c4>)
 80086b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80086b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086bc:	d017      	beq.n	80086ee <UART_SetConfig+0x266>
 80086be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086c2:	d878      	bhi.n	80087b6 <UART_SetConfig+0x32e>
 80086c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086c8:	d00b      	beq.n	80086e2 <UART_SetConfig+0x25a>
 80086ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086ce:	d872      	bhi.n	80087b6 <UART_SetConfig+0x32e>
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d003      	beq.n	80086dc <UART_SetConfig+0x254>
 80086d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086d8:	d006      	beq.n	80086e8 <UART_SetConfig+0x260>
 80086da:	e06c      	b.n	80087b6 <UART_SetConfig+0x32e>
 80086dc:	2301      	movs	r3, #1
 80086de:	75fb      	strb	r3, [r7, #23]
 80086e0:	e069      	b.n	80087b6 <UART_SetConfig+0x32e>
 80086e2:	2302      	movs	r3, #2
 80086e4:	75fb      	strb	r3, [r7, #23]
 80086e6:	e066      	b.n	80087b6 <UART_SetConfig+0x32e>
 80086e8:	2304      	movs	r3, #4
 80086ea:	75fb      	strb	r3, [r7, #23]
 80086ec:	e063      	b.n	80087b6 <UART_SetConfig+0x32e>
 80086ee:	2308      	movs	r3, #8
 80086f0:	75fb      	strb	r3, [r7, #23]
 80086f2:	e060      	b.n	80087b6 <UART_SetConfig+0x32e>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a1a      	ldr	r2, [pc, #104]	@ (8008764 <UART_SetConfig+0x2dc>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d134      	bne.n	8008768 <UART_SetConfig+0x2e0>
 80086fe:	4b13      	ldr	r3, [pc, #76]	@ (800874c <UART_SetConfig+0x2c4>)
 8008700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008704:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008708:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800870c:	d017      	beq.n	800873e <UART_SetConfig+0x2b6>
 800870e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008712:	d850      	bhi.n	80087b6 <UART_SetConfig+0x32e>
 8008714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008718:	d00b      	beq.n	8008732 <UART_SetConfig+0x2aa>
 800871a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800871e:	d84a      	bhi.n	80087b6 <UART_SetConfig+0x32e>
 8008720:	2b00      	cmp	r3, #0
 8008722:	d003      	beq.n	800872c <UART_SetConfig+0x2a4>
 8008724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008728:	d006      	beq.n	8008738 <UART_SetConfig+0x2b0>
 800872a:	e044      	b.n	80087b6 <UART_SetConfig+0x32e>
 800872c:	2300      	movs	r3, #0
 800872e:	75fb      	strb	r3, [r7, #23]
 8008730:	e041      	b.n	80087b6 <UART_SetConfig+0x32e>
 8008732:	2302      	movs	r3, #2
 8008734:	75fb      	strb	r3, [r7, #23]
 8008736:	e03e      	b.n	80087b6 <UART_SetConfig+0x32e>
 8008738:	2304      	movs	r3, #4
 800873a:	75fb      	strb	r3, [r7, #23]
 800873c:	e03b      	b.n	80087b6 <UART_SetConfig+0x32e>
 800873e:	2308      	movs	r3, #8
 8008740:	75fb      	strb	r3, [r7, #23]
 8008742:	e038      	b.n	80087b6 <UART_SetConfig+0x32e>
 8008744:	efff69f3 	.word	0xefff69f3
 8008748:	40011000 	.word	0x40011000
 800874c:	40023800 	.word	0x40023800
 8008750:	40004400 	.word	0x40004400
 8008754:	40004800 	.word	0x40004800
 8008758:	40004c00 	.word	0x40004c00
 800875c:	40005000 	.word	0x40005000
 8008760:	40011400 	.word	0x40011400
 8008764:	40007800 	.word	0x40007800
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a81      	ldr	r2, [pc, #516]	@ (8008974 <UART_SetConfig+0x4ec>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d121      	bne.n	80087b6 <UART_SetConfig+0x32e>
 8008772:	4b81      	ldr	r3, [pc, #516]	@ (8008978 <UART_SetConfig+0x4f0>)
 8008774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008778:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800877c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008780:	d017      	beq.n	80087b2 <UART_SetConfig+0x32a>
 8008782:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008786:	d816      	bhi.n	80087b6 <UART_SetConfig+0x32e>
 8008788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800878c:	d00b      	beq.n	80087a6 <UART_SetConfig+0x31e>
 800878e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008792:	d810      	bhi.n	80087b6 <UART_SetConfig+0x32e>
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <UART_SetConfig+0x318>
 8008798:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800879c:	d006      	beq.n	80087ac <UART_SetConfig+0x324>
 800879e:	e00a      	b.n	80087b6 <UART_SetConfig+0x32e>
 80087a0:	2300      	movs	r3, #0
 80087a2:	75fb      	strb	r3, [r7, #23]
 80087a4:	e007      	b.n	80087b6 <UART_SetConfig+0x32e>
 80087a6:	2302      	movs	r3, #2
 80087a8:	75fb      	strb	r3, [r7, #23]
 80087aa:	e004      	b.n	80087b6 <UART_SetConfig+0x32e>
 80087ac:	2304      	movs	r3, #4
 80087ae:	75fb      	strb	r3, [r7, #23]
 80087b0:	e001      	b.n	80087b6 <UART_SetConfig+0x32e>
 80087b2:	2308      	movs	r3, #8
 80087b4:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087be:	d16c      	bne.n	800889a <UART_SetConfig+0x412>
  {
    switch (clocksource)
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	d854      	bhi.n	8008870 <UART_SetConfig+0x3e8>
 80087c6:	a201      	add	r2, pc, #4	@ (adr r2, 80087cc <UART_SetConfig+0x344>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	080087f1 	.word	0x080087f1
 80087d0:	0800880d 	.word	0x0800880d
 80087d4:	08008829 	.word	0x08008829
 80087d8:	08008871 	.word	0x08008871
 80087dc:	0800883f 	.word	0x0800883f
 80087e0:	08008871 	.word	0x08008871
 80087e4:	08008871 	.word	0x08008871
 80087e8:	08008871 	.word	0x08008871
 80087ec:	0800885b 	.word	0x0800885b
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80087f0:	f7fd fd9e 	bl	8006330 <HAL_RCC_GetPCLK1Freq>
 80087f4:	4603      	mov	r3, r0
 80087f6:	005a      	lsls	r2, r3, #1
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	085b      	lsrs	r3, r3, #1
 80087fe:	441a      	add	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	fbb2 f3f3 	udiv	r3, r2, r3
 8008808:	82bb      	strh	r3, [r7, #20]
      break;
 800880a:	e034      	b.n	8008876 <UART_SetConfig+0x3ee>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800880c:	f7fd fda4 	bl	8006358 <HAL_RCC_GetPCLK2Freq>
 8008810:	4603      	mov	r3, r0
 8008812:	005a      	lsls	r2, r3, #1
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	085b      	lsrs	r3, r3, #1
 800881a:	441a      	add	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	fbb2 f3f3 	udiv	r3, r2, r3
 8008824:	82bb      	strh	r3, [r7, #20]
      break;
 8008826:	e026      	b.n	8008876 <UART_SetConfig+0x3ee>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	085a      	lsrs	r2, r3, #1
 800882e:	4b53      	ldr	r3, [pc, #332]	@ (800897c <UART_SetConfig+0x4f4>)
 8008830:	4413      	add	r3, r2
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	6852      	ldr	r2, [r2, #4]
 8008836:	fbb3 f3f2 	udiv	r3, r3, r2
 800883a:	82bb      	strh	r3, [r7, #20]
      break;
 800883c:	e01b      	b.n	8008876 <UART_SetConfig+0x3ee>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800883e:	f7fd fca5 	bl	800618c <HAL_RCC_GetSysClockFreq>
 8008842:	4603      	mov	r3, r0
 8008844:	005a      	lsls	r2, r3, #1
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	085b      	lsrs	r3, r3, #1
 800884c:	441a      	add	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	fbb2 f3f3 	udiv	r3, r2, r3
 8008856:	82bb      	strh	r3, [r7, #20]
      break;
 8008858:	e00d      	b.n	8008876 <UART_SetConfig+0x3ee>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	085b      	lsrs	r3, r3, #1
 8008860:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	fbb2 f3f3 	udiv	r3, r2, r3
 800886c:	82bb      	strh	r3, [r7, #20]
      break;
 800886e:	e002      	b.n	8008876 <UART_SetConfig+0x3ee>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	74fb      	strb	r3, [r7, #19]
      break;
 8008874:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8008876:	8abb      	ldrh	r3, [r7, #20]
 8008878:	f023 030f 	bic.w	r3, r3, #15
 800887c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800887e:	8abb      	ldrh	r3, [r7, #20]
 8008880:	105b      	asrs	r3, r3, #1
 8008882:	b29b      	uxth	r3, r3
 8008884:	f003 0307 	and.w	r3, r3, #7
 8008888:	b29a      	uxth	r2, r3
 800888a:	897b      	ldrh	r3, [r7, #10]
 800888c:	4313      	orrs	r3, r2
 800888e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	897a      	ldrh	r2, [r7, #10]
 8008896:	60da      	str	r2, [r3, #12]
 8008898:	e067      	b.n	800896a <UART_SetConfig+0x4e2>
  }
  else
  {
    switch (clocksource)
 800889a:	7dfb      	ldrb	r3, [r7, #23]
 800889c:	2b08      	cmp	r3, #8
 800889e:	d861      	bhi.n	8008964 <UART_SetConfig+0x4dc>
 80088a0:	a201      	add	r2, pc, #4	@ (adr r2, 80088a8 <UART_SetConfig+0x420>)
 80088a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a6:	bf00      	nop
 80088a8:	080088cd 	.word	0x080088cd
 80088ac:	080088ed 	.word	0x080088ed
 80088b0:	0800890d 	.word	0x0800890d
 80088b4:	08008965 	.word	0x08008965
 80088b8:	08008929 	.word	0x08008929
 80088bc:	08008965 	.word	0x08008965
 80088c0:	08008965 	.word	0x08008965
 80088c4:	08008965 	.word	0x08008965
 80088c8:	08008949 	.word	0x08008949
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80088cc:	f7fd fd30 	bl	8006330 <HAL_RCC_GetPCLK1Freq>
 80088d0:	4602      	mov	r2, r0
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	085b      	lsrs	r3, r3, #1
 80088d8:	441a      	add	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	60da      	str	r2, [r3, #12]
      break;
 80088ea:	e03e      	b.n	800896a <UART_SetConfig+0x4e2>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80088ec:	f7fd fd34 	bl	8006358 <HAL_RCC_GetPCLK2Freq>
 80088f0:	4602      	mov	r2, r0
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	085b      	lsrs	r3, r3, #1
 80088f8:	441a      	add	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008902:	b29a      	uxth	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	60da      	str	r2, [r3, #12]
      break;
 800890a:	e02e      	b.n	800896a <UART_SetConfig+0x4e2>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	085a      	lsrs	r2, r3, #1
 8008912:	4b1b      	ldr	r3, [pc, #108]	@ (8008980 <UART_SetConfig+0x4f8>)
 8008914:	4413      	add	r3, r2
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	6852      	ldr	r2, [r2, #4]
 800891a:	fbb3 f3f2 	udiv	r3, r3, r2
 800891e:	b29a      	uxth	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	60da      	str	r2, [r3, #12]
      break;
 8008926:	e020      	b.n	800896a <UART_SetConfig+0x4e2>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008928:	f7fd fc30 	bl	800618c <HAL_RCC_GetSysClockFreq>
 800892c:	4602      	mov	r2, r0
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	085b      	lsrs	r3, r3, #1
 8008934:	441a      	add	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	fbb2 f3f3 	udiv	r3, r2, r3
 800893e:	b29a      	uxth	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	60da      	str	r2, [r3, #12]
      break;
 8008946:	e010      	b.n	800896a <UART_SetConfig+0x4e2>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	085b      	lsrs	r3, r3, #1
 800894e:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	fbb2 f3f3 	udiv	r3, r2, r3
 800895a:	b29a      	uxth	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	60da      	str	r2, [r3, #12]
      break;
 8008962:	e002      	b.n	800896a <UART_SetConfig+0x4e2>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	74fb      	strb	r3, [r7, #19]
      break;
 8008968:	bf00      	nop
    }
  }

  return ret;
 800896a:	7cfb      	ldrb	r3, [r7, #19]

}
 800896c:	4618      	mov	r0, r3
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	40007c00 	.word	0x40007c00
 8008978:	40023800 	.word	0x40023800
 800897c:	01e84800 	.word	0x01e84800
 8008980:	00f42400 	.word	0x00f42400

08008984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00a      	beq.n	80089ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00a      	beq.n	80089d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	430a      	orrs	r2, r1
 80089ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00a      	beq.n	80089f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f6:	f003 0308 	and.w	r3, r3, #8
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00a      	beq.n	8008a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	430a      	orrs	r2, r1
 8008a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a18:	f003 0310 	and.w	r3, r3, #16
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00a      	beq.n	8008a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3a:	f003 0320 	and.w	r3, r3, #32
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00a      	beq.n	8008a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d01a      	beq.n	8008a9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a82:	d10a      	bne.n	8008a9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00a      	beq.n	8008abc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	430a      	orrs	r2, r1
 8008aba:	605a      	str	r2, [r3, #4]
  }
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af02      	add	r7, sp, #8
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008ada:	f7fa fd85 	bl	80035e8 <HAL_GetTick>
 8008ade:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0308 	and.w	r3, r3, #8
 8008aea:	2b08      	cmp	r3, #8
 8008aec:	d10e      	bne.n	8008b0c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008aee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7ff fc78 	bl	80083f2 <UART_WaitOnFlagUntilTimeout>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e00c      	b.n	8008b26 <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2220      	movs	r2, #32
 8008b10:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2220      	movs	r2, #32
 8008b18:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d027      	beq.n	8008b9a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	4b2f      	ldr	r3, [pc, #188]	@ (8008c10 <FMC_SDRAM_Init+0xe0>)
 8008b54:	4013      	ands	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b60:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008b66:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008b6c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008b72:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008b78:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008b7e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008b84:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 8008b8a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	e032      	b.n	8008c00 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008ba6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008bb0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 8008bb6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	4b12      	ldr	r3, [pc, #72]	@ (8008c10 <FMC_SDRAM_Init+0xe0>)
 8008bc8:	4013      	ands	r3, r2
 8008bca:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008bd4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008bda:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008be0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008be6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008bec:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	ffff8000 	.word	0xffff8000

08008c14 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b087      	sub	sp, #28
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008c20:	2300      	movs	r3, #0
 8008c22:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008c24:	2300      	movs	r3, #0
 8008c26:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d02e      	beq.n	8008c8c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008c3a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	3b01      	subs	r3, #1
 8008c48:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c4a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	3b01      	subs	r3, #1
 8008c52:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008c54:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008c5e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	3b01      	subs	r3, #1
 8008c66:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008c68:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008c72:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	609a      	str	r2, [r3, #8]
 8008c8a:	e039      	b.n	8008d00 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	4b1e      	ldr	r3, [pc, #120]	@ (8008d10 <FMC_SDRAM_Timing_Init+0xfc>)
 8008c96:	4013      	ands	r3, r2
 8008c98:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008caa:	4313      	orrs	r3, r2
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008cbe:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008cce:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008cd8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008ce2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008cec:	4313      	orrs	r3, r2
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	371c      	adds	r7, #28
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	ff0f0fff 	.word	0xff0f0fff

08008d14 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b087      	sub	sp, #28
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008d2c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	3b01      	subs	r3, #1
 8008d34:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008d36:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	371c      	adds	r7, #28
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b083      	sub	sp, #12
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	695a      	ldr	r2, [r3, #20]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	005b      	lsls	r3, r3, #1
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <lcd_start_page>:
#include "stm32746g_discovery_audio.h"
#include "stlogo.h"

void lcd_start_page(void);

void lcd_start_page(void){
 8008d7c:	b598      	push	{r3, r4, r7, lr}
 8008d7e:	af00      	add	r7, sp, #0
 	BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 8008d80:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8008d84:	2001      	movs	r0, #1
 8008d86:	f7f9 fc77 	bl	8002678 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8008d8a:	2001      	movs	r0, #1
 8008d8c:	f7f9 fcd4 	bl	8002738 <BSP_LCD_SelectLayer>
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8008d90:	4828      	ldr	r0, [pc, #160]	@ (8008e34 <lcd_start_page+0xb8>)
 8008d92:	f7f9 fd13 	bl	80027bc <BSP_LCD_SetFont>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008d96:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9a:	f7f9 fcf5 	bl	8002788 <BSP_LCD_SetBackColor>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008da2:	f7f9 fd25 	bl	80027f0 <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8008da6:	4824      	ldr	r0, [pc, #144]	@ (8008e38 <lcd_start_page+0xbc>)
 8008da8:	f7f9 fcd6 	bl	8002758 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32F746G DSP", CENTER_MODE);
 8008dac:	2301      	movs	r3, #1
 8008dae:	4a23      	ldr	r2, [pc, #140]	@ (8008e3c <lcd_start_page+0xc0>)
 8008db0:	210a      	movs	r1, #10
 8008db2:	2000      	movs	r0, #0
 8008db4:	f7f9 fd88 	bl	80028c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Master ESET", CENTER_MODE);
 8008db8:	2301      	movs	r3, #1
 8008dba:	4a21      	ldr	r2, [pc, #132]	@ (8008e40 <lcd_start_page+0xc4>)
 8008dbc:	2123      	movs	r1, #35	@ 0x23
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	f7f9 fd82 	bl	80028c8 <BSP_LCD_DisplayStringAt>

    /* Draw Bitmap */
     //BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)logo_usmb);
     BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)stlogo);
 8008dc4:	f7f9 fc30 	bl	8002628 <BSP_LCD_GetXSize>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	3b50      	subs	r3, #80	@ 0x50
 8008dcc:	085b      	lsrs	r3, r3, #1
 8008dce:	4a1d      	ldr	r2, [pc, #116]	@ (8008e44 <lcd_start_page+0xc8>)
 8008dd0:	2141      	movs	r1, #65	@ 0x41
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7f9 fe88 	bl	8002ae8 <BSP_LCD_DrawBitmap>
     BSP_LCD_SetFont(&Font12);
 8008dd8:	481b      	ldr	r0, [pc, #108]	@ (8008e48 <lcd_start_page+0xcc>)
 8008dda:	f7f9 fcef 	bl	80027bc <BSP_LCD_SetFont>
     BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 20, (uint8_t *)"Copyright (c) Master ESET", CENTER_MODE);
 8008dde:	f7f9 fc37 	bl	8002650 <BSP_LCD_GetYSize>
 8008de2:	4603      	mov	r3, r0
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	3b14      	subs	r3, #20
 8008de8:	b299      	uxth	r1, r3
 8008dea:	2301      	movs	r3, #1
 8008dec:	4a17      	ldr	r2, [pc, #92]	@ (8008e4c <lcd_start_page+0xd0>)
 8008dee:	2000      	movs	r0, #0
 8008df0:	f7f9 fd6a 	bl	80028c8 <BSP_LCD_DisplayStringAt>

     BSP_LCD_SetFont(&Font16);
 8008df4:	4816      	ldr	r0, [pc, #88]	@ (8008e50 <lcd_start_page+0xd4>)
 8008df6:	f7f9 fce1 	bl	80027bc <BSP_LCD_SetFont>
     BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008dfa:	4816      	ldr	r0, [pc, #88]	@ (8008e54 <lcd_start_page+0xd8>)
 8008dfc:	f7f9 fcac 	bl	8002758 <BSP_LCD_SetTextColor>
     BSP_LCD_FillRect(0, BSP_LCD_GetYSize() / 2 + 15, BSP_LCD_GetXSize(), 60);
 8008e00:	f7f9 fc26 	bl	8002650 <BSP_LCD_GetYSize>
 8008e04:	4603      	mov	r3, r0
 8008e06:	085b      	lsrs	r3, r3, #1
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	330f      	adds	r3, #15
 8008e0c:	b29c      	uxth	r4, r3
 8008e0e:	f7f9 fc0b 	bl	8002628 <BSP_LCD_GetXSize>
 8008e12:	4603      	mov	r3, r0
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	233c      	movs	r3, #60	@ 0x3c
 8008e18:	4621      	mov	r1, r4
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	f7f9 ff16 	bl	8002c4c <BSP_LCD_FillRect>
     BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008e20:	f04f 30ff 	mov.w	r0, #4294967295
 8008e24:	f7f9 fc98 	bl	8002758 <BSP_LCD_SetTextColor>
     BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8008e28:	480a      	ldr	r0, [pc, #40]	@ (8008e54 <lcd_start_page+0xd8>)
 8008e2a:	f7f9 fcad 	bl	8002788 <BSP_LCD_SetBackColor>
     //BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 30, (uint8_t *)"Press User Button to start :", CENTER_MODE);
}
 8008e2e:	bf00      	nop
 8008e30:	bd98      	pop	{r3, r4, r7, pc}
 8008e32:	bf00      	nop
 8008e34:	20000034 	.word	0x20000034
 8008e38:	ff000080 	.word	0xff000080
 8008e3c:	0800ac28 	.word	0x0800ac28
 8008e40:	0800ac38 	.word	0x0800ac38
 8008e44:	0800d774 	.word	0x0800d774
 8008e48:	20000044 	.word	0x20000044
 8008e4c:	0800ac44 	.word	0x0800ac44
 8008e50:	2000003c 	.word	0x2000003c
 8008e54:	ff0000ff 	.word	0xff0000ff

08008e58 <SCB_EnableICache>:
{
 8008e58:	b480      	push	{r7}
 8008e5a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008e5c:	f3bf 8f4f 	dsb	sy
}
 8008e60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008e62:	f3bf 8f6f 	isb	sy
}
 8008e66:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008e68:	4b0a      	ldr	r3, [pc, #40]	@ (8008e94 <SCB_EnableICache+0x3c>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008e70:	4b08      	ldr	r3, [pc, #32]	@ (8008e94 <SCB_EnableICache+0x3c>)
 8008e72:	695b      	ldr	r3, [r3, #20]
 8008e74:	4a07      	ldr	r2, [pc, #28]	@ (8008e94 <SCB_EnableICache+0x3c>)
 8008e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e7a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008e7c:	f3bf 8f4f 	dsb	sy
}
 8008e80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008e82:	f3bf 8f6f 	isb	sy
}
 8008e86:	bf00      	nop
}
 8008e88:	bf00      	nop
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	e000ed00 	.word	0xe000ed00

08008e98 <SCB_EnableDCache>:
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8008e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8008f1c <SCB_EnableDCache+0x84>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008ea6:	f3bf 8f4f 	dsb	sy
}
 8008eaa:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8008eac:	4b1b      	ldr	r3, [pc, #108]	@ (8008f1c <SCB_EnableDCache+0x84>)
 8008eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eb2:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	0b5b      	lsrs	r3, r3, #13
 8008eb8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008ebc:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	08db      	lsrs	r3, r3, #3
 8008ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ec6:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8008ed0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008ed6:	4911      	ldr	r1, [pc, #68]	@ (8008f1c <SCB_EnableDCache+0x84>)
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways--);
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	1e5a      	subs	r2, r3, #1
 8008ee2:	60ba      	str	r2, [r7, #8]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1ef      	bne.n	8008ec8 <SCB_EnableDCache+0x30>
    } while(sets--);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	1e5a      	subs	r2, r3, #1
 8008eec:	60fa      	str	r2, [r7, #12]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1e5      	bne.n	8008ebe <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8008ef2:	f3bf 8f4f 	dsb	sy
}
 8008ef6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008ef8:	4b08      	ldr	r3, [pc, #32]	@ (8008f1c <SCB_EnableDCache+0x84>)
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	4a07      	ldr	r2, [pc, #28]	@ (8008f1c <SCB_EnableDCache+0x84>)
 8008efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008f04:	f3bf 8f4f 	dsb	sy
}
 8008f08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008f0a:	f3bf 8f6f 	isb	sy
}
 8008f0e:	bf00      	nop
}
 8008f10:	bf00      	nop
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	e000ed00 	.word	0xe000ed00

08008f20 <passThrough>:
// Définir la position du buffer circulaire
int16_t pos = 0;

void passThrough(void);

void passThrough(void){
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
	/* Reception des échantillons d'entrée */
	HAL_SAI_Receive (&hsai_BlockB2,(uint8_t *)&echInputLeft,1,SAI_WAIT);	// Left
 8008f26:	2364      	movs	r3, #100	@ 0x64
 8008f28:	2201      	movs	r2, #1
 8008f2a:	4947      	ldr	r1, [pc, #284]	@ (8009048 <passThrough+0x128>)
 8008f2c:	4847      	ldr	r0, [pc, #284]	@ (800904c <passThrough+0x12c>)
 8008f2e:	f7fe f99b 	bl	8007268 <HAL_SAI_Receive>
	HAL_SAI_Receive (&hsai_BlockB2,(uint8_t *)&echInputRight,1,SAI_WAIT);	// Right
 8008f32:	2364      	movs	r3, #100	@ 0x64
 8008f34:	2201      	movs	r2, #1
 8008f36:	4946      	ldr	r1, [pc, #280]	@ (8009050 <passThrough+0x130>)
 8008f38:	4844      	ldr	r0, [pc, #272]	@ (800904c <passThrough+0x12c>)
 8008f3a:	f7fe f995 	bl	8007268 <HAL_SAI_Receive>

    /* Calcul de l'écho pour le canal gauche */
    int16_t echoLeft = bufferInputLeft[pos];  // Prendre l'échantillon à retard du canal gauche
 8008f3e:	4b45      	ldr	r3, [pc, #276]	@ (8009054 <passThrough+0x134>)
 8008f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f44:	461a      	mov	r2, r3
 8008f46:	4b44      	ldr	r3, [pc, #272]	@ (8009058 <passThrough+0x138>)
 8008f48:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008f4c:	80fb      	strh	r3, [r7, #6]
    echOutputLeft = echInputLeft + (int16_t)(ALPHA * echoLeft);  // Ajout de l'écho sur le signal gauche
 8008f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7f7 fbd4 	bl	8000700 <__aeabi_i2d>
 8008f58:	a339      	add	r3, pc, #228	@ (adr r3, 8009040 <passThrough+0x120>)
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f7f7 f953 	bl	8000208 <__aeabi_dmul>
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	4610      	mov	r0, r2
 8008f68:	4619      	mov	r1, r3
 8008f6a:	f7f7 fc33 	bl	80007d4 <__aeabi_d2iz>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	b21b      	sxth	r3, r3
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	4b34      	ldr	r3, [pc, #208]	@ (8009048 <passThrough+0x128>)
 8008f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	4413      	add	r3, r2
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	b21a      	sxth	r2, r3
 8008f82:	4b36      	ldr	r3, [pc, #216]	@ (800905c <passThrough+0x13c>)
 8008f84:	801a      	strh	r2, [r3, #0]

    /* Calcul de l'écho pour le canal droit */
    int16_t echoRight = bufferInputRight[pos];  // Prendre l'échantillon à retard du canal droit
 8008f86:	4b33      	ldr	r3, [pc, #204]	@ (8009054 <passThrough+0x134>)
 8008f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	4b34      	ldr	r3, [pc, #208]	@ (8009060 <passThrough+0x140>)
 8008f90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008f94:	80bb      	strh	r3, [r7, #4]
    echOutputRight = echInputRight + (int16_t)(ALPHA * echoRight); // Ajout de l'écho sur le signal droit
 8008f96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7f7 fbb0 	bl	8000700 <__aeabi_i2d>
 8008fa0:	a327      	add	r3, pc, #156	@ (adr r3, 8009040 <passThrough+0x120>)
 8008fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa6:	f7f7 f92f 	bl	8000208 <__aeabi_dmul>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4610      	mov	r0, r2
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	f7f7 fc0f 	bl	80007d4 <__aeabi_d2iz>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	b21b      	sxth	r3, r3
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	4b24      	ldr	r3, [pc, #144]	@ (8009050 <passThrough+0x130>)
 8008fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	4413      	add	r3, r2
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	b21a      	sxth	r2, r3
 8008fca:	4b26      	ldr	r3, [pc, #152]	@ (8009064 <passThrough+0x144>)
 8008fcc:	801a      	strh	r2, [r3, #0]
	/*  Output = Input */
	// echOutputLeft = echInputLeft;
	// echOutputRight = echInputRight;

	/* Envoi des échantillons de sortie */
	HAL_SAI_Transmit(&hsai_BlockA2,(uint8_t *)&echOutputLeft,1,SAI_WAIT);	// Left
 8008fce:	2364      	movs	r3, #100	@ 0x64
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	4922      	ldr	r1, [pc, #136]	@ (800905c <passThrough+0x13c>)
 8008fd4:	4824      	ldr	r0, [pc, #144]	@ (8009068 <passThrough+0x148>)
 8008fd6:	f7fe f879 	bl	80070cc <HAL_SAI_Transmit>
	HAL_SAI_Transmit(&hsai_BlockA2,(uint8_t *)&echOutputRight,1,SAI_WAIT);	// Right
 8008fda:	2364      	movs	r3, #100	@ 0x64
 8008fdc:	2201      	movs	r2, #1
 8008fde:	4921      	ldr	r1, [pc, #132]	@ (8009064 <passThrough+0x144>)
 8008fe0:	4821      	ldr	r0, [pc, #132]	@ (8009068 <passThrough+0x148>)
 8008fe2:	f7fe f873 	bl	80070cc <HAL_SAI_Transmit>

    /* Mise à jour des buffers circulaires pour chaque canal */
	bufferInputLeft[pos] = echInputLeft;   // Stocke l'échantillon d'entrée dans le buffer gauche
 8008fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8009054 <passThrough+0x134>)
 8008fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fec:	461a      	mov	r2, r3
 8008fee:	4b16      	ldr	r3, [pc, #88]	@ (8009048 <passThrough+0x128>)
 8008ff0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008ff4:	4b18      	ldr	r3, [pc, #96]	@ (8009058 <passThrough+0x138>)
 8008ff6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	bufferInputRight[pos] = echInputRight; // Stocke l'échantillon d'entrée dans le buffer droit
 8008ffa:	4b16      	ldr	r3, [pc, #88]	@ (8009054 <passThrough+0x134>)
 8008ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009000:	461a      	mov	r2, r3
 8009002:	4b13      	ldr	r3, [pc, #76]	@ (8009050 <passThrough+0x130>)
 8009004:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009008:	4b15      	ldr	r3, [pc, #84]	@ (8009060 <passThrough+0x140>)
 800900a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    /* Mise à jour de la position dans les buffers circulaires */
    pos = (pos + 1) % BUFFER_SIZE_INPUT;
 800900e:	4b11      	ldr	r3, [pc, #68]	@ (8009054 <passThrough+0x134>)
 8009010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009014:	3301      	adds	r3, #1
 8009016:	4a15      	ldr	r2, [pc, #84]	@ (800906c <passThrough+0x14c>)
 8009018:	fb82 1203 	smull	r1, r2, r2, r3
 800901c:	1211      	asrs	r1, r2, #8
 800901e:	17da      	asrs	r2, r3, #31
 8009020:	1a8a      	subs	r2, r1, r2
 8009022:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8009026:	fb01 f202 	mul.w	r2, r1, r2
 800902a:	1a9a      	subs	r2, r3, r2
 800902c:	b212      	sxth	r2, r2
 800902e:	4b09      	ldr	r3, [pc, #36]	@ (8009054 <passThrough+0x134>)
 8009030:	801a      	strh	r2, [r3, #0]
}
 8009032:	bf00      	nop
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	f3af 8000 	nop.w
 8009040:	33333333 	.word	0x33333333
 8009044:	3fe33333 	.word	0x3fe33333
 8009048:	2000419c 	.word	0x2000419c
 800904c:	20004360 	.word	0x20004360
 8009050:	2000419e 	.word	0x2000419e
 8009054:	200041a4 	.word	0x200041a4
 8009058:	2000225c 	.word	0x2000225c
 800905c:	200041a2 	.word	0x200041a2
 8009060:	2000031c 	.word	0x2000031c
 8009064:	200041a0 	.word	0x200041a0
 8009068:	200042dc 	.word	0x200042dc
 800906c:	10624dd3 	.word	0x10624dd3

08009070 <main>:


int main(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
	SCB_EnableICache();
 8009074:	f7ff fef0 	bl	8008e58 <SCB_EnableICache>
	SCB_EnableDCache();
 8009078:	f7ff ff0e 	bl	8008e98 <SCB_EnableDCache>
	HAL_Init();
 800907c:	f7fa fa54 	bl	8003528 <HAL_Init>
	BOARD_Init();
 8009080:	f000 f804 	bl	800908c <BOARD_Init>

	while(1){
		passThrough();
 8009084:	f7ff ff4c 	bl	8008f20 <passThrough>
 8009088:	e7fc      	b.n	8009084 <main+0x14>
	...

0800908c <BOARD_Init>:
SDRAM_HandleTypeDef hsdram1;

/***************************  STM32 Configuration  **********************************/
/************************************************************************************/

void BOARD_Init(void){
 800908c:	b580      	push	{r7, lr}
 800908e:	af00      	add	r7, sp, #0
	SystemClock_Config();
 8009090:	f000 f840 	bl	8009114 <SystemClock_Config>
	MX_GPIO_Init();
 8009094:	f000 fd42 	bl	8009b1c <MX_GPIO_Init>
	MX_I2C3_Init();
 8009098:	f000 f922 	bl	80092e0 <MX_I2C3_Init>
	MX_SAI2_Init();
 800909c:	f000 f9f0 	bl	8009480 <MX_SAI2_Init>
	MX_TIM1_Init();
 80090a0:	f000 fa9a 	bl	80095d8 <MX_TIM1_Init>
	MX_TIM2_Init();
 80090a4:	f000 faea 	bl	800967c <MX_TIM2_Init>
	MX_TIM5_Init();
 80090a8:	f000 fb84 	bl	80097b4 <MX_TIM5_Init>
	MX_TIM8_Init();
 80090ac:	f000 fbf8 	bl	80098a0 <MX_TIM8_Init>
	MX_TIM12_Init();
 80090b0:	f000 fc48 	bl	8009944 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 80090b4:	f000 fc8a 	bl	80099cc <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 80090b8:	f000 fcb8 	bl	8009a2c <MX_USART6_UART_Init>
	MX_FMC_Init();
 80090bc:	f000 fce6 	bl	8009a8c <MX_FMC_Init>
	MX_LTDC_Init();
 80090c0:	f000 f94e 	bl	8009360 <MX_LTDC_Init>
	MX_DMA2D_Init();
 80090c4:	f000 f8da 	bl	800927c <MX_DMA2D_Init>
	MX_TIM3_Init();
 80090c8:	f000 fb26 	bl	8009718 <MX_TIM3_Init>

	__HAL_SAI_ENABLE(&hsai_BlockA2); // Must be before Initialisation of WM8994
 80090cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009108 <BOARD_Init+0x7c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009108 <BOARD_Init+0x7c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80090da:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2); // Must be before Initialisation of WM8994
 80090dc:	4b0b      	ldr	r3, [pc, #44]	@ (800910c <BOARD_Init+0x80>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	4b0a      	ldr	r3, [pc, #40]	@ (800910c <BOARD_Init+0x80>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80090ea:	601a      	str	r2, [r3, #0]
	wm8994Init();
 80090ec:	f001 f84a 	bl	800a184 <wm8994Init>
	BSP_LCD_Init();
 80090f0:	f7f9 fa2a 	bl	8002548 <BSP_LCD_Init>
	lcd_start_page();
 80090f4:	f7ff fe42 	bl	8008d7c <lcd_start_page>
	HAL_TIM_Base_Start(&htim3);
 80090f8:	4805      	ldr	r0, [pc, #20]	@ (8009110 <BOARD_Init+0x84>)
 80090fa:	f7fe faaf 	bl	800765c <HAL_TIM_Base_Start>
	initGpio();			// Toggle PA0 pour la mesure du temps de calcul
 80090fe:	f001 f81b 	bl	800a138 <initGpio>
}
 8009102:	bf00      	nop
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	200042dc 	.word	0x200042dc
 800910c:	20004360 	.word	0x20004360
 8009110:	20004464 	.word	0x20004464

08009114 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b0b4      	sub	sp, #208	@ 0xd0
 8009118:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800911a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800911e:	2230      	movs	r2, #48	@ 0x30
 8009120:	2100      	movs	r1, #0
 8009122:	4618      	mov	r0, r3
 8009124:	f001 fd47 	bl	800abb6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009128:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	605a      	str	r2, [r3, #4]
 8009132:	609a      	str	r2, [r3, #8]
 8009134:	60da      	str	r2, [r3, #12]
 8009136:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009138:	f107 0308 	add.w	r3, r7, #8
 800913c:	2284      	movs	r2, #132	@ 0x84
 800913e:	2100      	movs	r1, #0
 8009140:	4618      	mov	r0, r3
 8009142:	f001 fd38 	bl	800abb6 <memset>


	HAL_PWR_EnableBkUpAccess();
 8009146:	f7fc fc69 	bl	8005a1c <HAL_PWR_EnableBkUpAccess>

	__HAL_RCC_PWR_CLK_ENABLE();
 800914a:	4b49      	ldr	r3, [pc, #292]	@ (8009270 <SystemClock_Config+0x15c>)
 800914c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800914e:	4a48      	ldr	r2, [pc, #288]	@ (8009270 <SystemClock_Config+0x15c>)
 8009150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009154:	6413      	str	r3, [r2, #64]	@ 0x40
 8009156:	4b46      	ldr	r3, [pc, #280]	@ (8009270 <SystemClock_Config+0x15c>)
 8009158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800915a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800915e:	607b      	str	r3, [r7, #4]
 8009160:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009162:	4b44      	ldr	r3, [pc, #272]	@ (8009274 <SystemClock_Config+0x160>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a43      	ldr	r2, [pc, #268]	@ (8009274 <SystemClock_Config+0x160>)
 8009168:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800916c:	6013      	str	r3, [r2, #0]
 800916e:	4b41      	ldr	r3, [pc, #260]	@ (8009274 <SystemClock_Config+0x160>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009176:	603b      	str	r3, [r7, #0]
 8009178:	683b      	ldr	r3, [r7, #0]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800917a:	2301      	movs	r3, #1
 800917c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009180:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009184:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009188:	2302      	movs	r3, #2
 800918a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800918e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009192:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8009196:	2319      	movs	r3, #25
 8009198:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 800919c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80091a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80091a4:	2302      	movs	r3, #2
 80091a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 80091aa:	2309      	movs	r3, #9
 80091ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80091b0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fc fc91 	bl	8005adc <HAL_RCC_OscConfig>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 80091c0:	f000 ffdc 	bl	800a17c <Error_Handler>
	}

	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80091c4:	f7fc fc3a 	bl	8005a3c <HAL_PWREx_EnableOverDrive>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <SystemClock_Config+0xbe>
	{
		Error_Handler();
 80091ce:	f000 ffd5 	bl	800a17c <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80091d2:	230f      	movs	r3, #15
 80091d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80091d8:	2302      	movs	r3, #2
 80091da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80091de:	2300      	movs	r3, #0
 80091e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80091e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80091e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80091ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80091f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80091f4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80091f8:	2106      	movs	r1, #6
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fc fede 	bl	8005fbc <HAL_RCC_ClockConfig>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <SystemClock_Config+0xf6>
	{
		Error_Handler();
 8009206:	f000 ffb9 	bl	800a17c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 800920a:	4b1b      	ldr	r3, [pc, #108]	@ (8009278 <SystemClock_Config+0x164>)
 800920c:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 800920e:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8009212:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8009214:	2302      	movs	r3, #2
 8009216:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8009218:	2302      	movs	r3, #2
 800921a:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
 800921c:	2307      	movs	r3, #7
 800921e:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8009220:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8009224:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8009226:	2305      	movs	r3, #5
 8009228:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800922a:	2302      	movs	r3, #2
 800922c:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800922e:	2303      	movs	r3, #3
 8009230:	62bb      	str	r3, [r7, #40]	@ 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 8009232:	2301      	movs	r3, #1
 8009234:	62fb      	str	r3, [r7, #44]	@ 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8009236:	2301      	movs	r3, #1
 8009238:	633b      	str	r3, [r7, #48]	@ 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800923a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800923e:	637b      	str	r3, [r7, #52]	@ 0x34
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8009240:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009244:	64bb      	str	r3, [r7, #72]	@ 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009246:	2300      	movs	r3, #0
 8009248:	64fb      	str	r3, [r7, #76]	@ 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800924a:	2300      	movs	r3, #0
 800924c:	663b      	str	r3, [r7, #96]	@ 0x60
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800924e:	2300      	movs	r3, #0
 8009250:	677b      	str	r3, [r7, #116]	@ 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009252:	f107 0308 	add.w	r3, r7, #8
 8009256:	4618      	mov	r0, r3
 8009258:	f7fd f892 	bl	8006380 <HAL_RCCEx_PeriphCLKConfig>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <SystemClock_Config+0x152>
	{
		Error_Handler();
 8009262:	f000 ff8b 	bl	800a17c <Error_Handler>
	}
}
 8009266:	bf00      	nop
 8009268:	37d0      	adds	r7, #208	@ 0xd0
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	40023800 	.word	0x40023800
 8009274:	40007000 	.word	0x40007000
 8009278:	00110848 	.word	0x00110848

0800927c <MX_DMA2D_Init>:


void MX_DMA2D_Init(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0

	hdma2d.Instance = DMA2D;
 8009280:	4b15      	ldr	r3, [pc, #84]	@ (80092d8 <MX_DMA2D_Init+0x5c>)
 8009282:	4a16      	ldr	r2, [pc, #88]	@ (80092dc <MX_DMA2D_Init+0x60>)
 8009284:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8009286:	4b14      	ldr	r3, [pc, #80]	@ (80092d8 <MX_DMA2D_Init+0x5c>)
 8009288:	2200      	movs	r2, #0
 800928a:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800928c:	4b12      	ldr	r3, [pc, #72]	@ (80092d8 <MX_DMA2D_Init+0x5c>)
 800928e:	2200      	movs	r2, #0
 8009290:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8009292:	4b11      	ldr	r3, [pc, #68]	@ (80092d8 <MX_DMA2D_Init+0x5c>)
 8009294:	2200      	movs	r2, #0
 8009296:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8009298:	4b0f      	ldr	r3, [pc, #60]	@ (80092d8 <MX_DMA2D_Init+0x5c>)
 800929a:	2200      	movs	r2, #0
 800929c:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800929e:	4b0e      	ldr	r3, [pc, #56]	@ (80092d8 <MX_DMA2D_Init+0x5c>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80092a4:	4b0c      	ldr	r3, [pc, #48]	@ (80092d8 <MX_DMA2D_Init+0x5c>)
 80092a6:	2200      	movs	r2, #0
 80092a8:	631a      	str	r2, [r3, #48]	@ 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 80092aa:	4b0b      	ldr	r3, [pc, #44]	@ (80092d8 <MX_DMA2D_Init+0x5c>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80092b0:	4809      	ldr	r0, [pc, #36]	@ (80092d8 <MX_DMA2D_Init+0x5c>)
 80092b2:	f7fa fc95 	bl	8003be0 <HAL_DMA2D_Init>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d001      	beq.n	80092c0 <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 80092bc:	f000 ff5e 	bl	800a17c <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80092c0:	2101      	movs	r1, #1
 80092c2:	4805      	ldr	r0, [pc, #20]	@ (80092d8 <MX_DMA2D_Init+0x5c>)
 80092c4:	f7fa fefa 	bl	80040bc <HAL_DMA2D_ConfigLayer>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 80092ce:	f000 ff55 	bl	800a17c <Error_Handler>
	}
}
 80092d2:	bf00      	nop
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	200041a8 	.word	0x200041a8
 80092dc:	4002b000 	.word	0x4002b000

080092e0 <MX_I2C3_Init>:


void MX_I2C3_Init(void)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	af00      	add	r7, sp, #0

	hi2c3.Instance = I2C3;
 80092e4:	4b1b      	ldr	r3, [pc, #108]	@ (8009354 <MX_I2C3_Init+0x74>)
 80092e6:	4a1c      	ldr	r2, [pc, #112]	@ (8009358 <MX_I2C3_Init+0x78>)
 80092e8:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 80092ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009354 <MX_I2C3_Init+0x74>)
 80092ec:	4a1b      	ldr	r2, [pc, #108]	@ (800935c <MX_I2C3_Init+0x7c>)
 80092ee:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 80092f0:	4b18      	ldr	r3, [pc, #96]	@ (8009354 <MX_I2C3_Init+0x74>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80092f6:	4b17      	ldr	r3, [pc, #92]	@ (8009354 <MX_I2C3_Init+0x74>)
 80092f8:	2201      	movs	r2, #1
 80092fa:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80092fc:	4b15      	ldr	r3, [pc, #84]	@ (8009354 <MX_I2C3_Init+0x74>)
 80092fe:	2200      	movs	r2, #0
 8009300:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8009302:	4b14      	ldr	r3, [pc, #80]	@ (8009354 <MX_I2C3_Init+0x74>)
 8009304:	2200      	movs	r2, #0
 8009306:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009308:	4b12      	ldr	r3, [pc, #72]	@ (8009354 <MX_I2C3_Init+0x74>)
 800930a:	2200      	movs	r2, #0
 800930c:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800930e:	4b11      	ldr	r3, [pc, #68]	@ (8009354 <MX_I2C3_Init+0x74>)
 8009310:	2200      	movs	r2, #0
 8009312:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009314:	4b0f      	ldr	r3, [pc, #60]	@ (8009354 <MX_I2C3_Init+0x74>)
 8009316:	2200      	movs	r2, #0
 8009318:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800931a:	480e      	ldr	r0, [pc, #56]	@ (8009354 <MX_I2C3_Init+0x74>)
 800931c:	f7fb fadc 	bl	80048d8 <HAL_I2C_Init>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8009326:	f000 ff29 	bl	800a17c <Error_Handler>
	}

	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800932a:	2100      	movs	r1, #0
 800932c:	4809      	ldr	r0, [pc, #36]	@ (8009354 <MX_I2C3_Init+0x74>)
 800932e:	f7fc f813 	bl	8005358 <HAL_I2CEx_ConfigAnalogFilter>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8009338:	f000 ff20 	bl	800a17c <Error_Handler>
	}

	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800933c:	2100      	movs	r1, #0
 800933e:	4805      	ldr	r0, [pc, #20]	@ (8009354 <MX_I2C3_Init+0x74>)
 8009340:	f7fc f855 	bl	80053ee <HAL_I2CEx_ConfigDigitalFilter>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 800934a:	f000 ff17 	bl	800a17c <Error_Handler>
	}

}
 800934e:	bf00      	nop
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	200041e8 	.word	0x200041e8
 8009358:	40005c00 	.word	0x40005c00
 800935c:	00c0eaff 	.word	0x00c0eaff

08009360 <MX_LTDC_Init>:


void MX_LTDC_Init(void)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b08e      	sub	sp, #56	@ 0x38
 8009364:	af00      	add	r7, sp, #0

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8009366:	1d3b      	adds	r3, r7, #4
 8009368:	2234      	movs	r2, #52	@ 0x34
 800936a:	2100      	movs	r1, #0
 800936c:	4618      	mov	r0, r3
 800936e:	f001 fc22 	bl	800abb6 <memset>

	hltdc.Instance = LTDC;
 8009372:	4b40      	ldr	r3, [pc, #256]	@ (8009474 <MX_LTDC_Init+0x114>)
 8009374:	4a40      	ldr	r2, [pc, #256]	@ (8009478 <MX_LTDC_Init+0x118>)
 8009376:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009378:	4b3e      	ldr	r3, [pc, #248]	@ (8009474 <MX_LTDC_Init+0x114>)
 800937a:	2200      	movs	r2, #0
 800937c:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800937e:	4b3d      	ldr	r3, [pc, #244]	@ (8009474 <MX_LTDC_Init+0x114>)
 8009380:	2200      	movs	r2, #0
 8009382:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8009384:	4b3b      	ldr	r3, [pc, #236]	@ (8009474 <MX_LTDC_Init+0x114>)
 8009386:	2200      	movs	r2, #0
 8009388:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800938a:	4b3a      	ldr	r3, [pc, #232]	@ (8009474 <MX_LTDC_Init+0x114>)
 800938c:	2200      	movs	r2, #0
 800938e:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8009390:	4b38      	ldr	r3, [pc, #224]	@ (8009474 <MX_LTDC_Init+0x114>)
 8009392:	2228      	movs	r2, #40	@ 0x28
 8009394:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8009396:	4b37      	ldr	r3, [pc, #220]	@ (8009474 <MX_LTDC_Init+0x114>)
 8009398:	2209      	movs	r2, #9
 800939a:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 800939c:	4b35      	ldr	r3, [pc, #212]	@ (8009474 <MX_LTDC_Init+0x114>)
 800939e:	2235      	movs	r2, #53	@ 0x35
 80093a0:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 80093a2:	4b34      	ldr	r3, [pc, #208]	@ (8009474 <MX_LTDC_Init+0x114>)
 80093a4:	220b      	movs	r2, #11
 80093a6:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 80093a8:	4b32      	ldr	r3, [pc, #200]	@ (8009474 <MX_LTDC_Init+0x114>)
 80093aa:	f240 2215 	movw	r2, #533	@ 0x215
 80093ae:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 80093b0:	4b30      	ldr	r3, [pc, #192]	@ (8009474 <MX_LTDC_Init+0x114>)
 80093b2:	f240 121b 	movw	r2, #283	@ 0x11b
 80093b6:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 565;
 80093b8:	4b2e      	ldr	r3, [pc, #184]	@ (8009474 <MX_LTDC_Init+0x114>)
 80093ba:	f240 2235 	movw	r2, #565	@ 0x235
 80093be:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 285;
 80093c0:	4b2c      	ldr	r3, [pc, #176]	@ (8009474 <MX_LTDC_Init+0x114>)
 80093c2:	f240 121d 	movw	r2, #285	@ 0x11d
 80093c6:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 80093c8:	4b2a      	ldr	r3, [pc, #168]	@ (8009474 <MX_LTDC_Init+0x114>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80093d0:	4b28      	ldr	r3, [pc, #160]	@ (8009474 <MX_LTDC_Init+0x114>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 80093d8:	4b26      	ldr	r3, [pc, #152]	@ (8009474 <MX_LTDC_Init+0x114>)
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80093e0:	4824      	ldr	r0, [pc, #144]	@ (8009474 <MX_LTDC_Init+0x114>)
 80093e2:	f7fc f853 	bl	800548c <HAL_LTDC_Init>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 80093ec:	f000 fec6 	bl	800a17c <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 80093f4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80093f8:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 80093fe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009402:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8009404:	2302      	movs	r3, #2
 8009406:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8009408:	23ff      	movs	r3, #255	@ 0xff
 800940a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 800940c:	2300      	movs	r3, #0
 800940e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8009410:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009414:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009416:	2307      	movs	r3, #7
 8009418:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 800941a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800941e:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.ImageWidth = 480;
 8009420:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8009424:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg.ImageHeight = 272;
 8009426:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800942a:	633b      	str	r3, [r7, #48]	@ 0x30
	pLayerCfg.Backcolor.Blue = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	pLayerCfg.Backcolor.Green = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	pLayerCfg.Backcolor.Red = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800943e:	1d3b      	adds	r3, r7, #4
 8009440:	2200      	movs	r2, #0
 8009442:	4619      	mov	r1, r3
 8009444:	480b      	ldr	r0, [pc, #44]	@ (8009474 <MX_LTDC_Init+0x114>)
 8009446:	f7fc f8fd 	bl	8005644 <HAL_LTDC_ConfigLayer>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 8009450:	f000 fe94 	bl	800a17c <Error_Handler>
	}

	__HAL_RCC_LTDC_CLK_ENABLE();
 8009454:	4b09      	ldr	r3, [pc, #36]	@ (800947c <MX_LTDC_Init+0x11c>)
 8009456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009458:	4a08      	ldr	r2, [pc, #32]	@ (800947c <MX_LTDC_Init+0x11c>)
 800945a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800945e:	6453      	str	r3, [r2, #68]	@ 0x44
 8009460:	4b06      	ldr	r3, [pc, #24]	@ (800947c <MX_LTDC_Init+0x11c>)
 8009462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009464:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009468:	603b      	str	r3, [r7, #0]
 800946a:	683b      	ldr	r3, [r7, #0]


}
 800946c:	bf00      	nop
 800946e:	3738      	adds	r7, #56	@ 0x38
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	20004234 	.word	0x20004234
 8009478:	40016800 	.word	0x40016800
 800947c:	40023800 	.word	0x40023800

08009480 <MX_SAI2_Init>:


void MX_SAI2_Init(void)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	af00      	add	r7, sp, #0

	hsai_BlockA2.Instance = SAI2_Block_A;
 8009484:	4b50      	ldr	r3, [pc, #320]	@ (80095c8 <MX_SAI2_Init+0x148>)
 8009486:	4a51      	ldr	r2, [pc, #324]	@ (80095cc <MX_SAI2_Init+0x14c>)
 8009488:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800948a:	4b4f      	ldr	r3, [pc, #316]	@ (80095c8 <MX_SAI2_Init+0x148>)
 800948c:	2200      	movs	r2, #0
 800948e:	631a      	str	r2, [r3, #48]	@ 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8009490:	4b4d      	ldr	r3, [pc, #308]	@ (80095c8 <MX_SAI2_Init+0x148>)
 8009492:	2200      	movs	r2, #0
 8009494:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8009496:	4b4c      	ldr	r3, [pc, #304]	@ (80095c8 <MX_SAI2_Init+0x148>)
 8009498:	2280      	movs	r2, #128	@ 0x80
 800949a:	635a      	str	r2, [r3, #52]	@ 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800949c:	4b4a      	ldr	r3, [pc, #296]	@ (80095c8 <MX_SAI2_Init+0x148>)
 800949e:	2200      	movs	r2, #0
 80094a0:	639a      	str	r2, [r3, #56]	@ 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80094a2:	4b49      	ldr	r3, [pc, #292]	@ (80095c8 <MX_SAI2_Init+0x148>)
 80094a4:	2201      	movs	r2, #1
 80094a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80094a8:	4b47      	ldr	r3, [pc, #284]	@ (80095c8 <MX_SAI2_Init+0x148>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80094ae:	4b46      	ldr	r3, [pc, #280]	@ (80095c8 <MX_SAI2_Init+0x148>)
 80094b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80094b4:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80094b6:	4b44      	ldr	r3, [pc, #272]	@ (80095c8 <MX_SAI2_Init+0x148>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80094bc:	4b42      	ldr	r3, [pc, #264]	@ (80095c8 <MX_SAI2_Init+0x148>)
 80094be:	2201      	movs	r2, #1
 80094c0:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 80094c2:	4b41      	ldr	r3, [pc, #260]	@ (80095c8 <MX_SAI2_Init+0x148>)
 80094c4:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80094c8:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80094ca:	4b3f      	ldr	r3, [pc, #252]	@ (80095c8 <MX_SAI2_Init+0x148>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80094d0:	4b3d      	ldr	r3, [pc, #244]	@ (80095c8 <MX_SAI2_Init+0x148>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80094d6:	4b3c      	ldr	r3, [pc, #240]	@ (80095c8 <MX_SAI2_Init+0x148>)
 80094d8:	2200      	movs	r2, #0
 80094da:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80094dc:	4b3a      	ldr	r3, [pc, #232]	@ (80095c8 <MX_SAI2_Init+0x148>)
 80094de:	2200      	movs	r2, #0
 80094e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 80094e2:	4b39      	ldr	r3, [pc, #228]	@ (80095c8 <MX_SAI2_Init+0x148>)
 80094e4:	2240      	movs	r2, #64	@ 0x40
 80094e6:	641a      	str	r2, [r3, #64]	@ 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 80094e8:	4b37      	ldr	r3, [pc, #220]	@ (80095c8 <MX_SAI2_Init+0x148>)
 80094ea:	2220      	movs	r2, #32
 80094ec:	645a      	str	r2, [r3, #68]	@ 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80094ee:	4b36      	ldr	r3, [pc, #216]	@ (80095c8 <MX_SAI2_Init+0x148>)
 80094f0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80094f4:	649a      	str	r2, [r3, #72]	@ 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80094f6:	4b34      	ldr	r3, [pc, #208]	@ (80095c8 <MX_SAI2_Init+0x148>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	64da      	str	r2, [r3, #76]	@ 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80094fc:	4b32      	ldr	r3, [pc, #200]	@ (80095c8 <MX_SAI2_Init+0x148>)
 80094fe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009502:	651a      	str	r2, [r3, #80]	@ 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8009504:	4b30      	ldr	r3, [pc, #192]	@ (80095c8 <MX_SAI2_Init+0x148>)
 8009506:	2200      	movs	r2, #0
 8009508:	655a      	str	r2, [r3, #84]	@ 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800950a:	4b2f      	ldr	r3, [pc, #188]	@ (80095c8 <MX_SAI2_Init+0x148>)
 800950c:	2200      	movs	r2, #0
 800950e:	659a      	str	r2, [r3, #88]	@ 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 8009510:	4b2d      	ldr	r3, [pc, #180]	@ (80095c8 <MX_SAI2_Init+0x148>)
 8009512:	2204      	movs	r2, #4
 8009514:	65da      	str	r2, [r3, #92]	@ 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8009516:	4b2c      	ldr	r3, [pc, #176]	@ (80095c8 <MX_SAI2_Init+0x148>)
 8009518:	2205      	movs	r2, #5
 800951a:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800951c:	482a      	ldr	r0, [pc, #168]	@ (80095c8 <MX_SAI2_Init+0x148>)
 800951e:	f7fd fc5f 	bl	8006de0 <HAL_SAI_Init>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 8009528:	f000 fe28 	bl	800a17c <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 800952c:	4b28      	ldr	r3, [pc, #160]	@ (80095d0 <MX_SAI2_Init+0x150>)
 800952e:	4a29      	ldr	r2, [pc, #164]	@ (80095d4 <MX_SAI2_Init+0x154>)
 8009530:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8009532:	4b27      	ldr	r3, [pc, #156]	@ (80095d0 <MX_SAI2_Init+0x150>)
 8009534:	2200      	movs	r2, #0
 8009536:	631a      	str	r2, [r3, #48]	@ 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8009538:	4b25      	ldr	r3, [pc, #148]	@ (80095d0 <MX_SAI2_Init+0x150>)
 800953a:	2203      	movs	r2, #3
 800953c:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 800953e:	4b24      	ldr	r3, [pc, #144]	@ (80095d0 <MX_SAI2_Init+0x150>)
 8009540:	2280      	movs	r2, #128	@ 0x80
 8009542:	635a      	str	r2, [r3, #52]	@ 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8009544:	4b22      	ldr	r3, [pc, #136]	@ (80095d0 <MX_SAI2_Init+0x150>)
 8009546:	2200      	movs	r2, #0
 8009548:	639a      	str	r2, [r3, #56]	@ 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800954a:	4b21      	ldr	r3, [pc, #132]	@ (80095d0 <MX_SAI2_Init+0x150>)
 800954c:	2201      	movs	r2, #1
 800954e:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8009550:	4b1f      	ldr	r3, [pc, #124]	@ (80095d0 <MX_SAI2_Init+0x150>)
 8009552:	2201      	movs	r2, #1
 8009554:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8009556:	4b1e      	ldr	r3, [pc, #120]	@ (80095d0 <MX_SAI2_Init+0x150>)
 8009558:	2200      	movs	r2, #0
 800955a:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800955c:	4b1c      	ldr	r3, [pc, #112]	@ (80095d0 <MX_SAI2_Init+0x150>)
 800955e:	2201      	movs	r2, #1
 8009560:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8009562:	4b1b      	ldr	r3, [pc, #108]	@ (80095d0 <MX_SAI2_Init+0x150>)
 8009564:	2200      	movs	r2, #0
 8009566:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8009568:	4b19      	ldr	r3, [pc, #100]	@ (80095d0 <MX_SAI2_Init+0x150>)
 800956a:	2200      	movs	r2, #0
 800956c:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800956e:	4b18      	ldr	r3, [pc, #96]	@ (80095d0 <MX_SAI2_Init+0x150>)
 8009570:	2200      	movs	r2, #0
 8009572:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8009574:	4b16      	ldr	r3, [pc, #88]	@ (80095d0 <MX_SAI2_Init+0x150>)
 8009576:	2200      	movs	r2, #0
 8009578:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 800957a:	4b15      	ldr	r3, [pc, #84]	@ (80095d0 <MX_SAI2_Init+0x150>)
 800957c:	2240      	movs	r2, #64	@ 0x40
 800957e:	641a      	str	r2, [r3, #64]	@ 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8009580:	4b13      	ldr	r3, [pc, #76]	@ (80095d0 <MX_SAI2_Init+0x150>)
 8009582:	2220      	movs	r2, #32
 8009584:	645a      	str	r2, [r3, #68]	@ 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8009586:	4b12      	ldr	r3, [pc, #72]	@ (80095d0 <MX_SAI2_Init+0x150>)
 8009588:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800958c:	649a      	str	r2, [r3, #72]	@ 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800958e:	4b10      	ldr	r3, [pc, #64]	@ (80095d0 <MX_SAI2_Init+0x150>)
 8009590:	2200      	movs	r2, #0
 8009592:	64da      	str	r2, [r3, #76]	@ 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8009594:	4b0e      	ldr	r3, [pc, #56]	@ (80095d0 <MX_SAI2_Init+0x150>)
 8009596:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800959a:	651a      	str	r2, [r3, #80]	@ 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800959c:	4b0c      	ldr	r3, [pc, #48]	@ (80095d0 <MX_SAI2_Init+0x150>)
 800959e:	2200      	movs	r2, #0
 80095a0:	655a      	str	r2, [r3, #84]	@ 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80095a2:	4b0b      	ldr	r3, [pc, #44]	@ (80095d0 <MX_SAI2_Init+0x150>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	659a      	str	r2, [r3, #88]	@ 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 80095a8:	4b09      	ldr	r3, [pc, #36]	@ (80095d0 <MX_SAI2_Init+0x150>)
 80095aa:	2204      	movs	r2, #4
 80095ac:	65da      	str	r2, [r3, #92]	@ 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 80095ae:	4b08      	ldr	r3, [pc, #32]	@ (80095d0 <MX_SAI2_Init+0x150>)
 80095b0:	220a      	movs	r2, #10
 80095b2:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80095b4:	4806      	ldr	r0, [pc, #24]	@ (80095d0 <MX_SAI2_Init+0x150>)
 80095b6:	f7fd fc13 	bl	8006de0 <HAL_SAI_Init>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 80095c0:	f000 fddc 	bl	800a17c <Error_Handler>
	}

}
 80095c4:	bf00      	nop
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	200042dc 	.word	0x200042dc
 80095cc:	40015c04 	.word	0x40015c04
 80095d0:	20004360 	.word	0x20004360
 80095d4:	40015c24 	.word	0x40015c24

080095d8 <MX_TIM1_Init>:


void MX_TIM1_Init(void)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b088      	sub	sp, #32
 80095dc:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80095de:	f107 0310 	add.w	r3, r7, #16
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	605a      	str	r2, [r3, #4]
 80095e8:	609a      	str	r2, [r3, #8]
 80095ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80095ec:	1d3b      	adds	r3, r7, #4
 80095ee:	2200      	movs	r2, #0
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	605a      	str	r2, [r3, #4]
 80095f4:	609a      	str	r2, [r3, #8]

	htim1.Instance = TIM1;
 80095f6:	4b1f      	ldr	r3, [pc, #124]	@ (8009674 <MX_TIM1_Init+0x9c>)
 80095f8:	4a1f      	ldr	r2, [pc, #124]	@ (8009678 <MX_TIM1_Init+0xa0>)
 80095fa:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80095fc:	4b1d      	ldr	r3, [pc, #116]	@ (8009674 <MX_TIM1_Init+0x9c>)
 80095fe:	2200      	movs	r2, #0
 8009600:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009602:	4b1c      	ldr	r3, [pc, #112]	@ (8009674 <MX_TIM1_Init+0x9c>)
 8009604:	2200      	movs	r2, #0
 8009606:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 8009608:	4b1a      	ldr	r3, [pc, #104]	@ (8009674 <MX_TIM1_Init+0x9c>)
 800960a:	2200      	movs	r2, #0
 800960c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800960e:	4b19      	ldr	r3, [pc, #100]	@ (8009674 <MX_TIM1_Init+0x9c>)
 8009610:	2200      	movs	r2, #0
 8009612:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8009614:	4b17      	ldr	r3, [pc, #92]	@ (8009674 <MX_TIM1_Init+0x9c>)
 8009616:	2200      	movs	r2, #0
 8009618:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800961a:	4b16      	ldr	r3, [pc, #88]	@ (8009674 <MX_TIM1_Init+0x9c>)
 800961c:	2200      	movs	r2, #0
 800961e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009620:	4814      	ldr	r0, [pc, #80]	@ (8009674 <MX_TIM1_Init+0x9c>)
 8009622:	f7fd fff0 	bl	8007606 <HAL_TIM_Base_Init>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 800962c:	f000 fda6 	bl	800a17c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009630:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009634:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009636:	f107 0310 	add.w	r3, r7, #16
 800963a:	4619      	mov	r1, r3
 800963c:	480d      	ldr	r0, [pc, #52]	@ (8009674 <MX_TIM1_Init+0x9c>)
 800963e:	f7fe f853 	bl	80076e8 <HAL_TIM_ConfigClockSource>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d001      	beq.n	800964c <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 8009648:	f000 fd98 	bl	800a17c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800964c:	2300      	movs	r3, #0
 800964e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009650:	2300      	movs	r3, #0
 8009652:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009654:	2300      	movs	r3, #0
 8009656:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009658:	1d3b      	adds	r3, r7, #4
 800965a:	4619      	mov	r1, r3
 800965c:	4805      	ldr	r0, [pc, #20]	@ (8009674 <MX_TIM1_Init+0x9c>)
 800965e:	f7fe fc59 	bl	8007f14 <HAL_TIMEx_MasterConfigSynchronization>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <MX_TIM1_Init+0x94>
	{
		Error_Handler();
 8009668:	f000 fd88 	bl	800a17c <Error_Handler>
	}
}
 800966c:	bf00      	nop
 800966e:	3720      	adds	r7, #32
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	200043e4 	.word	0x200043e4
 8009678:	40010000 	.word	0x40010000

0800967c <MX_TIM2_Init>:


void MX_TIM2_Init(void)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b088      	sub	sp, #32
 8009680:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009682:	f107 0310 	add.w	r3, r7, #16
 8009686:	2200      	movs	r2, #0
 8009688:	601a      	str	r2, [r3, #0]
 800968a:	605a      	str	r2, [r3, #4]
 800968c:	609a      	str	r2, [r3, #8]
 800968e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009690:	1d3b      	adds	r3, r7, #4
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]
 8009696:	605a      	str	r2, [r3, #4]
 8009698:	609a      	str	r2, [r3, #8]

	htim2.Instance = TIM2;
 800969a:	4b1e      	ldr	r3, [pc, #120]	@ (8009714 <MX_TIM2_Init+0x98>)
 800969c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80096a0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 32000;
 80096a2:	4b1c      	ldr	r3, [pc, #112]	@ (8009714 <MX_TIM2_Init+0x98>)
 80096a4:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80096a8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096aa:	4b1a      	ldr	r3, [pc, #104]	@ (8009714 <MX_TIM2_Init+0x98>)
 80096ac:	2200      	movs	r2, #0
 80096ae:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0;
 80096b0:	4b18      	ldr	r3, [pc, #96]	@ (8009714 <MX_TIM2_Init+0x98>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80096b6:	4b17      	ldr	r3, [pc, #92]	@ (8009714 <MX_TIM2_Init+0x98>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80096bc:	4b15      	ldr	r3, [pc, #84]	@ (8009714 <MX_TIM2_Init+0x98>)
 80096be:	2280      	movs	r2, #128	@ 0x80
 80096c0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80096c2:	4814      	ldr	r0, [pc, #80]	@ (8009714 <MX_TIM2_Init+0x98>)
 80096c4:	f7fd ff9f 	bl	8007606 <HAL_TIM_Base_Init>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 80096ce:	f000 fd55 	bl	800a17c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80096d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80096d6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80096d8:	f107 0310 	add.w	r3, r7, #16
 80096dc:	4619      	mov	r1, r3
 80096de:	480d      	ldr	r0, [pc, #52]	@ (8009714 <MX_TIM2_Init+0x98>)
 80096e0:	f7fe f802 	bl	80076e8 <HAL_TIM_ConfigClockSource>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 80096ea:	f000 fd47 	bl	800a17c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80096ee:	2300      	movs	r3, #0
 80096f0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80096f6:	1d3b      	adds	r3, r7, #4
 80096f8:	4619      	mov	r1, r3
 80096fa:	4806      	ldr	r0, [pc, #24]	@ (8009714 <MX_TIM2_Init+0x98>)
 80096fc:	f7fe fc0a 	bl	8007f14 <HAL_TIMEx_MasterConfigSynchronization>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8009706:	f000 fd39 	bl	800a17c <Error_Handler>
	}

}
 800970a:	bf00      	nop
 800970c:	3720      	adds	r7, #32
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20004424 	.word	0x20004424

08009718 <MX_TIM3_Init>:


void MX_TIM3_Init(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b088      	sub	sp, #32
 800971c:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800971e:	f107 0310 	add.w	r3, r7, #16
 8009722:	2200      	movs	r2, #0
 8009724:	601a      	str	r2, [r3, #0]
 8009726:	605a      	str	r2, [r3, #4]
 8009728:	609a      	str	r2, [r3, #8]
 800972a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800972c:	1d3b      	adds	r3, r7, #4
 800972e:	2200      	movs	r2, #0
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	605a      	str	r2, [r3, #4]
 8009734:	609a      	str	r2, [r3, #8]

	htim3.Instance = TIM3;
 8009736:	4b1d      	ldr	r3, [pc, #116]	@ (80097ac <MX_TIM3_Init+0x94>)
 8009738:	4a1d      	ldr	r2, [pc, #116]	@ (80097b0 <MX_TIM3_Init+0x98>)
 800973a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 99;
 800973c:	4b1b      	ldr	r3, [pc, #108]	@ (80097ac <MX_TIM3_Init+0x94>)
 800973e:	2263      	movs	r2, #99	@ 0x63
 8009740:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009742:	4b1a      	ldr	r3, [pc, #104]	@ (80097ac <MX_TIM3_Init+0x94>)
 8009744:	2200      	movs	r2, #0
 8009746:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8009748:	4b18      	ldr	r3, [pc, #96]	@ (80097ac <MX_TIM3_Init+0x94>)
 800974a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800974e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009750:	4b16      	ldr	r3, [pc, #88]	@ (80097ac <MX_TIM3_Init+0x94>)
 8009752:	2200      	movs	r2, #0
 8009754:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009756:	4b15      	ldr	r3, [pc, #84]	@ (80097ac <MX_TIM3_Init+0x94>)
 8009758:	2200      	movs	r2, #0
 800975a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800975c:	4813      	ldr	r0, [pc, #76]	@ (80097ac <MX_TIM3_Init+0x94>)
 800975e:	f7fd ff52 	bl	8007606 <HAL_TIM_Base_Init>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8009768:	f000 fd08 	bl	800a17c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800976c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009770:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009772:	f107 0310 	add.w	r3, r7, #16
 8009776:	4619      	mov	r1, r3
 8009778:	480c      	ldr	r0, [pc, #48]	@ (80097ac <MX_TIM3_Init+0x94>)
 800977a:	f7fd ffb5 	bl	80076e8 <HAL_TIM_ConfigClockSource>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d001      	beq.n	8009788 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8009784:	f000 fcfa 	bl	800a17c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009788:	2300      	movs	r3, #0
 800978a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800978c:	2300      	movs	r3, #0
 800978e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009790:	1d3b      	adds	r3, r7, #4
 8009792:	4619      	mov	r1, r3
 8009794:	4805      	ldr	r0, [pc, #20]	@ (80097ac <MX_TIM3_Init+0x94>)
 8009796:	f7fe fbbd 	bl	8007f14 <HAL_TIMEx_MasterConfigSynchronization>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d001      	beq.n	80097a4 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 80097a0:	f000 fcec 	bl	800a17c <Error_Handler>
	}

}
 80097a4:	bf00      	nop
 80097a6:	3720      	adds	r7, #32
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	20004464 	.word	0x20004464
 80097b0:	40000400 	.word	0x40000400

080097b4 <MX_TIM5_Init>:


void MX_TIM5_Init(void)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b08e      	sub	sp, #56	@ 0x38
 80097b8:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80097ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80097be:	2200      	movs	r2, #0
 80097c0:	601a      	str	r2, [r3, #0]
 80097c2:	605a      	str	r2, [r3, #4]
 80097c4:	609a      	str	r2, [r3, #8]
 80097c6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80097c8:	f107 031c 	add.w	r3, r7, #28
 80097cc:	2200      	movs	r2, #0
 80097ce:	601a      	str	r2, [r3, #0]
 80097d0:	605a      	str	r2, [r3, #4]
 80097d2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80097d4:	463b      	mov	r3, r7
 80097d6:	2200      	movs	r2, #0
 80097d8:	601a      	str	r2, [r3, #0]
 80097da:	605a      	str	r2, [r3, #4]
 80097dc:	609a      	str	r2, [r3, #8]
 80097de:	60da      	str	r2, [r3, #12]
 80097e0:	611a      	str	r2, [r3, #16]
 80097e2:	615a      	str	r2, [r3, #20]
 80097e4:	619a      	str	r2, [r3, #24]


	htim5.Instance = TIM5;
 80097e6:	4b2c      	ldr	r3, [pc, #176]	@ (8009898 <MX_TIM5_Init+0xe4>)
 80097e8:	4a2c      	ldr	r2, [pc, #176]	@ (800989c <MX_TIM5_Init+0xe8>)
 80097ea:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80097ec:	4b2a      	ldr	r3, [pc, #168]	@ (8009898 <MX_TIM5_Init+0xe4>)
 80097ee:	2200      	movs	r2, #0
 80097f0:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80097f2:	4b29      	ldr	r3, [pc, #164]	@ (8009898 <MX_TIM5_Init+0xe4>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 0;
 80097f8:	4b27      	ldr	r3, [pc, #156]	@ (8009898 <MX_TIM5_Init+0xe4>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80097fe:	4b26      	ldr	r3, [pc, #152]	@ (8009898 <MX_TIM5_Init+0xe4>)
 8009800:	2200      	movs	r2, #0
 8009802:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009804:	4b24      	ldr	r3, [pc, #144]	@ (8009898 <MX_TIM5_Init+0xe4>)
 8009806:	2200      	movs	r2, #0
 8009808:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800980a:	4823      	ldr	r0, [pc, #140]	@ (8009898 <MX_TIM5_Init+0xe4>)
 800980c:	f7fd fefb 	bl	8007606 <HAL_TIM_Base_Init>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <MX_TIM5_Init+0x66>
	{
		Error_Handler();
 8009816:	f000 fcb1 	bl	800a17c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800981a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800981e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8009820:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009824:	4619      	mov	r1, r3
 8009826:	481c      	ldr	r0, [pc, #112]	@ (8009898 <MX_TIM5_Init+0xe4>)
 8009828:	f7fd ff5e 	bl	80076e8 <HAL_TIM_ConfigClockSource>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <MX_TIM5_Init+0x82>
	{
		Error_Handler();
 8009832:	f000 fca3 	bl	800a17c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8009836:	4818      	ldr	r0, [pc, #96]	@ (8009898 <MX_TIM5_Init+0xe4>)
 8009838:	f7fd ff2b 	bl	8007692 <HAL_TIM_PWM_Init>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <MX_TIM5_Init+0x92>
	{
		Error_Handler();
 8009842:	f000 fc9b 	bl	800a17c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009846:	2300      	movs	r3, #0
 8009848:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800984a:	2300      	movs	r3, #0
 800984c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800984e:	f107 031c 	add.w	r3, r7, #28
 8009852:	4619      	mov	r1, r3
 8009854:	4810      	ldr	r0, [pc, #64]	@ (8009898 <MX_TIM5_Init+0xe4>)
 8009856:	f7fe fb5d 	bl	8007f14 <HAL_TIMEx_MasterConfigSynchronization>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <MX_TIM5_Init+0xb0>
	{
		Error_Handler();
 8009860:	f000 fc8c 	bl	800a17c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009864:	2360      	movs	r3, #96	@ 0x60
 8009866:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8009868:	2300      	movs	r3, #0
 800986a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800986c:	2300      	movs	r3, #0
 800986e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009870:	2300      	movs	r3, #0
 8009872:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009874:	463b      	mov	r3, r7
 8009876:	220c      	movs	r2, #12
 8009878:	4619      	mov	r1, r3
 800987a:	4807      	ldr	r0, [pc, #28]	@ (8009898 <MX_TIM5_Init+0xe4>)
 800987c:	f7fe fb9e 	bl	8007fbc <HAL_TIM_PWM_ConfigChannel>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <MX_TIM5_Init+0xd6>
	{
		Error_Handler();
 8009886:	f000 fc79 	bl	800a17c <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim5);
 800988a:	4803      	ldr	r0, [pc, #12]	@ (8009898 <MX_TIM5_Init+0xe4>)
 800988c:	f000 ff08 	bl	800a6a0 <HAL_TIM_MspPostInit>

}
 8009890:	bf00      	nop
 8009892:	3738      	adds	r7, #56	@ 0x38
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	200044a4 	.word	0x200044a4
 800989c:	40000c00 	.word	0x40000c00

080098a0 <MX_TIM8_Init>:


void MX_TIM8_Init(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80098a6:	f107 0310 	add.w	r3, r7, #16
 80098aa:	2200      	movs	r2, #0
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	605a      	str	r2, [r3, #4]
 80098b0:	609a      	str	r2, [r3, #8]
 80098b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80098b4:	1d3b      	adds	r3, r7, #4
 80098b6:	2200      	movs	r2, #0
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	605a      	str	r2, [r3, #4]
 80098bc:	609a      	str	r2, [r3, #8]

	htim8.Instance = TIM8;
 80098be:	4b1f      	ldr	r3, [pc, #124]	@ (800993c <MX_TIM8_Init+0x9c>)
 80098c0:	4a1f      	ldr	r2, [pc, #124]	@ (8009940 <MX_TIM8_Init+0xa0>)
 80098c2:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80098c4:	4b1d      	ldr	r3, [pc, #116]	@ (800993c <MX_TIM8_Init+0x9c>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80098ca:	4b1c      	ldr	r3, [pc, #112]	@ (800993c <MX_TIM8_Init+0x9c>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 0;
 80098d0:	4b1a      	ldr	r3, [pc, #104]	@ (800993c <MX_TIM8_Init+0x9c>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80098d6:	4b19      	ldr	r3, [pc, #100]	@ (800993c <MX_TIM8_Init+0x9c>)
 80098d8:	2200      	movs	r2, #0
 80098da:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80098dc:	4b17      	ldr	r3, [pc, #92]	@ (800993c <MX_TIM8_Init+0x9c>)
 80098de:	2200      	movs	r2, #0
 80098e0:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80098e2:	4b16      	ldr	r3, [pc, #88]	@ (800993c <MX_TIM8_Init+0x9c>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80098e8:	4814      	ldr	r0, [pc, #80]	@ (800993c <MX_TIM8_Init+0x9c>)
 80098ea:	f7fd fe8c 	bl	8007606 <HAL_TIM_Base_Init>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <MX_TIM8_Init+0x58>
	{
		Error_Handler();
 80098f4:	f000 fc42 	bl	800a17c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80098f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80098fc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80098fe:	f107 0310 	add.w	r3, r7, #16
 8009902:	4619      	mov	r1, r3
 8009904:	480d      	ldr	r0, [pc, #52]	@ (800993c <MX_TIM8_Init+0x9c>)
 8009906:	f7fd feef 	bl	80076e8 <HAL_TIM_ConfigClockSource>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <MX_TIM8_Init+0x74>
	{
		Error_Handler();
 8009910:	f000 fc34 	bl	800a17c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009914:	2300      	movs	r3, #0
 8009916:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009918:	2300      	movs	r3, #0
 800991a:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800991c:	2300      	movs	r3, #0
 800991e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009920:	1d3b      	adds	r3, r7, #4
 8009922:	4619      	mov	r1, r3
 8009924:	4805      	ldr	r0, [pc, #20]	@ (800993c <MX_TIM8_Init+0x9c>)
 8009926:	f7fe faf5 	bl	8007f14 <HAL_TIMEx_MasterConfigSynchronization>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <MX_TIM8_Init+0x94>
	{
		Error_Handler();
 8009930:	f000 fc24 	bl	800a17c <Error_Handler>
	}

}
 8009934:	bf00      	nop
 8009936:	3720      	adds	r7, #32
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	200044e4 	.word	0x200044e4
 8009940:	40010400 	.word	0x40010400

08009944 <MX_TIM12_Init>:


void MX_TIM12_Init(void)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b088      	sub	sp, #32
 8009948:	af00      	add	r7, sp, #0

	TIM_OC_InitTypeDef sConfigOC = {0};
 800994a:	1d3b      	adds	r3, r7, #4
 800994c:	2200      	movs	r2, #0
 800994e:	601a      	str	r2, [r3, #0]
 8009950:	605a      	str	r2, [r3, #4]
 8009952:	609a      	str	r2, [r3, #8]
 8009954:	60da      	str	r2, [r3, #12]
 8009956:	611a      	str	r2, [r3, #16]
 8009958:	615a      	str	r2, [r3, #20]
 800995a:	619a      	str	r2, [r3, #24]

	htim12.Instance = TIM12;
 800995c:	4b19      	ldr	r3, [pc, #100]	@ (80099c4 <MX_TIM12_Init+0x80>)
 800995e:	4a1a      	ldr	r2, [pc, #104]	@ (80099c8 <MX_TIM12_Init+0x84>)
 8009960:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8009962:	4b18      	ldr	r3, [pc, #96]	@ (80099c4 <MX_TIM12_Init+0x80>)
 8009964:	2200      	movs	r2, #0
 8009966:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009968:	4b16      	ldr	r3, [pc, #88]	@ (80099c4 <MX_TIM12_Init+0x80>)
 800996a:	2200      	movs	r2, #0
 800996c:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 0;
 800996e:	4b15      	ldr	r3, [pc, #84]	@ (80099c4 <MX_TIM12_Init+0x80>)
 8009970:	2200      	movs	r2, #0
 8009972:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009974:	4b13      	ldr	r3, [pc, #76]	@ (80099c4 <MX_TIM12_Init+0x80>)
 8009976:	2200      	movs	r2, #0
 8009978:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800997a:	4b12      	ldr	r3, [pc, #72]	@ (80099c4 <MX_TIM12_Init+0x80>)
 800997c:	2200      	movs	r2, #0
 800997e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8009980:	4810      	ldr	r0, [pc, #64]	@ (80099c4 <MX_TIM12_Init+0x80>)
 8009982:	f7fd fe86 	bl	8007692 <HAL_TIM_PWM_Init>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d001      	beq.n	8009990 <MX_TIM12_Init+0x4c>
	{
		Error_Handler();
 800998c:	f000 fbf6 	bl	800a17c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009990:	2360      	movs	r3, #96	@ 0x60
 8009992:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8009994:	2300      	movs	r3, #0
 8009996:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009998:	2300      	movs	r3, #0
 800999a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800999c:	2300      	movs	r3, #0
 800999e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80099a0:	1d3b      	adds	r3, r7, #4
 80099a2:	2200      	movs	r2, #0
 80099a4:	4619      	mov	r1, r3
 80099a6:	4807      	ldr	r0, [pc, #28]	@ (80099c4 <MX_TIM12_Init+0x80>)
 80099a8:	f7fe fb08 	bl	8007fbc <HAL_TIM_PWM_ConfigChannel>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <MX_TIM12_Init+0x72>
	{
		Error_Handler();
 80099b2:	f000 fbe3 	bl	800a17c <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim12);
 80099b6:	4803      	ldr	r0, [pc, #12]	@ (80099c4 <MX_TIM12_Init+0x80>)
 80099b8:	f000 fe72 	bl	800a6a0 <HAL_TIM_MspPostInit>

}
 80099bc:	bf00      	nop
 80099be:	3720      	adds	r7, #32
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	20004524 	.word	0x20004524
 80099c8:	40001800 	.word	0x40001800

080099cc <MX_USART1_UART_Init>:


void MX_USART1_UART_Init(void)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 80099d0:	4b14      	ldr	r3, [pc, #80]	@ (8009a24 <MX_USART1_UART_Init+0x58>)
 80099d2:	4a15      	ldr	r2, [pc, #84]	@ (8009a28 <MX_USART1_UART_Init+0x5c>)
 80099d4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80099d6:	4b13      	ldr	r3, [pc, #76]	@ (8009a24 <MX_USART1_UART_Init+0x58>)
 80099d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80099dc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80099de:	4b11      	ldr	r3, [pc, #68]	@ (8009a24 <MX_USART1_UART_Init+0x58>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80099e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009a24 <MX_USART1_UART_Init+0x58>)
 80099e6:	2200      	movs	r2, #0
 80099e8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80099ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009a24 <MX_USART1_UART_Init+0x58>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80099f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009a24 <MX_USART1_UART_Init+0x58>)
 80099f2:	220c      	movs	r2, #12
 80099f4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80099f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009a24 <MX_USART1_UART_Init+0x58>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80099fc:	4b09      	ldr	r3, [pc, #36]	@ (8009a24 <MX_USART1_UART_Init+0x58>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009a02:	4b08      	ldr	r3, [pc, #32]	@ (8009a24 <MX_USART1_UART_Init+0x58>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009a08:	4b06      	ldr	r3, [pc, #24]	@ (8009a24 <MX_USART1_UART_Init+0x58>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8009a0e:	4805      	ldr	r0, [pc, #20]	@ (8009a24 <MX_USART1_UART_Init+0x58>)
 8009a10:	f7fe fc9e 	bl	8008350 <HAL_UART_Init>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8009a1a:	f000 fbaf 	bl	800a17c <Error_Handler>
	}


}
 8009a1e:	bf00      	nop
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20004564 	.word	0x20004564
 8009a28:	40011000 	.word	0x40011000

08009a2c <MX_USART6_UART_Init>:


void MX_USART6_UART_Init(void)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	af00      	add	r7, sp, #0

	huart6.Instance = USART6;
 8009a30:	4b14      	ldr	r3, [pc, #80]	@ (8009a84 <MX_USART6_UART_Init+0x58>)
 8009a32:	4a15      	ldr	r2, [pc, #84]	@ (8009a88 <MX_USART6_UART_Init+0x5c>)
 8009a34:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8009a36:	4b13      	ldr	r3, [pc, #76]	@ (8009a84 <MX_USART6_UART_Init+0x58>)
 8009a38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009a3c:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8009a3e:	4b11      	ldr	r3, [pc, #68]	@ (8009a84 <MX_USART6_UART_Init+0x58>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8009a44:	4b0f      	ldr	r3, [pc, #60]	@ (8009a84 <MX_USART6_UART_Init+0x58>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8009a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8009a84 <MX_USART6_UART_Init+0x58>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8009a50:	4b0c      	ldr	r3, [pc, #48]	@ (8009a84 <MX_USART6_UART_Init+0x58>)
 8009a52:	220c      	movs	r2, #12
 8009a54:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009a56:	4b0b      	ldr	r3, [pc, #44]	@ (8009a84 <MX_USART6_UART_Init+0x58>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8009a5c:	4b09      	ldr	r3, [pc, #36]	@ (8009a84 <MX_USART6_UART_Init+0x58>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009a62:	4b08      	ldr	r3, [pc, #32]	@ (8009a84 <MX_USART6_UART_Init+0x58>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009a68:	4b06      	ldr	r3, [pc, #24]	@ (8009a84 <MX_USART6_UART_Init+0x58>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8009a6e:	4805      	ldr	r0, [pc, #20]	@ (8009a84 <MX_USART6_UART_Init+0x58>)
 8009a70:	f7fe fc6e 	bl	8008350 <HAL_UART_Init>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 8009a7a:	f000 fb7f 	bl	800a17c <Error_Handler>
	}


}
 8009a7e:	bf00      	nop
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	200045d4 	.word	0x200045d4
 8009a88:	40011400 	.word	0x40011400

08009a8c <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b088      	sub	sp, #32
 8009a90:	af00      	add	r7, sp, #0
	FMC_SDRAM_TimingTypeDef SdramTiming;

	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8009a92:	4b20      	ldr	r3, [pc, #128]	@ (8009b14 <MX_FMC_Init+0x88>)
 8009a94:	4a20      	ldr	r2, [pc, #128]	@ (8009b18 <MX_FMC_Init+0x8c>)
 8009a96:	601a      	str	r2, [r3, #0]

	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8009a98:	4b1e      	ldr	r3, [pc, #120]	@ (8009b14 <MX_FMC_Init+0x88>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8009a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8009b14 <MX_FMC_Init+0x88>)
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8009aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8009b14 <MX_FMC_Init+0x88>)
 8009aa6:	2204      	movs	r2, #4
 8009aa8:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8009aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8009b14 <MX_FMC_Init+0x88>)
 8009aac:	2210      	movs	r2, #16
 8009aae:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8009ab0:	4b18      	ldr	r3, [pc, #96]	@ (8009b14 <MX_FMC_Init+0x88>)
 8009ab2:	2240      	movs	r2, #64	@ 0x40
 8009ab4:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8009ab6:	4b17      	ldr	r3, [pc, #92]	@ (8009b14 <MX_FMC_Init+0x88>)
 8009ab8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8009abc:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8009abe:	4b15      	ldr	r3, [pc, #84]	@ (8009b14 <MX_FMC_Init+0x88>)
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8009ac4:	4b13      	ldr	r3, [pc, #76]	@ (8009b14 <MX_FMC_Init+0x88>)
 8009ac6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009aca:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8009acc:	4b11      	ldr	r3, [pc, #68]	@ (8009b14 <MX_FMC_Init+0x88>)
 8009ace:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009ad2:	625a      	str	r2, [r3, #36]	@ 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8009ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8009b14 <MX_FMC_Init+0x88>)
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8009ada:	2302      	movs	r3, #2
 8009adc:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8009ade:	2307      	movs	r3, #7
 8009ae0:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8009ae2:	2304      	movs	r3, #4
 8009ae4:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8009ae6:	2307      	movs	r3, #7
 8009ae8:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8009aea:	2303      	movs	r3, #3
 8009aec:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8009aee:	2302      	movs	r3, #2
 8009af0:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8009af2:	2302      	movs	r3, #2
 8009af4:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8009af6:	1d3b      	adds	r3, r7, #4
 8009af8:	4619      	mov	r1, r3
 8009afa:	4806      	ldr	r0, [pc, #24]	@ (8009b14 <MX_FMC_Init+0x88>)
 8009afc:	f7fd fd04 	bl	8007508 <HAL_SDRAM_Init>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d001      	beq.n	8009b0a <MX_FMC_Init+0x7e>
	{
		Error_Handler( );
 8009b06:	f000 fb39 	bl	800a17c <Error_Handler>
	}

}
 8009b0a:	bf00      	nop
 8009b0c:	3720      	adds	r7, #32
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20004644 	.word	0x20004644
 8009b18:	a0000140 	.word	0xa0000140

08009b1c <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b090      	sub	sp, #64	@ 0x40
 8009b20:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009b26:	2200      	movs	r2, #0
 8009b28:	601a      	str	r2, [r3, #0]
 8009b2a:	605a      	str	r2, [r3, #4]
 8009b2c:	609a      	str	r2, [r3, #8]
 8009b2e:	60da      	str	r2, [r3, #12]
 8009b30:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8009b32:	4bae      	ldr	r3, [pc, #696]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b36:	4aad      	ldr	r2, [pc, #692]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009b38:	f043 0310 	orr.w	r3, r3, #16
 8009b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b3e:	4bab      	ldr	r3, [pc, #684]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b42:	f003 0310 	and.w	r3, r3, #16
 8009b46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8009b4a:	4ba8      	ldr	r3, [pc, #672]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b4e:	4aa7      	ldr	r2, [pc, #668]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b56:	4ba5      	ldr	r3, [pc, #660]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009b62:	4ba2      	ldr	r3, [pc, #648]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b66:	4aa1      	ldr	r2, [pc, #644]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009b68:	f043 0302 	orr.w	r3, r3, #2
 8009b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b6e:	4b9f      	ldr	r3, [pc, #636]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b72:	f003 0302 	and.w	r3, r3, #2
 8009b76:	623b      	str	r3, [r7, #32]
 8009b78:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8009b7a:	4b9c      	ldr	r3, [pc, #624]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b7e:	4a9b      	ldr	r2, [pc, #620]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009b80:	f043 0308 	orr.w	r3, r3, #8
 8009b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b86:	4b99      	ldr	r3, [pc, #612]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8a:	f003 0308 	and.w	r3, r3, #8
 8009b8e:	61fb      	str	r3, [r7, #28]
 8009b90:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8009b92:	4b96      	ldr	r3, [pc, #600]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b96:	4a95      	ldr	r2, [pc, #596]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009b98:	f043 0304 	orr.w	r3, r3, #4
 8009b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b9e:	4b93      	ldr	r3, [pc, #588]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba2:	f003 0304 	and.w	r3, r3, #4
 8009ba6:	61bb      	str	r3, [r7, #24]
 8009ba8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8009baa:	4b90      	ldr	r3, [pc, #576]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bae:	4a8f      	ldr	r2, [pc, #572]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009bb0:	f043 0301 	orr.w	r3, r3, #1
 8009bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bb6:	4b8d      	ldr	r3, [pc, #564]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bba:	f003 0301 	and.w	r3, r3, #1
 8009bbe:	617b      	str	r3, [r7, #20]
 8009bc0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8009bc2:	4b8a      	ldr	r3, [pc, #552]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc6:	4a89      	ldr	r2, [pc, #548]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009bc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bce:	4b87      	ldr	r3, [pc, #540]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bd6:	613b      	str	r3, [r7, #16]
 8009bd8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8009bda:	4b84      	ldr	r3, [pc, #528]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bde:	4a83      	ldr	r2, [pc, #524]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009be6:	4b81      	ldr	r3, [pc, #516]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bee:	60fb      	str	r3, [r7, #12]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8009bf2:	4b7e      	ldr	r3, [pc, #504]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf6:	4a7d      	ldr	r2, [pc, #500]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009bf8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bfe:	4b7b      	ldr	r3, [pc, #492]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c06:	60bb      	str	r3, [r7, #8]
 8009c08:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8009c0a:	4b78      	ldr	r3, [pc, #480]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c0e:	4a77      	ldr	r2, [pc, #476]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009c10:	f043 0320 	orr.w	r3, r3, #32
 8009c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8009c16:	4b75      	ldr	r3, [pc, #468]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c1a:	f003 0320 	and.w	r3, r3, #32
 8009c1e:	607b      	str	r3, [r7, #4]
 8009c20:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8009c22:	4b72      	ldr	r3, [pc, #456]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c26:	4a71      	ldr	r2, [pc, #452]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009c2e:	4b6f      	ldr	r3, [pc, #444]	@ (8009dec <MX_GPIO_Init+0x2d0>)
 8009c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c36:	603b      	str	r3, [r7, #0]
 8009c38:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	2120      	movs	r1, #32
 8009c3e:	486c      	ldr	r0, [pc, #432]	@ (8009df0 <MX_GPIO_Init+0x2d4>)
 8009c40:	f7fa fe30 	bl	80048a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 8009c44:	2200      	movs	r2, #0
 8009c46:	210e      	movs	r1, #14
 8009c48:	486a      	ldr	r0, [pc, #424]	@ (8009df4 <MX_GPIO_Init+0x2d8>)
 8009c4a:	f7fa fe2b 	bl	80048a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8009c4e:	2201      	movs	r2, #1
 8009c50:	2108      	movs	r1, #8
 8009c52:	4869      	ldr	r0, [pc, #420]	@ (8009df8 <MX_GPIO_Init+0x2dc>)
 8009c54:	f7fa fe26 	bl	80048a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009c5e:	4865      	ldr	r0, [pc, #404]	@ (8009df4 <MX_GPIO_Init+0x2d8>)
 8009c60:	f7fa fe20 	bl	80048a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8009c64:	2200      	movs	r2, #0
 8009c66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009c6a:	4864      	ldr	r0, [pc, #400]	@ (8009dfc <MX_GPIO_Init+0x2e0>)
 8009c6c:	f7fa fe1a 	bl	80048a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8009c70:	2200      	movs	r2, #0
 8009c72:	21c8      	movs	r1, #200	@ 0xc8
 8009c74:	4862      	ldr	r0, [pc, #392]	@ (8009e00 <MX_GPIO_Init+0x2e4>)
 8009c76:	f7fa fe15 	bl	80048a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8009c7a:	2308      	movs	r3, #8
 8009c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c82:	2300      	movs	r3, #0
 8009c84:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8009c86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	485d      	ldr	r0, [pc, #372]	@ (8009e04 <MX_GPIO_Init+0x2e8>)
 8009c8e:	f7fa fb51 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8009c92:	2304      	movs	r3, #4
 8009c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c96:	2302      	movs	r3, #2
 8009c98:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8009ca2:	2309      	movs	r3, #9
 8009ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8009ca6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009caa:	4619      	mov	r1, r3
 8009cac:	4855      	ldr	r0, [pc, #340]	@ (8009e04 <MX_GPIO_Init+0x2e8>)
 8009cae:	f7fa fb41 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8009cb2:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8009cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cb8:	2302      	movs	r3, #2
 8009cba:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009cc4:	230b      	movs	r3, #11
 8009cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009cc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009ccc:	4619      	mov	r1, r3
 8009cce:	484c      	ldr	r0, [pc, #304]	@ (8009e00 <MX_GPIO_Init+0x2e4>)
 8009cd0:	f7fa fb30 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8009cd4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009cda:	2312      	movs	r3, #18
 8009cdc:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009ce6:	2304      	movs	r3, #4
 8009ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009cea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009cee:	4619      	mov	r1, r3
 8009cf0:	4845      	ldr	r0, [pc, #276]	@ (8009e08 <MX_GPIO_Init+0x2ec>)
 8009cf2:	f7fa fb1f 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8009cf6:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8009cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d00:	2300      	movs	r3, #0
 8009d02:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d04:	2303      	movs	r3, #3
 8009d06:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8009d08:	230a      	movs	r3, #10
 8009d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009d10:	4619      	mov	r1, r3
 8009d12:	483d      	ldr	r0, [pc, #244]	@ (8009e08 <MX_GPIO_Init+0x2ec>)
 8009d14:	f7fa fb0e 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8009d18:	2380      	movs	r3, #128	@ 0x80
 8009d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d20:	2300      	movs	r3, #0
 8009d22:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d24:	2300      	movs	r3, #0
 8009d26:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8009d28:	2308      	movs	r3, #8
 8009d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8009d2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009d30:	4619      	mov	r1, r3
 8009d32:	482f      	ldr	r0, [pc, #188]	@ (8009df0 <MX_GPIO_Init+0x2d4>)
 8009d34:	f7fa fafe 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8009d38:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8009d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d3e:	2302      	movs	r3, #2
 8009d40:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d42:	2300      	movs	r3, #0
 8009d44:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d46:	2303      	movs	r3, #3
 8009d48:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8009d4a:	230c      	movs	r3, #12
 8009d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009d52:	4619      	mov	r1, r3
 8009d54:	482d      	ldr	r0, [pc, #180]	@ (8009e0c <MX_GPIO_Init+0x2f0>)
 8009d56:	f7fa faed 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8009d5a:	2360      	movs	r3, #96	@ 0x60
 8009d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d5e:	2302      	movs	r3, #2
 8009d60:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d62:	2300      	movs	r3, #0
 8009d64:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d66:	2300      	movs	r3, #0
 8009d68:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009d6a:	230d      	movs	r3, #13
 8009d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009d6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009d72:	4619      	mov	r1, r3
 8009d74:	4823      	ldr	r0, [pc, #140]	@ (8009e04 <MX_GPIO_Init+0x2e8>)
 8009d76:	f7fa fadd 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8009d7a:	2340      	movs	r3, #64	@ 0x40
 8009d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d7e:	2302      	movs	r3, #2
 8009d80:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d82:	2300      	movs	r3, #0
 8009d84:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d86:	2303      	movs	r3, #3
 8009d88:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8009d8a:	230a      	movs	r3, #10
 8009d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8009d8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009d92:	4619      	mov	r1, r3
 8009d94:	481c      	ldr	r0, [pc, #112]	@ (8009e08 <MX_GPIO_Init+0x2ec>)
 8009d96:	f7fa facd 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8009d9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009da0:	2300      	movs	r3, #0
 8009da2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009da4:	2300      	movs	r3, #0
 8009da6:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009da8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009dac:	4619      	mov	r1, r3
 8009dae:	4818      	ldr	r0, [pc, #96]	@ (8009e10 <MX_GPIO_Init+0x2f4>)
 8009db0:	f7fa fac0 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8009db4:	2340      	movs	r3, #64	@ 0x40
 8009db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8009db8:	4b16      	ldr	r3, [pc, #88]	@ (8009e14 <MX_GPIO_Init+0x2f8>)
 8009dba:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8009dc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	480a      	ldr	r0, [pc, #40]	@ (8009df0 <MX_GPIO_Init+0x2d4>)
 8009dc8:	f7fa fab4 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8009dcc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009dde:	230a      	movs	r3, #10
 8009de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009de2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009de6:	4619      	mov	r1, r3
 8009de8:	e016      	b.n	8009e18 <MX_GPIO_Init+0x2fc>
 8009dea:	bf00      	nop
 8009dec:	40023800 	.word	0x40023800
 8009df0:	40020c00 	.word	0x40020c00
 8009df4:	40022000 	.word	0x40022000
 8009df8:	40022800 	.word	0x40022800
 8009dfc:	40021c00 	.word	0x40021c00
 8009e00:	40021800 	.word	0x40021800
 8009e04:	40021000 	.word	0x40021000
 8009e08:	40020400 	.word	0x40020400
 8009e0c:	40020800 	.word	0x40020800
 8009e10:	40022400 	.word	0x40022400
 8009e14:	10120000 	.word	0x10120000
 8009e18:	48bb      	ldr	r0, [pc, #748]	@ (800a108 <MX_GPIO_Init+0x5ec>)
 8009e1a:	f7fa fa8b 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8009e1e:	2320      	movs	r3, #32
 8009e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e22:	2301      	movs	r3, #1
 8009e24:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e26:	2300      	movs	r3, #0
 8009e28:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8009e2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009e32:	4619      	mov	r1, r3
 8009e34:	48b5      	ldr	r0, [pc, #724]	@ (800a10c <MX_GPIO_Init+0x5f0>)
 8009e36:	f7fa fa7d 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8009e3a:	2308      	movs	r3, #8
 8009e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e3e:	2302      	movs	r3, #2
 8009e40:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e42:	2300      	movs	r3, #0
 8009e44:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e46:	2300      	movs	r3, #0
 8009e48:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009e4a:	230d      	movs	r3, #13
 8009e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8009e4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009e52:	4619      	mov	r1, r3
 8009e54:	48ad      	ldr	r0, [pc, #692]	@ (800a10c <MX_GPIO_Init+0x5f0>)
 8009e56:	f7fa fa6d 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8009e5a:	f241 030e 	movw	r3, #4110	@ 0x100e
 8009e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e60:	2301      	movs	r3, #1
 8009e62:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e64:	2300      	movs	r3, #0
 8009e66:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009e6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009e70:	4619      	mov	r1, r3
 8009e72:	48a7      	ldr	r0, [pc, #668]	@ (800a110 <MX_GPIO_Init+0x5f4>)
 8009e74:	f7fa fa5e 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8009e78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e82:	2300      	movs	r3, #0
 8009e84:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8009e86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	48a1      	ldr	r0, [pc, #644]	@ (800a114 <MX_GPIO_Init+0x5f8>)
 8009e8e:	f7fa fa51 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8009e92:	2308      	movs	r3, #8
 8009e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e96:	2301      	movs	r3, #1
 8009e98:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8009ea2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	489b      	ldr	r0, [pc, #620]	@ (800a118 <MX_GPIO_Init+0x5fc>)
 8009eaa:	f7fa fa43 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8009eae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009ec0:	230d      	movs	r3, #13
 8009ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8009ec4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009ec8:	4619      	mov	r1, r3
 8009eca:	4894      	ldr	r0, [pc, #592]	@ (800a11c <MX_GPIO_Init+0x600>)
 8009ecc:	f7fa fa32 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8009ed0:	2310      	movs	r3, #16
 8009ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8009edc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	488a      	ldr	r0, [pc, #552]	@ (800a10c <MX_GPIO_Init+0x5f0>)
 8009ee4:	f7fa fa26 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDMMC_CMD_Pin */
	GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8009ee8:	2304      	movs	r3, #4
 8009eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eec:	2302      	movs	r3, #2
 8009eee:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8009ef8:	230c      	movs	r3, #12
 8009efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8009efc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009f00:	4619      	mov	r1, r3
 8009f02:	4882      	ldr	r0, [pc, #520]	@ (800a10c <MX_GPIO_Init+0x5f0>)
 8009f04:	f7fa fa16 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8009f08:	f248 0304 	movw	r3, #32772	@ 0x8004
 8009f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009f16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	4880      	ldr	r0, [pc, #512]	@ (800a120 <MX_GPIO_Init+0x604>)
 8009f1e:	f7fa fa09 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8009f22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f30:	2300      	movs	r3, #0
 8009f32:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8009f34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009f38:	4619      	mov	r1, r3
 8009f3a:	4879      	ldr	r0, [pc, #484]	@ (800a120 <MX_GPIO_Init+0x604>)
 8009f3c:	f7fa f9fa 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8009f40:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8009f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
			|DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f46:	2302      	movs	r3, #2
 8009f48:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009f52:	230d      	movs	r3, #13
 8009f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009f56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	4870      	ldr	r0, [pc, #448]	@ (800a120 <MX_GPIO_Init+0x604>)
 8009f5e:	f7fa f9e9 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8009f62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8009f68:	4b6e      	ldr	r3, [pc, #440]	@ (800a124 <MX_GPIO_Init+0x608>)
 8009f6a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8009f70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009f74:	4619      	mov	r1, r3
 8009f76:	4866      	ldr	r0, [pc, #408]	@ (800a110 <MX_GPIO_Init+0x5f4>)
 8009f78:	f7fa f9dc 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8009f7c:	2310      	movs	r3, #16
 8009f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f80:	2302      	movs	r3, #2
 8009f82:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f84:	2300      	movs	r3, #0
 8009f86:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8009f8c:	230a      	movs	r3, #10
 8009f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8009f90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009f94:	4619      	mov	r1, r3
 8009f96:	4862      	ldr	r0, [pc, #392]	@ (800a120 <MX_GPIO_Init+0x604>)
 8009f98:	f7fa f9cc 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8009f9c:	23c8      	movs	r3, #200	@ 0xc8
 8009f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009fac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	485a      	ldr	r0, [pc, #360]	@ (800a11c <MX_GPIO_Init+0x600>)
 8009fb4:	f7fa f9be 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8009fb8:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8009fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			|ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009fca:	4619      	mov	r1, r3
 8009fcc:	4856      	ldr	r0, [pc, #344]	@ (800a128 <MX_GPIO_Init+0x60c>)
 8009fce:	f7fa f9b1 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8009fd2:	2305      	movs	r3, #5
 8009fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fd6:	2302      	movs	r3, #2
 8009fd8:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8009fe2:	230a      	movs	r3, #10
 8009fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009fe6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009fea:	4619      	mov	r1, r3
 8009fec:	4849      	ldr	r0, [pc, #292]	@ (800a114 <MX_GPIO_Init+0x5f8>)
 8009fee:	f7fa f9a1 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8009ff2:	2332      	movs	r3, #50	@ 0x32
 8009ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ffe:	2303      	movs	r3, #3
 800a000:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a002:	230b      	movs	r3, #11
 800a004:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a006:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a00a:	4619      	mov	r1, r3
 800a00c:	4841      	ldr	r0, [pc, #260]	@ (800a114 <MX_GPIO_Init+0x5f8>)
 800a00e:	f7fa f991 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a012:	2304      	movs	r3, #4
 800a014:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a016:	2302      	movs	r3, #2
 800a018:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a01a:	2300      	movs	r3, #0
 800a01c:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a01e:	2303      	movs	r3, #3
 800a020:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800a022:	2309      	movs	r3, #9
 800a024:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a026:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a02a:	4619      	mov	r1, r3
 800a02c:	483f      	ldr	r0, [pc, #252]	@ (800a12c <MX_GPIO_Init+0x610>)
 800a02e:	f7fa f981 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800a032:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800a036:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a038:	2302      	movs	r3, #2
 800a03a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a03c:	2300      	movs	r3, #0
 800a03e:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a040:	2303      	movs	r3, #3
 800a042:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800a044:	2309      	movs	r3, #9
 800a046:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a048:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a04c:	4619      	mov	r1, r3
 800a04e:	482f      	ldr	r0, [pc, #188]	@ (800a10c <MX_GPIO_Init+0x5f0>)
 800a050:	f7fa f970 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800a054:	2304      	movs	r3, #4
 800a056:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a058:	2300      	movs	r3, #0
 800a05a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a05c:	2300      	movs	r3, #0
 800a05e:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800a060:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a064:	4619      	mov	r1, r3
 800a066:	482d      	ldr	r0, [pc, #180]	@ (800a11c <MX_GPIO_Init+0x600>)
 800a068:	f7fa f964 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a06c:	2386      	movs	r3, #134	@ 0x86
 800a06e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a070:	2302      	movs	r3, #2
 800a072:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a074:	2300      	movs	r3, #0
 800a076:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a078:	2303      	movs	r3, #3
 800a07a:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a07c:	230b      	movs	r3, #11
 800a07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a080:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a084:	4619      	mov	r1, r3
 800a086:	4820      	ldr	r0, [pc, #128]	@ (800a108 <MX_GPIO_Init+0x5ec>)
 800a088:	f7fa f954 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_A0_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800a08c:	2301      	movs	r3, #1
 800a08e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a090:	2303      	movs	r3, #3
 800a092:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a094:	2300      	movs	r3, #0
 800a096:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800a098:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a09c:	4619      	mov	r1, r3
 800a09e:	481a      	ldr	r0, [pc, #104]	@ (800a108 <MX_GPIO_Init+0x5ec>)
 800a0a0:	f7fa f948 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800a0a4:	2350      	movs	r3, #80	@ 0x50
 800a0a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a0b4:	230d      	movs	r3, #13
 800a0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a0bc:	4619      	mov	r1, r3
 800a0be:	4812      	ldr	r0, [pc, #72]	@ (800a108 <MX_GPIO_Init+0x5ec>)
 800a0c0:	f7fa f938 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800a0c4:	2328      	movs	r3, #40	@ 0x28
 800a0c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a0d4:	230a      	movs	r3, #10
 800a0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a0dc:	4619      	mov	r1, r3
 800a0de:	480a      	ldr	r0, [pc, #40]	@ (800a108 <MX_GPIO_Init+0x5ec>)
 800a0e0:	f7fa f928 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800a0e4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800a0e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a0f6:	2305      	movs	r3, #5
 800a0f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a0fe:	4619      	mov	r1, r3
 800a100:	480a      	ldr	r0, [pc, #40]	@ (800a12c <MX_GPIO_Init+0x610>)
 800a102:	f7fa f917 	bl	8004334 <HAL_GPIO_Init>
 800a106:	e013      	b.n	800a130 <MX_GPIO_Init+0x614>
 800a108:	40020000 	.word	0x40020000
 800a10c:	40020c00 	.word	0x40020c00
 800a110:	40022000 	.word	0x40022000
 800a114:	40020800 	.word	0x40020800
 800a118:	40022800 	.word	0x40022800
 800a11c:	40021800 	.word	0x40021800
 800a120:	40021c00 	.word	0x40021c00
 800a124:	10120000 	.word	0x10120000
 800a128:	40021400 	.word	0x40021400
 800a12c:	40020400 	.word	0x40020400

}
 800a130:	bf00      	nop
 800a132:	3740      	adds	r7, #64	@ 0x40
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <initGpio>:

void initGpio(void){
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a13e:	1d3b      	adds	r3, r7, #4
 800a140:	2200      	movs	r2, #0
 800a142:	601a      	str	r2, [r3, #0]
 800a144:	605a      	str	r2, [r3, #4]
 800a146:	609a      	str	r2, [r3, #8]
 800a148:	60da      	str	r2, [r3, #12]
 800a14a:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800a14c:	2200      	movs	r2, #0
 800a14e:	2101      	movs	r1, #1
 800a150:	4809      	ldr	r0, [pc, #36]	@ (800a178 <initGpio+0x40>)
 800a152:	f7fa fba7 	bl	80048a4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a156:	2301      	movs	r3, #1
 800a158:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a15a:	2301      	movs	r3, #1
 800a15c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a15e:	2300      	movs	r3, #0
 800a160:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a162:	2303      	movs	r3, #3
 800a164:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a166:	1d3b      	adds	r3, r7, #4
 800a168:	4619      	mov	r1, r3
 800a16a:	4803      	ldr	r0, [pc, #12]	@ (800a178 <initGpio+0x40>)
 800a16c:	f7fa f8e2 	bl	8004334 <HAL_GPIO_Init>
}
 800a170:	bf00      	nop
 800a172:	3718      	adds	r7, #24
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	40020000 	.word	0x40020000

0800a17c <Error_Handler>:

void Error_Handler(void)
{
 800a17c:	b480      	push	{r7}
 800a17e:	af00      	add	r7, sp, #0
	while(1);
 800a180:	bf00      	nop
 800a182:	e7fd      	b.n	800a180 <Error_Handler+0x4>

0800a184 <wm8994Init>:
#include "stm32746g_discovery_audio.h"

extern AUDIO_DrvTypeDef  *audio_drv;

uint8_t wm8994Init(void){
 800a184:	b590      	push	{r4, r7, lr}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
	uint32_t deviceid = 0x00;
 800a18a:	2300      	movs	r3, #0
 800a18c:	607b      	str	r3, [r7, #4]

	deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800a18e:	4b11      	ldr	r3, [pc, #68]	@ (800a1d4 <wm8994Init+0x50>)
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	2034      	movs	r0, #52	@ 0x34
 800a194:	4798      	blx	r3
 800a196:	6078      	str	r0, [r7, #4]
	if((deviceid) == WM8994_ID){
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f648 1294 	movw	r2, #35220	@ 0x8994
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d112      	bne.n	800a1c8 <wm8994Init+0x44>
		wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800a1a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d4 <wm8994Init+0x50>)
 800a1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a6:	2034      	movs	r0, #52	@ 0x34
 800a1a8:	4798      	blx	r3
	 	audio_drv = &wm8994_drv;
 800a1aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a1d8 <wm8994Init+0x54>)
 800a1ac:	4a09      	ldr	r2, [pc, #36]	@ (800a1d4 <wm8994Init+0x50>)
 800a1ae:	601a      	str	r2, [r3, #0]
	 	//audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_DIGITAL_MICROPHONE_2 | OUTPUT_DEVICE_HEADPHONE, DEFAULT_VOLUME_MIDDLE, AUDIO_FREQUENCY_16K);
	 	  audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_DIGITAL_MICROPHONE_2 | OUTPUT_DEVICE_HEADPHONE, DEFAULT_VOLUME_MIDDLE, AUDIO_FREQUENCY_16K);
 800a1b0:	4b09      	ldr	r3, [pc, #36]	@ (800a1d8 <wm8994Init+0x54>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681c      	ldr	r4, [r3, #0]
 800a1b6:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 800a1ba:	2264      	movs	r2, #100	@ 0x64
 800a1bc:	f240 2102 	movw	r1, #514	@ 0x202
 800a1c0:	2034      	movs	r0, #52	@ 0x34
 800a1c2:	47a0      	blx	r4
	 	return AUDIO_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	e000      	b.n	800a1ca <wm8994Init+0x46>
	 }
	 else{
	 	return AUDIO_ERROR;
 800a1c8:	2301      	movs	r3, #1
	 }
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	370c      	adds	r7, #12
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd90      	pop	{r4, r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20000000 	.word	0x20000000
 800a1d8:	200000cc 	.word	0x200000cc

0800a1dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a1e2:	4b0f      	ldr	r3, [pc, #60]	@ (800a220 <HAL_MspInit+0x44>)
 800a1e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e6:	4a0e      	ldr	r2, [pc, #56]	@ (800a220 <HAL_MspInit+0x44>)
 800a1e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1ec:	6413      	str	r3, [r2, #64]	@ 0x40
 800a1ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a220 <HAL_MspInit+0x44>)
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1f6:	607b      	str	r3, [r7, #4]
 800a1f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1fa:	4b09      	ldr	r3, [pc, #36]	@ (800a220 <HAL_MspInit+0x44>)
 800a1fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1fe:	4a08      	ldr	r2, [pc, #32]	@ (800a220 <HAL_MspInit+0x44>)
 800a200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a204:	6453      	str	r3, [r2, #68]	@ 0x44
 800a206:	4b06      	ldr	r3, [pc, #24]	@ (800a220 <HAL_MspInit+0x44>)
 800a208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a20a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a20e:	603b      	str	r3, [r7, #0]
 800a210:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a212:	bf00      	nop
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	40023800 	.word	0x40023800

0800a224 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a0d      	ldr	r2, [pc, #52]	@ (800a268 <HAL_DMA2D_MspInit+0x44>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d113      	bne.n	800a25e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800a236:	4b0d      	ldr	r3, [pc, #52]	@ (800a26c <HAL_DMA2D_MspInit+0x48>)
 800a238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a23a:	4a0c      	ldr	r2, [pc, #48]	@ (800a26c <HAL_DMA2D_MspInit+0x48>)
 800a23c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a240:	6313      	str	r3, [r2, #48]	@ 0x30
 800a242:	4b0a      	ldr	r3, [pc, #40]	@ (800a26c <HAL_DMA2D_MspInit+0x48>)
 800a244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a246:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a24a:	60fb      	str	r3, [r7, #12]
 800a24c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800a24e:	2200      	movs	r2, #0
 800a250:	2105      	movs	r1, #5
 800a252:	205a      	movs	r0, #90	@ 0x5a
 800a254:	f7f9 facf 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800a258:	205a      	movs	r0, #90	@ 0x5a
 800a25a:	f7f9 fae8 	bl	800382e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800a25e:	bf00      	nop
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	4002b000 	.word	0x4002b000
 800a26c:	40023800 	.word	0x40023800

0800a270 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b08a      	sub	sp, #40	@ 0x28
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a278:	f107 0314 	add.w	r3, r7, #20
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	605a      	str	r2, [r3, #4]
 800a282:	609a      	str	r2, [r3, #8]
 800a284:	60da      	str	r2, [r3, #12]
 800a286:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a17      	ldr	r2, [pc, #92]	@ (800a2ec <HAL_I2C_MspInit+0x7c>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d128      	bne.n	800a2e4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a292:	4b17      	ldr	r3, [pc, #92]	@ (800a2f0 <HAL_I2C_MspInit+0x80>)
 800a294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a296:	4a16      	ldr	r2, [pc, #88]	@ (800a2f0 <HAL_I2C_MspInit+0x80>)
 800a298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a29c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a29e:	4b14      	ldr	r3, [pc, #80]	@ (800a2f0 <HAL_I2C_MspInit+0x80>)
 800a2a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2a6:	613b      	str	r3, [r7, #16]
 800a2a8:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800a2aa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800a2ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a2b0:	2312      	movs	r3, #18
 800a2b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800a2bc:	2304      	movs	r3, #4
 800a2be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a2c0:	f107 0314 	add.w	r3, r7, #20
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	480b      	ldr	r0, [pc, #44]	@ (800a2f4 <HAL_I2C_MspInit+0x84>)
 800a2c8:	f7fa f834 	bl	8004334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800a2cc:	4b08      	ldr	r3, [pc, #32]	@ (800a2f0 <HAL_I2C_MspInit+0x80>)
 800a2ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d0:	4a07      	ldr	r2, [pc, #28]	@ (800a2f0 <HAL_I2C_MspInit+0x80>)
 800a2d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a2d6:	6413      	str	r3, [r2, #64]	@ 0x40
 800a2d8:	4b05      	ldr	r3, [pc, #20]	@ (800a2f0 <HAL_I2C_MspInit+0x80>)
 800a2da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2e0:	60fb      	str	r3, [r7, #12]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800a2e4:	bf00      	nop
 800a2e6:	3728      	adds	r7, #40	@ 0x28
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	40005c00 	.word	0x40005c00
 800a2f0:	40023800 	.word	0x40023800
 800a2f4:	40021c00 	.word	0x40021c00

0800a2f8 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]

  if(hi2c->Instance==I2C3)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a08      	ldr	r2, [pc, #32]	@ (800a328 <HAL_I2C_MspDeInit+0x30>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d10a      	bne.n	800a320 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800a30a:	4b08      	ldr	r3, [pc, #32]	@ (800a32c <HAL_I2C_MspDeInit+0x34>)
 800a30c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a30e:	4a07      	ldr	r2, [pc, #28]	@ (800a32c <HAL_I2C_MspDeInit+0x34>)
 800a310:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a314:	6413      	str	r3, [r2, #64]	@ 0x40
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 800a316:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800a31a:	4805      	ldr	r0, [pc, #20]	@ (800a330 <HAL_I2C_MspDeInit+0x38>)
 800a31c:	f7fa f9b6 	bl	800468c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800a320:	bf00      	nop
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	40005c00 	.word	0x40005c00
 800a32c:	40023800 	.word	0x40023800
 800a330:	40021c00 	.word	0x40021c00

0800a334 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b08e      	sub	sp, #56	@ 0x38
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a33c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a340:	2200      	movs	r2, #0
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	605a      	str	r2, [r3, #4]
 800a346:	609a      	str	r2, [r3, #8]
 800a348:	60da      	str	r2, [r3, #12]
 800a34a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a55      	ldr	r2, [pc, #340]	@ (800a4a8 <HAL_LTDC_MspInit+0x174>)
 800a352:	4293      	cmp	r3, r2
 800a354:	f040 80a3 	bne.w	800a49e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800a358:	4b54      	ldr	r3, [pc, #336]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a35a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a35c:	4a53      	ldr	r2, [pc, #332]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a35e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a362:	6453      	str	r3, [r2, #68]	@ 0x44
 800a364:	4b51      	ldr	r3, [pc, #324]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a368:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a36c:	623b      	str	r3, [r7, #32]
 800a36e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a370:	4b4e      	ldr	r3, [pc, #312]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a374:	4a4d      	ldr	r2, [pc, #308]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a376:	f043 0310 	orr.w	r3, r3, #16
 800a37a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a37c:	4b4b      	ldr	r3, [pc, #300]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a37e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a380:	f003 0310 	and.w	r3, r3, #16
 800a384:	61fb      	str	r3, [r7, #28]
 800a386:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a388:	4b48      	ldr	r3, [pc, #288]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a38a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a38c:	4a47      	ldr	r2, [pc, #284]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a38e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a392:	6313      	str	r3, [r2, #48]	@ 0x30
 800a394:	4b45      	ldr	r3, [pc, #276]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a39c:	61bb      	str	r3, [r7, #24]
 800a39e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800a3a0:	4b42      	ldr	r3, [pc, #264]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a3a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3a4:	4a41      	ldr	r2, [pc, #260]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a3a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a3aa:	6313      	str	r3, [r2, #48]	@ 0x30
 800a3ac:	4b3f      	ldr	r3, [pc, #252]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a3ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3b4:	617b      	str	r3, [r7, #20]
 800a3b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a3b8:	4b3c      	ldr	r3, [pc, #240]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a3ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3bc:	4a3b      	ldr	r2, [pc, #236]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a3be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3c2:	6313      	str	r3, [r2, #48]	@ 0x30
 800a3c4:	4b39      	ldr	r3, [pc, #228]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a3c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3cc:	613b      	str	r3, [r7, #16]
 800a3ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800a3d0:	4b36      	ldr	r3, [pc, #216]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a3d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3d4:	4a35      	ldr	r2, [pc, #212]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a3d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3da:	6313      	str	r3, [r2, #48]	@ 0x30
 800a3dc:	4b33      	ldr	r3, [pc, #204]	@ (800a4ac <HAL_LTDC_MspInit+0x178>)
 800a3de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3e4:	60fb      	str	r3, [r7, #12]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800a3e8:	2310      	movs	r3, #16
 800a3ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800a3f8:	230e      	movs	r3, #14
 800a3fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800a3fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a400:	4619      	mov	r1, r3
 800a402:	482b      	ldr	r0, [pc, #172]	@ (800a4b0 <HAL_LTDC_MspInit+0x17c>)
 800a404:	f7f9 ff96 	bl	8004334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800a408:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800a40c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a40e:	2302      	movs	r3, #2
 800a410:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a412:	2300      	movs	r3, #0
 800a414:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a416:	2300      	movs	r3, #0
 800a418:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800a41a:	230e      	movs	r3, #14
 800a41c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800a41e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a422:	4619      	mov	r1, r3
 800a424:	4823      	ldr	r0, [pc, #140]	@ (800a4b4 <HAL_LTDC_MspInit+0x180>)
 800a426:	f7f9 ff85 	bl	8004334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800a42a:	23f7      	movs	r3, #247	@ 0xf7
 800a42c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a42e:	2302      	movs	r3, #2
 800a430:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a432:	2300      	movs	r3, #0
 800a434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a436:	2300      	movs	r3, #0
 800a438:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800a43a:	230e      	movs	r3, #14
 800a43c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800a43e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a442:	4619      	mov	r1, r3
 800a444:	481c      	ldr	r0, [pc, #112]	@ (800a4b8 <HAL_LTDC_MspInit+0x184>)
 800a446:	f7f9 ff75 	bl	8004334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800a44a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a44e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a450:	2302      	movs	r3, #2
 800a452:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a454:	2300      	movs	r3, #0
 800a456:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a458:	2300      	movs	r3, #0
 800a45a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800a45c:	2309      	movs	r3, #9
 800a45e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800a460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a464:	4619      	mov	r1, r3
 800a466:	4815      	ldr	r0, [pc, #84]	@ (800a4bc <HAL_LTDC_MspInit+0x188>)
 800a468:	f7f9 ff64 	bl	8004334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800a46c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800a470:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a472:	2302      	movs	r3, #2
 800a474:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a476:	2300      	movs	r3, #0
 800a478:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a47a:	2300      	movs	r3, #0
 800a47c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800a47e:	230e      	movs	r3, #14
 800a480:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a482:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a486:	4619      	mov	r1, r3
 800a488:	480d      	ldr	r0, [pc, #52]	@ (800a4c0 <HAL_LTDC_MspInit+0x18c>)
 800a48a:	f7f9 ff53 	bl	8004334 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800a48e:	2200      	movs	r2, #0
 800a490:	2105      	movs	r1, #5
 800a492:	2058      	movs	r0, #88	@ 0x58
 800a494:	f7f9 f9af 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800a498:	2058      	movs	r0, #88	@ 0x58
 800a49a:	f7f9 f9c8 	bl	800382e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800a49e:	bf00      	nop
 800a4a0:	3738      	adds	r7, #56	@ 0x38
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	40016800 	.word	0x40016800
 800a4ac:	40023800 	.word	0x40023800
 800a4b0:	40021000 	.word	0x40021000
 800a4b4:	40022400 	.word	0x40022400
 800a4b8:	40022800 	.word	0x40022800
 800a4bc:	40021800 	.word	0x40021800
 800a4c0:	40022000 	.word	0x40022000

0800a4c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b090      	sub	sp, #64	@ 0x40
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	601a      	str	r2, [r3, #0]
 800a4d4:	605a      	str	r2, [r3, #4]
 800a4d6:	609a      	str	r2, [r3, #8]
 800a4d8:	60da      	str	r2, [r3, #12]
 800a4da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a58      	ldr	r2, [pc, #352]	@ (800a644 <HAL_TIM_Base_MspInit+0x180>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d129      	bne.n	800a53a <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a4e6:	4b58      	ldr	r3, [pc, #352]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a4e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4ea:	4a57      	ldr	r2, [pc, #348]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a4ec:	f043 0301 	orr.w	r3, r3, #1
 800a4f0:	6453      	str	r3, [r2, #68]	@ 0x44
 800a4f2:	4b55      	ldr	r3, [pc, #340]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a4f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4f6:	f003 0301 	and.w	r3, r3, #1
 800a4fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4fe:	4b52      	ldr	r3, [pc, #328]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a502:	4a51      	ldr	r2, [pc, #324]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a504:	f043 0301 	orr.w	r3, r3, #1
 800a508:	6313      	str	r3, [r2, #48]	@ 0x30
 800a50a:	4b4f      	ldr	r3, [pc, #316]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a50c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	627b      	str	r3, [r7, #36]	@ 0x24
 800a514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800a516:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a51a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a51c:	2302      	movs	r3, #2
 800a51e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a520:	2300      	movs	r3, #0
 800a522:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a524:	2300      	movs	r3, #0
 800a526:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a528:	2301      	movs	r3, #1
 800a52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800a52c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a530:	4619      	mov	r1, r3
 800a532:	4846      	ldr	r0, [pc, #280]	@ (800a64c <HAL_TIM_Base_MspInit+0x188>)
 800a534:	f7f9 fefe 	bl	8004334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800a538:	e07f      	b.n	800a63a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a542:	d129      	bne.n	800a598 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a544:	4b40      	ldr	r3, [pc, #256]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a548:	4a3f      	ldr	r2, [pc, #252]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a54a:	f043 0301 	orr.w	r3, r3, #1
 800a54e:	6413      	str	r3, [r2, #64]	@ 0x40
 800a550:	4b3d      	ldr	r3, [pc, #244]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a554:	f003 0301 	and.w	r3, r3, #1
 800a558:	623b      	str	r3, [r7, #32]
 800a55a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a55c:	4b3a      	ldr	r3, [pc, #232]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a55e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a560:	4a39      	ldr	r2, [pc, #228]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a562:	f043 0301 	orr.w	r3, r3, #1
 800a566:	6313      	str	r3, [r2, #48]	@ 0x30
 800a568:	4b37      	ldr	r3, [pc, #220]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a56a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a56c:	f003 0301 	and.w	r3, r3, #1
 800a570:	61fb      	str	r3, [r7, #28]
 800a572:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800a574:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a578:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a57a:	2302      	movs	r3, #2
 800a57c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a57e:	2300      	movs	r3, #0
 800a580:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a582:	2300      	movs	r3, #0
 800a584:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a586:	2301      	movs	r3, #1
 800a588:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800a58a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a58e:	4619      	mov	r1, r3
 800a590:	482e      	ldr	r0, [pc, #184]	@ (800a64c <HAL_TIM_Base_MspInit+0x188>)
 800a592:	f7f9 fecf 	bl	8004334 <HAL_GPIO_Init>
}
 800a596:	e050      	b.n	800a63a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM3)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a2c      	ldr	r2, [pc, #176]	@ (800a650 <HAL_TIM_Base_MspInit+0x18c>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d128      	bne.n	800a5f4 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a5a2:	4b29      	ldr	r3, [pc, #164]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a5a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5a6:	4a28      	ldr	r2, [pc, #160]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a5a8:	f043 0302 	orr.w	r3, r3, #2
 800a5ac:	6413      	str	r3, [r2, #64]	@ 0x40
 800a5ae:	4b26      	ldr	r3, [pc, #152]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a5b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5b2:	f003 0302 	and.w	r3, r3, #2
 800a5b6:	61bb      	str	r3, [r7, #24]
 800a5b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5ba:	4b23      	ldr	r3, [pc, #140]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a5bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5be:	4a22      	ldr	r2, [pc, #136]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a5c0:	f043 0302 	orr.w	r3, r3, #2
 800a5c4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a5c6:	4b20      	ldr	r3, [pc, #128]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a5c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ca:	f003 0302 	and.w	r3, r3, #2
 800a5ce:	617b      	str	r3, [r7, #20]
 800a5d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800a5d2:	2310      	movs	r3, #16
 800a5d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800a5e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	4819      	ldr	r0, [pc, #100]	@ (800a654 <HAL_TIM_Base_MspInit+0x190>)
 800a5ee:	f7f9 fea1 	bl	8004334 <HAL_GPIO_Init>
}
 800a5f2:	e022      	b.n	800a63a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM5)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a17      	ldr	r2, [pc, #92]	@ (800a658 <HAL_TIM_Base_MspInit+0x194>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d10c      	bne.n	800a618 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a5fe:	4b12      	ldr	r3, [pc, #72]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a602:	4a11      	ldr	r2, [pc, #68]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a604:	f043 0308 	orr.w	r3, r3, #8
 800a608:	6413      	str	r3, [r2, #64]	@ 0x40
 800a60a:	4b0f      	ldr	r3, [pc, #60]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a60c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a60e:	f003 0308 	and.w	r3, r3, #8
 800a612:	613b      	str	r3, [r7, #16]
 800a614:	693b      	ldr	r3, [r7, #16]
}
 800a616:	e010      	b.n	800a63a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM8)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a0f      	ldr	r2, [pc, #60]	@ (800a65c <HAL_TIM_Base_MspInit+0x198>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d10b      	bne.n	800a63a <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a622:	4b09      	ldr	r3, [pc, #36]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a626:	4a08      	ldr	r2, [pc, #32]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a628:	f043 0302 	orr.w	r3, r3, #2
 800a62c:	6453      	str	r3, [r2, #68]	@ 0x44
 800a62e:	4b06      	ldr	r3, [pc, #24]	@ (800a648 <HAL_TIM_Base_MspInit+0x184>)
 800a630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a632:	f003 0302 	and.w	r3, r3, #2
 800a636:	60fb      	str	r3, [r7, #12]
 800a638:	68fb      	ldr	r3, [r7, #12]
}
 800a63a:	bf00      	nop
 800a63c:	3740      	adds	r7, #64	@ 0x40
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	40010000 	.word	0x40010000
 800a648:	40023800 	.word	0x40023800
 800a64c:	40020000 	.word	0x40020000
 800a650:	40000400 	.word	0x40000400
 800a654:	40020400 	.word	0x40020400
 800a658:	40000c00 	.word	0x40000c00
 800a65c:	40010400 	.word	0x40010400

0800a660 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM12)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a0a      	ldr	r2, [pc, #40]	@ (800a698 <HAL_TIM_PWM_MspInit+0x38>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d10b      	bne.n	800a68a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800a672:	4b0a      	ldr	r3, [pc, #40]	@ (800a69c <HAL_TIM_PWM_MspInit+0x3c>)
 800a674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a676:	4a09      	ldr	r2, [pc, #36]	@ (800a69c <HAL_TIM_PWM_MspInit+0x3c>)
 800a678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a67c:	6413      	str	r3, [r2, #64]	@ 0x40
 800a67e:	4b07      	ldr	r3, [pc, #28]	@ (800a69c <HAL_TIM_PWM_MspInit+0x3c>)
 800a680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a686:	60fb      	str	r3, [r7, #12]
 800a688:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800a68a:	bf00      	nop
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	40001800 	.word	0x40001800
 800a69c:	40023800 	.word	0x40023800

0800a6a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b08a      	sub	sp, #40	@ 0x28
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6a8:	f107 0314 	add.w	r3, r7, #20
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	601a      	str	r2, [r3, #0]
 800a6b0:	605a      	str	r2, [r3, #4]
 800a6b2:	609a      	str	r2, [r3, #8]
 800a6b4:	60da      	str	r2, [r3, #12]
 800a6b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a22      	ldr	r2, [pc, #136]	@ (800a748 <HAL_TIM_MspPostInit+0xa8>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d11c      	bne.n	800a6fc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800a6c2:	4b22      	ldr	r3, [pc, #136]	@ (800a74c <HAL_TIM_MspPostInit+0xac>)
 800a6c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6c6:	4a21      	ldr	r2, [pc, #132]	@ (800a74c <HAL_TIM_MspPostInit+0xac>)
 800a6c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6cc:	6313      	str	r3, [r2, #48]	@ 0x30
 800a6ce:	4b1f      	ldr	r3, [pc, #124]	@ (800a74c <HAL_TIM_MspPostInit+0xac>)
 800a6d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6d6:	613b      	str	r3, [r7, #16]
 800a6d8:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration    
    PI0     ------> TIM5_CH4 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6de:	2302      	movs	r3, #2
 800a6e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800a6ea:	2302      	movs	r3, #2
 800a6ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800a6ee:	f107 0314 	add.w	r3, r7, #20
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	4816      	ldr	r0, [pc, #88]	@ (800a750 <HAL_TIM_MspPostInit+0xb0>)
 800a6f6:	f7f9 fe1d 	bl	8004334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800a6fa:	e020      	b.n	800a73e <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM12)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a14      	ldr	r2, [pc, #80]	@ (800a754 <HAL_TIM_MspPostInit+0xb4>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d11b      	bne.n	800a73e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a706:	4b11      	ldr	r3, [pc, #68]	@ (800a74c <HAL_TIM_MspPostInit+0xac>)
 800a708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a70a:	4a10      	ldr	r2, [pc, #64]	@ (800a74c <HAL_TIM_MspPostInit+0xac>)
 800a70c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a710:	6313      	str	r3, [r2, #48]	@ 0x30
 800a712:	4b0e      	ldr	r3, [pc, #56]	@ (800a74c <HAL_TIM_MspPostInit+0xac>)
 800a714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a71a:	60fb      	str	r3, [r7, #12]
 800a71c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800a71e:	2340      	movs	r3, #64	@ 0x40
 800a720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a722:	2302      	movs	r3, #2
 800a724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a726:	2300      	movs	r3, #0
 800a728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a72a:	2300      	movs	r3, #0
 800a72c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800a72e:	2309      	movs	r3, #9
 800a730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800a732:	f107 0314 	add.w	r3, r7, #20
 800a736:	4619      	mov	r1, r3
 800a738:	4807      	ldr	r0, [pc, #28]	@ (800a758 <HAL_TIM_MspPostInit+0xb8>)
 800a73a:	f7f9 fdfb 	bl	8004334 <HAL_GPIO_Init>
}
 800a73e:	bf00      	nop
 800a740:	3728      	adds	r7, #40	@ 0x28
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	40000c00 	.word	0x40000c00
 800a74c:	40023800 	.word	0x40023800
 800a750:	40022000 	.word	0x40022000
 800a754:	40001800 	.word	0x40001800
 800a758:	40021c00 	.word	0x40021c00

0800a75c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b08c      	sub	sp, #48	@ 0x30
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a764:	f107 031c 	add.w	r3, r7, #28
 800a768:	2200      	movs	r2, #0
 800a76a:	601a      	str	r2, [r3, #0]
 800a76c:	605a      	str	r2, [r3, #4]
 800a76e:	609a      	str	r2, [r3, #8]
 800a770:	60da      	str	r2, [r3, #12]
 800a772:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a3c      	ldr	r2, [pc, #240]	@ (800a86c <HAL_UART_MspInit+0x110>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d145      	bne.n	800a80a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a77e:	4b3c      	ldr	r3, [pc, #240]	@ (800a870 <HAL_UART_MspInit+0x114>)
 800a780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a782:	4a3b      	ldr	r2, [pc, #236]	@ (800a870 <HAL_UART_MspInit+0x114>)
 800a784:	f043 0310 	orr.w	r3, r3, #16
 800a788:	6453      	str	r3, [r2, #68]	@ 0x44
 800a78a:	4b39      	ldr	r3, [pc, #228]	@ (800a870 <HAL_UART_MspInit+0x114>)
 800a78c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a78e:	f003 0310 	and.w	r3, r3, #16
 800a792:	61bb      	str	r3, [r7, #24]
 800a794:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a796:	4b36      	ldr	r3, [pc, #216]	@ (800a870 <HAL_UART_MspInit+0x114>)
 800a798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a79a:	4a35      	ldr	r2, [pc, #212]	@ (800a870 <HAL_UART_MspInit+0x114>)
 800a79c:	f043 0302 	orr.w	r3, r3, #2
 800a7a0:	6313      	str	r3, [r2, #48]	@ 0x30
 800a7a2:	4b33      	ldr	r3, [pc, #204]	@ (800a870 <HAL_UART_MspInit+0x114>)
 800a7a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7a6:	f003 0302 	and.w	r3, r3, #2
 800a7aa:	617b      	str	r3, [r7, #20]
 800a7ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7ae:	4b30      	ldr	r3, [pc, #192]	@ (800a870 <HAL_UART_MspInit+0x114>)
 800a7b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b2:	4a2f      	ldr	r2, [pc, #188]	@ (800a870 <HAL_UART_MspInit+0x114>)
 800a7b4:	f043 0301 	orr.w	r3, r3, #1
 800a7b8:	6313      	str	r3, [r2, #48]	@ 0x30
 800a7ba:	4b2d      	ldr	r3, [pc, #180]	@ (800a870 <HAL_UART_MspInit+0x114>)
 800a7bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7be:	f003 0301 	and.w	r3, r3, #1
 800a7c2:	613b      	str	r3, [r7, #16]
 800a7c4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800a7c6:	2380      	movs	r3, #128	@ 0x80
 800a7c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7ca:	2302      	movs	r3, #2
 800a7cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a7d6:	2307      	movs	r3, #7
 800a7d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800a7da:	f107 031c 	add.w	r3, r7, #28
 800a7de:	4619      	mov	r1, r3
 800a7e0:	4824      	ldr	r0, [pc, #144]	@ (800a874 <HAL_UART_MspInit+0x118>)
 800a7e2:	f7f9 fda7 	bl	8004334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800a7e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a7f8:	2307      	movs	r3, #7
 800a7fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800a7fc:	f107 031c 	add.w	r3, r7, #28
 800a800:	4619      	mov	r1, r3
 800a802:	481d      	ldr	r0, [pc, #116]	@ (800a878 <HAL_UART_MspInit+0x11c>)
 800a804:	f7f9 fd96 	bl	8004334 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800a808:	e02c      	b.n	800a864 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a1b      	ldr	r2, [pc, #108]	@ (800a87c <HAL_UART_MspInit+0x120>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d127      	bne.n	800a864 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 800a814:	4b16      	ldr	r3, [pc, #88]	@ (800a870 <HAL_UART_MspInit+0x114>)
 800a816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a818:	4a15      	ldr	r2, [pc, #84]	@ (800a870 <HAL_UART_MspInit+0x114>)
 800a81a:	f043 0320 	orr.w	r3, r3, #32
 800a81e:	6453      	str	r3, [r2, #68]	@ 0x44
 800a820:	4b13      	ldr	r3, [pc, #76]	@ (800a870 <HAL_UART_MspInit+0x114>)
 800a822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a824:	f003 0320 	and.w	r3, r3, #32
 800a828:	60fb      	str	r3, [r7, #12]
 800a82a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a82c:	4b10      	ldr	r3, [pc, #64]	@ (800a870 <HAL_UART_MspInit+0x114>)
 800a82e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a830:	4a0f      	ldr	r2, [pc, #60]	@ (800a870 <HAL_UART_MspInit+0x114>)
 800a832:	f043 0304 	orr.w	r3, r3, #4
 800a836:	6313      	str	r3, [r2, #48]	@ 0x30
 800a838:	4b0d      	ldr	r3, [pc, #52]	@ (800a870 <HAL_UART_MspInit+0x114>)
 800a83a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a83c:	f003 0304 	and.w	r3, r3, #4
 800a840:	60bb      	str	r3, [r7, #8]
 800a842:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800a844:	23c0      	movs	r3, #192	@ 0xc0
 800a846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a848:	2302      	movs	r3, #2
 800a84a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a84c:	2300      	movs	r3, #0
 800a84e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a850:	2303      	movs	r3, #3
 800a852:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a854:	2308      	movs	r3, #8
 800a856:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a858:	f107 031c 	add.w	r3, r7, #28
 800a85c:	4619      	mov	r1, r3
 800a85e:	4808      	ldr	r0, [pc, #32]	@ (800a880 <HAL_UART_MspInit+0x124>)
 800a860:	f7f9 fd68 	bl	8004334 <HAL_GPIO_Init>
}
 800a864:	bf00      	nop
 800a866:	3730      	adds	r7, #48	@ 0x30
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	40011000 	.word	0x40011000
 800a870:	40023800 	.word	0x40023800
 800a874:	40020400 	.word	0x40020400
 800a878:	40020000 	.word	0x40020000
 800a87c:	40011400 	.word	0x40011400
 800a880:	40020800 	.word	0x40020800

0800a884 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800a88a:	4b3b      	ldr	r3, [pc, #236]	@ (800a978 <HAL_FMC_MspInit+0xf4>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d16d      	bne.n	800a96e <HAL_FMC_MspInit+0xea>
    return;
  }
  FMC_Initialized = 1;
 800a892:	4b39      	ldr	r3, [pc, #228]	@ (800a978 <HAL_FMC_MspInit+0xf4>)
 800a894:	2201      	movs	r2, #1
 800a896:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800a898:	4b38      	ldr	r3, [pc, #224]	@ (800a97c <HAL_FMC_MspInit+0xf8>)
 800a89a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a89c:	4a37      	ldr	r2, [pc, #220]	@ (800a97c <HAL_FMC_MspInit+0xf8>)
 800a89e:	f043 0301 	orr.w	r3, r3, #1
 800a8a2:	6393      	str	r3, [r2, #56]	@ 0x38
 800a8a4:	4b35      	ldr	r3, [pc, #212]	@ (800a97c <HAL_FMC_MspInit+0xf8>)
 800a8a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	603b      	str	r3, [r7, #0]
 800a8ae:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800a8b0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800a8b4:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8b6:	2302      	movs	r3, #2
 800a8b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8be:	2303      	movs	r3, #3
 800a8c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a8c2:	230c      	movs	r3, #12
 800a8c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a8c6:	1d3b      	adds	r3, r7, #4
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	482d      	ldr	r0, [pc, #180]	@ (800a980 <HAL_FMC_MspInit+0xfc>)
 800a8cc:	f7f9 fd32 	bl	8004334 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800a8d0:	f248 1333 	movw	r3, #33075	@ 0x8133
 800a8d4:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8d6:	2302      	movs	r3, #2
 800a8d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a8e2:	230c      	movs	r3, #12
 800a8e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a8e6:	1d3b      	adds	r3, r7, #4
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	4826      	ldr	r0, [pc, #152]	@ (800a984 <HAL_FMC_MspInit+0x100>)
 800a8ec:	f7f9 fd22 	bl	8004334 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800a8f0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800a8f4:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8f6:	2302      	movs	r3, #2
 800a8f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8fe:	2303      	movs	r3, #3
 800a900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a902:	230c      	movs	r3, #12
 800a904:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a906:	1d3b      	adds	r3, r7, #4
 800a908:	4619      	mov	r1, r3
 800a90a:	481f      	ldr	r0, [pc, #124]	@ (800a988 <HAL_FMC_MspInit+0x104>)
 800a90c:	f7f9 fd12 	bl	8004334 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800a910:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800a914:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a916:	2302      	movs	r3, #2
 800a918:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a91e:	2303      	movs	r3, #3
 800a920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a922:	230c      	movs	r3, #12
 800a924:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a926:	1d3b      	adds	r3, r7, #4
 800a928:	4619      	mov	r1, r3
 800a92a:	4818      	ldr	r0, [pc, #96]	@ (800a98c <HAL_FMC_MspInit+0x108>)
 800a92c:	f7f9 fd02 	bl	8004334 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800a930:	2328      	movs	r3, #40	@ 0x28
 800a932:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a934:	2302      	movs	r3, #2
 800a936:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a938:	2300      	movs	r3, #0
 800a93a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a93c:	2303      	movs	r3, #3
 800a93e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a940:	230c      	movs	r3, #12
 800a942:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a944:	1d3b      	adds	r3, r7, #4
 800a946:	4619      	mov	r1, r3
 800a948:	4811      	ldr	r0, [pc, #68]	@ (800a990 <HAL_FMC_MspInit+0x10c>)
 800a94a:	f7f9 fcf3 	bl	8004334 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800a94e:	2308      	movs	r3, #8
 800a950:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a952:	2302      	movs	r3, #2
 800a954:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a956:	2300      	movs	r3, #0
 800a958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a95a:	2303      	movs	r3, #3
 800a95c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a95e:	230c      	movs	r3, #12
 800a960:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800a962:	1d3b      	adds	r3, r7, #4
 800a964:	4619      	mov	r1, r3
 800a966:	480b      	ldr	r0, [pc, #44]	@ (800a994 <HAL_FMC_MspInit+0x110>)
 800a968:	f7f9 fce4 	bl	8004334 <HAL_GPIO_Init>
 800a96c:	e000      	b.n	800a970 <HAL_FMC_MspInit+0xec>
    return;
 800a96e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800a970:	3718      	adds	r7, #24
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20004678 	.word	0x20004678
 800a97c:	40023800 	.word	0x40023800
 800a980:	40021000 	.word	0x40021000
 800a984:	40021800 	.word	0x40021800
 800a988:	40020c00 	.word	0x40020c00
 800a98c:	40021400 	.word	0x40021400
 800a990:	40021c00 	.word	0x40021c00
 800a994:	40020800 	.word	0x40020800

0800a998 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800a9a0:	f7ff ff70 	bl	800a884 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800a9a4:	bf00      	nop
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08a      	sub	sp, #40	@ 0x28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a2b      	ldr	r2, [pc, #172]	@ (800aa68 <HAL_SAI_MspInit+0xbc>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d124      	bne.n	800aa08 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800a9be:	4b2b      	ldr	r3, [pc, #172]	@ (800aa6c <HAL_SAI_MspInit+0xc0>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10b      	bne.n	800a9de <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800a9c6:	4b2a      	ldr	r3, [pc, #168]	@ (800aa70 <HAL_SAI_MspInit+0xc4>)
 800a9c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ca:	4a29      	ldr	r2, [pc, #164]	@ (800aa70 <HAL_SAI_MspInit+0xc4>)
 800a9cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a9d0:	6453      	str	r3, [r2, #68]	@ 0x44
 800a9d2:	4b27      	ldr	r3, [pc, #156]	@ (800aa70 <HAL_SAI_MspInit+0xc4>)
 800a9d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9da:	613b      	str	r3, [r7, #16]
 800a9dc:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800a9de:	4b23      	ldr	r3, [pc, #140]	@ (800aa6c <HAL_SAI_MspInit+0xc0>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	4a21      	ldr	r2, [pc, #132]	@ (800aa6c <HAL_SAI_MspInit+0xc0>)
 800a9e6:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800a9e8:	23f0      	movs	r3, #240	@ 0xf0
 800a9ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9f4:	2303      	movs	r3, #3
 800a9f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800a9f8:	230a      	movs	r3, #10
 800a9fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a9fc:	f107 0314 	add.w	r3, r7, #20
 800aa00:	4619      	mov	r1, r3
 800aa02:	481c      	ldr	r0, [pc, #112]	@ (800aa74 <HAL_SAI_MspInit+0xc8>)
 800aa04:	f7f9 fc96 	bl	8004334 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a1a      	ldr	r2, [pc, #104]	@ (800aa78 <HAL_SAI_MspInit+0xcc>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d125      	bne.n	800aa5e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800aa12:	4b16      	ldr	r3, [pc, #88]	@ (800aa6c <HAL_SAI_MspInit+0xc0>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10b      	bne.n	800aa32 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800aa1a:	4b15      	ldr	r3, [pc, #84]	@ (800aa70 <HAL_SAI_MspInit+0xc4>)
 800aa1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa1e:	4a14      	ldr	r2, [pc, #80]	@ (800aa70 <HAL_SAI_MspInit+0xc4>)
 800aa20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aa24:	6453      	str	r3, [r2, #68]	@ 0x44
 800aa26:	4b12      	ldr	r3, [pc, #72]	@ (800aa70 <HAL_SAI_MspInit+0xc4>)
 800aa28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa2e:	60fb      	str	r3, [r7, #12]
 800aa30:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800aa32:	4b0e      	ldr	r3, [pc, #56]	@ (800aa6c <HAL_SAI_MspInit+0xc0>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	3301      	adds	r3, #1
 800aa38:	4a0c      	ldr	r2, [pc, #48]	@ (800aa6c <HAL_SAI_MspInit+0xc0>)
 800aa3a:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800aa3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa42:	2302      	movs	r3, #2
 800aa44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa46:	2300      	movs	r3, #0
 800aa48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800aa4e:	230a      	movs	r3, #10
 800aa50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800aa52:	f107 0314 	add.w	r3, r7, #20
 800aa56:	4619      	mov	r1, r3
 800aa58:	4808      	ldr	r0, [pc, #32]	@ (800aa7c <HAL_SAI_MspInit+0xd0>)
 800aa5a:	f7f9 fc6b 	bl	8004334 <HAL_GPIO_Init>

    }
}
 800aa5e:	bf00      	nop
 800aa60:	3728      	adds	r7, #40	@ 0x28
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	40015c04 	.word	0x40015c04
 800aa6c:	2000467c 	.word	0x2000467c
 800aa70:	40023800 	.word	0x40023800
 800aa74:	40022000 	.word	0x40022000
 800aa78:	40015c24 	.word	0x40015c24
 800aa7c:	40021800 	.word	0x40021800

0800aa80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800aa80:	b480      	push	{r7}
 800aa82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800aa84:	bf00      	nop
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800aa8e:	b480      	push	{r7}
 800aa90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800aa92:	bf00      	nop
 800aa94:	e7fd      	b.n	800aa92 <HardFault_Handler+0x4>

0800aa96 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800aa96:	b480      	push	{r7}
 800aa98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800aa9a:	bf00      	nop
 800aa9c:	e7fd      	b.n	800aa9a <MemManage_Handler+0x4>

0800aa9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800aaa2:	bf00      	nop
 800aaa4:	e7fd      	b.n	800aaa2 <BusFault_Handler+0x4>

0800aaa6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800aaa6:	b480      	push	{r7}
 800aaa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800aaaa:	bf00      	nop
 800aaac:	e7fd      	b.n	800aaaa <UsageFault_Handler+0x4>

0800aaae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800aaae:	b480      	push	{r7}
 800aab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800aab2:	bf00      	nop
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800aabc:	b480      	push	{r7}
 800aabe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800aac0:	bf00      	nop
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr

0800aaca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800aaca:	b480      	push	{r7}
 800aacc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800aace:	bf00      	nop
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800aadc:	f7f8 fd70 	bl	80035c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800aae0:	bf00      	nop
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800aae8:	4802      	ldr	r0, [pc, #8]	@ (800aaf4 <DMA2D_IRQHandler+0x10>)
 800aaea:	f7f9 f9d6 	bl	8003e9a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800aaee:	bf00      	nop
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	200041a8 	.word	0x200041a8

0800aaf8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800aafc:	4b15      	ldr	r3, [pc, #84]	@ (800ab54 <SystemInit+0x5c>)
 800aafe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab02:	4a14      	ldr	r2, [pc, #80]	@ (800ab54 <SystemInit+0x5c>)
 800ab04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ab08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ab0c:	4b12      	ldr	r3, [pc, #72]	@ (800ab58 <SystemInit+0x60>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a11      	ldr	r2, [pc, #68]	@ (800ab58 <SystemInit+0x60>)
 800ab12:	f043 0301 	orr.w	r3, r3, #1
 800ab16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ab18:	4b0f      	ldr	r3, [pc, #60]	@ (800ab58 <SystemInit+0x60>)
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ab1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ab58 <SystemInit+0x60>)
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	490d      	ldr	r1, [pc, #52]	@ (800ab58 <SystemInit+0x60>)
 800ab24:	4b0d      	ldr	r3, [pc, #52]	@ (800ab5c <SystemInit+0x64>)
 800ab26:	4013      	ands	r3, r2
 800ab28:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ab2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ab58 <SystemInit+0x60>)
 800ab2c:	4a0c      	ldr	r2, [pc, #48]	@ (800ab60 <SystemInit+0x68>)
 800ab2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ab30:	4b09      	ldr	r3, [pc, #36]	@ (800ab58 <SystemInit+0x60>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a08      	ldr	r2, [pc, #32]	@ (800ab58 <SystemInit+0x60>)
 800ab36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ab3c:	4b06      	ldr	r3, [pc, #24]	@ (800ab58 <SystemInit+0x60>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ab42:	4b04      	ldr	r3, [pc, #16]	@ (800ab54 <SystemInit+0x5c>)
 800ab44:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ab48:	609a      	str	r2, [r3, #8]
#endif
}
 800ab4a:	bf00      	nop
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr
 800ab54:	e000ed00 	.word	0xe000ed00
 800ab58:	40023800 	.word	0x40023800
 800ab5c:	fef6ffff 	.word	0xfef6ffff
 800ab60:	24003010 	.word	0x24003010

0800ab64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800ab64:	480d      	ldr	r0, [pc, #52]	@ (800ab9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800ab66:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800ab68:	f7ff ffc6 	bl	800aaf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ab6c:	480c      	ldr	r0, [pc, #48]	@ (800aba0 <LoopForever+0x6>)
  ldr r1, =_edata
 800ab6e:	490d      	ldr	r1, [pc, #52]	@ (800aba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ab70:	4a0d      	ldr	r2, [pc, #52]	@ (800aba8 <LoopForever+0xe>)
  movs r3, #0
 800ab72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ab74:	e002      	b.n	800ab7c <LoopCopyDataInit>

0800ab76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ab76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ab78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ab7a:	3304      	adds	r3, #4

0800ab7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ab7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ab7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ab80:	d3f9      	bcc.n	800ab76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ab82:	4a0a      	ldr	r2, [pc, #40]	@ (800abac <LoopForever+0x12>)
  ldr r4, =_ebss
 800ab84:	4c0a      	ldr	r4, [pc, #40]	@ (800abb0 <LoopForever+0x16>)
  movs r3, #0
 800ab86:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ab88:	e001      	b.n	800ab8e <LoopFillZerobss>

0800ab8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ab8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ab8c:	3204      	adds	r2, #4

0800ab8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ab8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ab90:	d3fb      	bcc.n	800ab8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800ab92:	f000 f819 	bl	800abc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800ab96:	f7fe fa6b 	bl	8009070 <main>

0800ab9a <LoopForever>:

LoopForever:
  b LoopForever
 800ab9a:	e7fe      	b.n	800ab9a <LoopForever>
  ldr   r0, =_estack
 800ab9c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800aba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800aba4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800aba8:	0800fb74 	.word	0x0800fb74
  ldr r2, =_sbss
 800abac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800abb0:	20004680 	.word	0x20004680

0800abb4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800abb4:	e7fe      	b.n	800abb4 <ADC_IRQHandler>

0800abb6 <memset>:
 800abb6:	4402      	add	r2, r0
 800abb8:	4603      	mov	r3, r0
 800abba:	4293      	cmp	r3, r2
 800abbc:	d100      	bne.n	800abc0 <memset+0xa>
 800abbe:	4770      	bx	lr
 800abc0:	f803 1b01 	strb.w	r1, [r3], #1
 800abc4:	e7f9      	b.n	800abba <memset+0x4>
	...

0800abc8 <__libc_init_array>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	4d0d      	ldr	r5, [pc, #52]	@ (800ac00 <__libc_init_array+0x38>)
 800abcc:	4c0d      	ldr	r4, [pc, #52]	@ (800ac04 <__libc_init_array+0x3c>)
 800abce:	1b64      	subs	r4, r4, r5
 800abd0:	10a4      	asrs	r4, r4, #2
 800abd2:	2600      	movs	r6, #0
 800abd4:	42a6      	cmp	r6, r4
 800abd6:	d109      	bne.n	800abec <__libc_init_array+0x24>
 800abd8:	4d0b      	ldr	r5, [pc, #44]	@ (800ac08 <__libc_init_array+0x40>)
 800abda:	4c0c      	ldr	r4, [pc, #48]	@ (800ac0c <__libc_init_array+0x44>)
 800abdc:	f000 f818 	bl	800ac10 <_init>
 800abe0:	1b64      	subs	r4, r4, r5
 800abe2:	10a4      	asrs	r4, r4, #2
 800abe4:	2600      	movs	r6, #0
 800abe6:	42a6      	cmp	r6, r4
 800abe8:	d105      	bne.n	800abf6 <__libc_init_array+0x2e>
 800abea:	bd70      	pop	{r4, r5, r6, pc}
 800abec:	f855 3b04 	ldr.w	r3, [r5], #4
 800abf0:	4798      	blx	r3
 800abf2:	3601      	adds	r6, #1
 800abf4:	e7ee      	b.n	800abd4 <__libc_init_array+0xc>
 800abf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800abfa:	4798      	blx	r3
 800abfc:	3601      	adds	r6, #1
 800abfe:	e7f2      	b.n	800abe6 <__libc_init_array+0x1e>
 800ac00:	0800fb6c 	.word	0x0800fb6c
 800ac04:	0800fb6c 	.word	0x0800fb6c
 800ac08:	0800fb6c 	.word	0x0800fb6c
 800ac0c:	0800fb70 	.word	0x0800fb70

0800ac10 <_init>:
 800ac10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac12:	bf00      	nop
 800ac14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac16:	bc08      	pop	{r3}
 800ac18:	469e      	mov	lr, r3
 800ac1a:	4770      	bx	lr

0800ac1c <_fini>:
 800ac1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1e:	bf00      	nop
 800ac20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac22:	bc08      	pop	{r3}
 800ac24:	469e      	mov	lr, r3
 800ac26:	4770      	bx	lr
